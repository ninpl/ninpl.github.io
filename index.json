[{"categories":["dev"],"content":" Dibuja o renderiza un formulario de Windows directamente sobre el fondo de pantalla, detr√°s de los √≠conos del escritorio en Windows. Introducci√≥n Quienes lean este art√≠culo probablemente conozcan DreamScene, la funci√≥n de Windows Vista que permite renderizar secuencias de v√≠deo (en formato .dream) como fondo de escritorio. Tambi√©n existe una herramienta llamada Rainmeter que permite colocar widgets, gadgets o cualquier otro elemento en el escritorio, uno encima del otro, arriba y abajo. Tambi√©n existe Winamp, el primer programa donde vi el renderizado de DirectX en acci√≥n detr√°s de los iconos del escritorio. Estas herramientas tienen una cosa en com√∫n: no pueden hacerlo en Windows 8, al menos la parte de ‚Äúdibujar debajo de los √≠conos del escritorio‚Äù. C√≥mo funcionaba antes Existe el √°rbol de ventanas. Este √°rbol contiene todas las ventanas que se muestran u ocultan en el escritorio actual. Adem√°s, existe una herramienta llamada Spy++ (Visual Studio -\u003e Herramientas -\u003e Spy++), que permite visualizar y navegar por dicho √°rbol. Esta herramienta forma parte de Visual Studio. El C√≥digo ","date":"12-03-2025","objectID":"/posts/2025/dev/001/:0:0","tags":["n9+","dev"],"title":"Renderizar detr√°s de los iconos del escritorio en Windows","uri":"/posts/2025/dev/001/"},{"categories":["dev"],"content":"Obtener la direcci√≥n del administrador del programa Primero, buscamos el identificador de la ventana Progman. Podemos usar la funci√≥n FindWindow proporcionada por la API de Windows para realizar esta tarea. IntPtr progman = W32.FindWindow(\"Progman\", null); ","date":"12-03-2025","objectID":"/posts/2025/dev/001/:0:1","tags":["n9+","dev"],"title":"Renderizar detr√°s de los iconos del escritorio en Windows","uri":"/posts/2025/dev/001/"},{"categories":["dev"],"content":"Enviar mensaje al administrador del programa Para activar la creaci√≥n de una ventana WorkerW entre los iconos del escritorio y el fondo de pantalla, debemos enviar un mensaje al Administrador de programas. Este mensaje no est√° documentado, por lo que no tiene un nombre especial en la API de Windows, excepto 0x052C. Para enviarlo, usamos el m√©todo . de la API de Windows SendMessageTimeout. IntPtr result = IntPtr.Zero; W32.SendMessageTimeout(progman, 0x052C, new IntPtr(0), IntPtr.Zero, W32.SendMessageTimeoutFlags.SMTO_NORMAL, 1000, out result); ","date":"12-03-2025","objectID":"/posts/2025/dev/001/:0:2","tags":["n9+","dev"],"title":"Renderizar detr√°s de los iconos del escritorio en Windows","uri":"/posts/2025/dev/001/"},{"categories":["dev"],"content":"Obtener el control de la ventana reci√©n creada Ahora, necesitamos obtener un identificador para la ventana WorkerW reci√©n creada. Dado que hay m√°s de una ventana con el t√≠tulo \"\" y la clase \" WorkerW\", debemos recorrer el √°rbol de ventanas secuencialmente. Esto se puede hacer usando la funci√≥n EnumWindows. EnumWindows realiza llamadas EnumWindowProc para cada ventana de nivel superior. Desde ah√≠, podemos comprobar si la ventana actual contiene un elemento secundario llamado ‚ÄúSHELLDLL_DefView‚Äù, lo que indica que representa los iconos del escritorio. A continuaci√≥n, tomamos el siguiente elemento secundario de esa ventana. // Spy++ output // ..... // 0x00010190 \"\" WorkerW // ... // 0x000100EE \"\" SHELLDLL_DefView // 0x000100F0 \"FolderView\" SysListView32 // 0x00100B8A \"\" WorkerW \u003c-- Esta es la instancia // 0x000100EC \"Program Manager\" Progman IntPtr workerw = IntPtr.Zero; W32.EnumWindows(new W32.EnumWindowsProc((tophandle, topparamhandle) =\u003e { IntPtr p = W32.FindWindowEx(tophandle, IntPtr.Zero, \"SHELLDLL_DefView\", IntPtr.Zero); if (p != IntPtr.Zero) { // Gets the WorkerW Window after the current one. workerw = W32.FindWindowEx(IntPtr.Zero, tophandle, \"WorkerW\", IntPtr.Zero); } return true; }), IntPtr.Zero); ","date":"12-03-2025","objectID":"/posts/2025/dev/001/:0:3","tags":["n9+","dev"],"title":"Renderizar detr√°s de los iconos del escritorio en Windows","uri":"/posts/2025/dev/001/"},{"categories":["dev"],"content":"Prueba 1: Dibujar gr√°ficos entre iconos y fondos de pantalla Con el workerw obtenido, empieza la diversi√≥n. La primera prueba trata sobre c√≥mo usar las clases System.Drawing para dibujar algo. Esta prueba dibuja un rect√°ngulo en la esquina superior izquierda del escritorio. Si usas varios monitores, ten en cuenta que el √°rea del escritorio ocupa un rect√°ngulo en todos ellos. Por lo tanto, aseg√∫rate de que el monitor izquierdo est√© encendido y que la ubicaci√≥n del monitor asigne la esquina superior izquierda a un monitor, en caso de tener cuatro, uno encima de los otros tres. NOTA Todo lo que dibujes en esta capa permanecer√° all√≠ hasta que pintes sobre ella, la invalides o restablezcas tu fondo de pantalla. IntPtr dc = W32.GetDCEx(workerw, IntPtr.Zero, (W32.DeviceContextValues)0x403); if (dc != IntPtr.Zero) { using (Graphics g = Graphics.FromHdc(dc)) { g.FillRectangle(new SolidBrush(Color.White), 0, 0, 500, 500); } W32.ReleaseDC(workerw, dc); } ","date":"12-03-2025","objectID":"/posts/2025/dev/001/:0:4","tags":["n9+","dev"],"title":"Renderizar detr√°s de los iconos del escritorio en Windows","uri":"/posts/2025/dev/001/"},{"categories":["dev"],"content":"Prueba 2: Colocar un formulario de Windows detr√°s de los iconos del escritorio Esta prueba muestra c√≥mo colocar un formulario Windows Form normal detr√°s de los iconos del escritorio. En esencia, esto se puede lograr asignando a nuestra ventana WorkerW el elemento principal de un formulario Windows Form. Para ello, podemos usar la funci√≥n SetParent de la API de Windows. NOTA Para que esta funci√≥n funcione, el formulario debe estar ya creado. El evento form.Load parece ser el lugar adecuado. Form form = new Form(); form.Text = \"Prueba Window\"; form.Load += new EventHandler((s, e) =\u003e { form.Width = 500; form.Height = 500; form.Left = 500; form.Top = 0; Button button = new Button() { Text = \"Catch Me\" }; form.Controls.Add(button); Random rnd = new Random(); System.Windows.Forms.Timer timer = new System.Windows.Forms.Timer(); timer.Interval = 100; timer.Tick += new EventHandler((sender, eventArgs) =\u003e { button.Left = rnd.Next(0, form.Width - button.Width); button.Top = rnd.Next(0, form.Height - button.Height); }); timer.Start(); W32.SetParent(form.Handle, workerw); }); Application.Run(form); Conclusi√≥n Un solo mandato para gobernarlos a todos üòÑ W32.SendMessageTimeout(W32.FindWindow(\"Progman\", null), 0x052C, new IntPtr(0), IntPtr.Zero, W32.SendMessageTimeoutFlags.SMTO_NORMAL, 1000, out result); . ","date":"12-03-2025","objectID":"/posts/2025/dev/001/:0:5","tags":["n9+","dev"],"title":"Renderizar detr√°s de los iconos del escritorio en Windows","uri":"/posts/2025/dev/001/"},{"categories":["comun"],"content":" La segunda temporada de ‚ÄúSolo Leveling‚Äù est√° a punto de entrar en uno de los arcos m√°s intensos del webtoon original: el Arco de la Isla de Jeju. Sin embargo, lo que deber√≠a ser una adapaci√≥n √©pica es√° envuelta en una controversia debido a los cambios y la censura que ha sufrido el anime. Aparentemente, el conflicto pol√≠tico entre Jap√≥n y Corea del Sur dentro de la historia ha sido modificado para evitar roces en la audiencia japonesa, lo que ha causado la indignaci√≥n de los fan√°ticos de la historia original. Pero, ¬øestos cambios podr√≠an afectar la trama? Para entender el problema, hay que recordar que ‚ÄúSolo Leveling‚Äù es un webtoon originario de Corea del Sur que, aunque es una historia de fantas√≠a, tiene una fuerte carga pol√≠tica protagonizada por pa√≠ses de la vida real. En el universo de la serie, los cazadores de alto rango son tratados como recursos estrategicos para sus respectivos pa√≠ses, lo que a√±ade una capa de rivalidad entre las naciones, quienes compiten por tener al mejor cazador representante. Esto queda en evidencia en el Arco de la Isla de Jeju, donde Jap√≥n y Corea del Sur deben colaborar para eliminar una amenaza com√∫n. Sin embargo, la adaptaci√≥n al anime producida en Jap√≥n ha suavizado mucho la trama. De entrada, cambiaron los nombres de los personajes y hasta el pa√≠s en donde se desarrolla. Sung Jinwoo ahora es Shun Mizushino, y Jap√≥n ha sido reemplazado por un pa√≠s ficticio llamado DFN. Todo esto para el anime sea del agrado del p√∫blico japon√©s. Y aunque esto no es algo nuevo en la industria, los fan√°ticos est√°n molestos porque los cambios podr√≠an afectar la esencia de la historia y quitar impacto a los mejores momentos. Y, de nuevo, el Arco de la Isla de Jeju es clave en la historia de ‚ÄúSolo Leveling‚Äù. En el webtoon, Jap√≥n y Corea del Sur se ven obligados a trabajar juntos porque los monstruos de la isla han evolucionado y ahora pueden volar, lo que pone en riesgo a toda la regi√≥n. Para acabar con ellos, re√∫nen a los cazadores de ambos pa√≠ses, pero aqu√≠ es donde las cosas se ponen tensas: los cazadores japoneses son ego√≠stas y est√°n m√°s interesados en s√≠ mismos que en completar la misi√≥n. As√≠ es, los japoneses son los malos. Y era evidente que este tipo de representaci√≥n no cay√≥ bien en Jap√≥n, por lo que la adaptaci√≥n al anime suaviz√≥ este enfoque. Pero si siguen eliminado matices pol√≠ticos, eventualmente los arcos narrativos perder√°n parte de su impacto. ‚ÄúSolo Leveling‚Äù no se trata solo del protagonista volvi√©ndose invencible, sino tambi√©n del papel que tienen los cazadores en el panorama pol√≠tico mundial. Si el anime sigue ignorando estos aspectos para evitar problemas, eventualmente ‚ÄúSolo Leveling‚Äù se convertir√° en un anime repetitivo sin esencia ni momentos que tengan un peso real en la historia. As√≠, la gran preocupaci√≥n de los fan√°ticos es qu√© pasar√° con el resto de la historia. El conflicto entre Jap√≥n y Corea del Sur apenas comienza en el Arco de la Isla de Jeju, pues se vuelve m√°s intenso m√°s adelante en el Arco de la Isla de Jap√≥n. Y si ya cambiaron ea parte, ¬øc√≥mo manejar√°n lo que viene luego? Adem√°s, el anime est√° evitando mencionar nacionalidades de forma directa. Peque√±os cambios pueden parecer irrelevantes de momento, pero si se siguen censurando estos elementos, eventualmente ‚ÄúSolo Leveling‚Äù ser√° completamente diferente al webtoon original. ","date":"05-03-2025","objectID":"/posts/2025/comun/001/:0:0","tags":["n9+","comun"],"title":"Contin√∫a la censura en Solo Leveling","uri":"/posts/2025/comun/001/"},{"categories":["dev"],"content":" Cuando se trabaja con Unity, muchas veces hacer un buen uso de Awake y Start puede ser suficiente como ‚Äúorden de ejecuci√≥n‚Äù para manejar la inicializaci√≥n de los sistemas. Por ejemplo, se puede usar Awake para asegurarse de que las referencias locales est√©n conectadas y luego usar Start para manejar cualquier inicializaci√≥n coordinada o retrasada que pueda ser necesaria. Esta lecci√≥n trata realmente sobre lo que se debe hacer cuando esos dos puntos de entrada no son suficientes. Patrones de Unity Para comenzar, veremos algunas soluciones espec√≠ficas de los scripts MonoBehaviour. ","date":"02-12-2024","objectID":"/posts/2024/dev/003/:0:0","tags":["n9+","dev"],"title":"Orden de ejecuci√≥n en Unity 6.0","uri":"/posts/2024/dev/003/"},{"categories":["dev"],"content":"Orden de ejecuci√≥n del script Creemos un proyecto de muestra para ilustrar algunas ideas. Comienza por crear un proyecto vac√≠o: puedes usar cualquier plantilla, pero yo eleg√≠ una opci√≥n est√°ndar de 2D Core. Abra la escena de muestra y cree un GameObject vac√≠o. Luego, cree y adjunte instancias de cuatro clases nuevas que debe crear: using UnityEngine; public class SistemaDatos : MonoBehaviour { void Start() Debug.Log(this.GetType().Name); } using UnityEngine; public class SistemaJuego : MonoBehaviour { void Start() Debug.Log(this.GetType().Name); } using UnityEngine; public class SistemaControles : MonoBehaviour { void Start() Debug.Log(this.GetType().Name); } using UnityEngine; public class SistemaRed : MonoBehaviour { void Start() Debug.Log(this.GetType().Name); } Estos cuatro scripts hacen lo mismo: utilizan el m√©todo Start como una oportunidad para inicializarse. En esta demostraci√≥n sencilla, todo lo que eso significa es que imprimen su nombre en la consola para que podamos ver el orden en que se ejecutaron. Sin embargo, tenga en cuenta que REPRESENTAN la idea de un proyecto m√°s completo y, por lo tanto, complejo. Reproduce la escena y observa el orden en que la ves. En una de las ejecuciones vi: 1 - SistemaRed 2 - SistemaControles 3 - SistemaJuego 4 - SistemaDatos Cabe destacar que este es el orden opuesto al que los agregu√© al GameObject. Tal vez pensaste que se reproducir√≠an en el orden en que los agregaste, pero no creo que Unity haga ninguna promesa con respecto al orden en que se invocan los m√©todos MonoBehaviour de diferentes instancias de script. Supongo que probablemente tenga algo que ver con la serializaci√≥n: tal vez los datos se guarden de una manera no ordenada como lo har√≠a un diccionario. Si estoy en lo cierto, entonces tendr√≠a sentido que Unity agregue una herramienta especial para manejar el ‚ÄúOrden de ejecuci√≥n del script‚Äù. Puedes encontrar esta herramienta en el men√∫. Elige Edit \u003e Project Settings \u003e Script Execution Order. Deber√≠a ver que ya se agregaron varios sistemas existentes y que se especificaron sus √≥rdenes. Cuanto menor sea el n√∫mero, antes se realizar√° la orden. Por ejemplo, UnityEngine.EventSystems.EventSystem , que tiene una orden de -1000, se ‚Äúiniciar√≠a‚Äù antes de que UnityEngine.UI.ToggleGroup, ya que este √∫ltimo tiene una orden de 10. En este momento, nuestros cuatro sistemas tienen un orden de ‚ÄúTiempo predeterminado‚Äù de ‚Äú0‚Äù. Eso significa que se activar√°n despu√©s de ‚ÄúEventSystem‚Äù y antes de ‚ÄúToggleGroup‚Äù. Si bien es posible asignar manualmente un orden a cada una de las clases, no recomiendo ese enfoque. En cambio, buscar√≠a sistemas espec√≠ficos que realmente necesiten activarse antes que otros sistemas, o que necesiten activarse despu√©s de otros sistemas y solo especificar√≠a nuevos valores para esos casos especiales. Supongamos que queremos que SistemaDatos se ejecute antes que SistemaJuego. Esto podr√≠a deberse a que queremos cargar los datos del juego antes de que el juego necesite trabajar con ellos. Desafortunadamente, en nuestro ejemplo anterior, SistemaJuego se ejecut√≥ primero; ¬°pensar√≠a que el usuario no ten√≠a datos guardados! üòÑ Utilice la herramienta ‚ÄúOrden de ejecuci√≥n de script‚Äù para solucionarlo: 1 - Haga clic en el bot√≥n m√°s para agregar una nueva entrada 2 - Seleccione SistemaDatos de la lista que aparece 3 - Asignar un valor negativo al orden: quiz√°s -10 4 - Haga clic en ‚ÄúAplicar‚Äù y luego cierre la ventana. Ejecute la escena nuevamente y observe el nuevo orden que aparece: 1 - SistemaDatos 2 - SistemaRed 3 - SistemaControles 4 - SistemaDatos ¬°Perfecto! No me importaba el orden de los sistemas, excepto que quer√≠a que DataSystem se ejecutara primero, y ahora lo hizo. Esto ser√≠a as√≠ independientemente del orden de los componentes en un GameObject, o incluso si los scripts se distribuyeran entre varios GameObjects. . ","date":"02-12-2024","objectID":"/posts/2024/dev/003/:0:1","tags":["n9+","dev"],"title":"Orden de ejecuci√≥n en Unity 6.0","uri":"/posts/2024/dev/003/"},{"categories":["dise√±o de videojuegos"],"content":" LAS LEYES DE UX Un verdadero experto en experiencia de usuario -UX- necesita a√±os de experiencia para conseguir buenos resultados en el conjunto de elementos relativos a la interacci√≥n del usuario. Pero‚Ä¶ ¬øpor d√≥nde empiezas si no dispones de esa experiencia previa? Ley de Pr√§gnanz Ley Hick Ley de Tesler Las personas interpretan las im√°genes complejas como la forma m√°s simple posible, porque es la interpretaci√≥n que menos esfuerzo cognitivo requiere. El tiempo que lleva tomar una decisi√≥n aumenta con el n√∫mero de alternativas y su complejidad. Tambi√©n conocida como Ley de Conservaci√≥n de la Complejidad, establece que para cualquier sistema existe una cierta cantidad de complejidad que no se puede reducir. Ley de proximidad Efecto Posici√≥n Serial Ley de Fitts Los objetos que est√°n cerca o pr√≥ximos entre s√≠ tienden a agruparse. Los usuarios tienen la tendencia de recordar mejor el primer y √∫ltimo elemento de una serie. El tiempo que se necesita para llegar a un objeto es proporcional a la distancia a la que se encuentra y su tama√±o. Ley de Parkinson Efecto Von Restorff Principio de Pareto Cualquier tarea se inflar√° hasta que se gaste todo el tiempo disponible. Tambi√©n conocido como Efecto de Aislamiento, predice que cuando hay varios objetos similares presentes, es m√°s probable que se recuerde el que difiere del resto. Establece que, aproximadamente el 80% de los efectos provienen del 20% de las causas. Efecto Zeigarnik Ley de Miller Ley de Jakob Las personas recuerdan las tareas incompletas o interrumpidas mejor que las tareas completadas. La persona promedio solo puede mantener alrededor de 7 elementos en su memoria de trabajo. Los usuarios prefieren aquellos sitios que funcionen igual que los que ya conocen. Usabilidad y movimiento Mejorar la experiencia de usuario es un trabajo que aplica al dise√±o, al contenido‚Ä¶ y tambi√©n al movimiento. Estos son principios con los que podr√°s aplicar la usabilidad al movimiento de tus animaciones. Principio n¬∫1: Easing Un elemento con un movimiento lineal no es lo que el usuario espera. Aplicamos este efecto a ciertos elementos en movimiento para que se convierta en un movimiento natural y de esta manera, se vuelva invisible. As√≠ conseguimos que no distraiga la atenci√≥n del usuario. . Principio n¬∫2: Offset \u0026 Delay Este principio de movimiento permite explicar al usuario que los elementos est√°n separados entre s√≠. Incluso antes de que el usuario pueda registrar los iconos, ya ha entendido que son elementos independientes entre s√≠ gracias al movimiento. . Principio n¬∫3: Parentesco Este principio permite vincular varios elementos creando relaciones y jerarqu√≠as en la interfaz. Modificando las propiedades de estos elementos: escala, opacidad, posici√≥n, rotaci√≥n, forma, color‚Ä¶ se generan estas relaciones que aportan significado en la experiencia del usuario. El resultado de este principio es que todo ocurre al mismo tiempo. A medida que el usuario interact√∫a directamente con los elementos entiende cu√°l es la relaci√≥n entre ellos. . Principio n¬∫4: Transformaci√≥n El usuario percibe la transformaci√≥n de un elemento visual que parte de una forma para convertirse en otra. Este cambio nos permite captar la atenci√≥n del usuario durante toda la transformaci√≥n y hasta el elemento final. La transformaci√≥n se divide en momentos clave que unidos son una serie continua e ininterrumpida de eventos. Esta continuidad es la que aporta al usuario un mejor seguimiento, retenci√≥n y conciencia. . Principio n¬∫5: Cambio de valor Los m√≥dulos que muestran un valor en progresi√≥n transmiten una evoluci√≥n de este valor hasta su estado actual. Mediante esta animaci√≥n, transmitimos al usuario que no es un valor fijo sino que ha evolucionado o ha cambiado en el tiempo. Una vez m√°s, a trav√©s del movimiento, aportamos informaci√≥n en el dise√±o transmitiendo al usuario la posibilidad de cambio o actualizaci√≥n de este dato. . Principio n¬∫6: Mascaras Aplicar el principio de mascara a un dise√±o permite generar continuidad en un elem","date":"01-12-2024","objectID":"/posts/2024/dise%C3%B1o/002/:0:0","tags":["n9+","ux","dise√±o"],"title":"Las leyes de UX","uri":"/posts/2024/dise%C3%B1o/002/"},{"categories":["unitips"],"content":" Consejo Cuando se carga una escena en Unity, estos son los m√©todos que se invocan de forma autom√°tica (por objeto) ¬°Evitar meter aqu√≠ c√≥digo muy costoso de ejecutar! Va a tardar mucho en cargar la escena, mejor ejecutar c√≥digo costoso despu√©s del primer frame üî• Inicializadores Elena Blanes\r. ","date":"30-11-2024","objectID":"/posts/2024/tips/001/:0:0","tags":["n9+","consejos"],"title":"UniTips [#1]","uri":"/posts/2024/tips/001/"},{"categories":["imagen del dia"],"content":" Reiniciado los bocetos nost√°lgicos Yasushi Hasegawa\r. ","date":"05-11-2024","objectID":"/posts/2024/imagen/002/:0:0","tags":["n9+","ilustracion"],"title":"Imagen del dia [05.11.2024]","uri":"/posts/2024/imagen/002/"},{"categories":["dise√±o de videojuegos"],"content":" . Principio n¬∫1: Estirar y encoger El primer principio es el de estirar y encoger (squasch y stretch). Sin duda, un cl√°sico dentro de la animaci√≥n, y que seguro que reconoces en cuanto te lo cuente. Imagina un cubo que rebota contra el suelo constantemente. Cuando el cubo toca el suelo se encoje (stretch) y al subir, cuando de nuevo coge velocidad, se desforma estir√°ndose (squasch). Este principio se puede emplear para cualquier objeto o personaje que queramos animar. Nota El principio de estirar y encoger agrega a una animaci√≥n la idea de peso y flexibilidad. Puede ser aplicado a objetos simples, como un c√≠rculo rebotando o algo m√°s complejo como tarjeta o una pantalla completa.‚Äã Lo m√°s importante de este principio es que el volumen del objeto no cambia cuando se estira o se encoge. . Principio n¬∫2: Anticipaci√≥n Este principio, como su nombre bien indica, anticipa que algo va a ocurrir en la escena, y el animador quiere que el espectador est√© atento a la pantalla. Puede ser cualquier tipo de movimiento del personaje o de cualquier objeto que estemos animando, pero la principal funci√≥n de este principio es atraer la atenci√≥n absoluta del espectador. Nota La anticipaci√≥n se usa para preparar al observador para una acci√≥n y que la animaci√≥n se sienta m√°s realista. Esta t√©cnica tambi√©n se utiliza en momentos en que va a ocurrir un evento importante para preparar al observador y que √©ste preste atenci√≥n a lo que est√° a punto de suceder. . Principio n¬∫3: Puesta en escena La puesta en escena o ¬´stating¬ª se basa en dar la atenci√≥n a lo que es importante dentro de la escena, para que el espectador sea consciente de lo verdaderamente relevante. Este principio puede llevarse a cabo de muchas maneras utilizando la perspectiva, la luz o la sombra, por ejemplo. Nota Lo importante es mantener la atenci√≥n del observador en lo que es relevante, evitando los detalles innecesarios. En dise√±o interactivo, la definici√≥n de affordances es parte de la puesta en escena. . Principio n¬∫4: Animaci√≥n directa y pose a pose Se suelen utilizar de manera conjunta para un mejor resultado de la animaci√≥n. La animaci√≥n directa (straight ahead) es la mejor para realizar animaciones realistas, ya que se llevan a cabo todos los dibujos para una transici√≥n mucho m√°s realista. En la animaci√≥n pose a pose solo se llevan a cabo los dibujos clave y posteriormente se van rellenando todos los dem√°s. Nota La animaci√≥n pose a pose implica empezar el proceso de animaci√≥n dibujando los cuadros clave y posteriormente llenando los espacios (algo que los dise√±adores familiarizados con Adobe Flash conocen como tweetning). ‚ÄãPor lo general, se usa una combinaci√≥n de ambas t√©cnicas para mejores resultados. . Principio n¬∫5: Acciones complementarias y superpuestas La acci√≥n complementaria (follow through) es el movimiento que sigue a una acci√≥n, es decir, es como un movimiento de amortiguaci√≥n del objeto. La acci√≥n superpuesta (overlapping) representa todos esos movimientos de las diferentes partes de un personaje o un objeto, es decir, cuando un personaje camina hacia delante, el pelo de ese personaje tambi√©n tiene que moverse, pero de manera diferente. Estas dos acciones se utilizan much√≠simo para dar m√°s realismo a la animaci√≥n. Nota Las acciones complementarias y las superpuestas son t√©cnicas de animaci√≥n que se relacionan estrechamente, ya que ambas ayudan a que el movimiento sea m√°s realista y d√© la ilusi√≥n de que un objeto se mueve respetando el principio f√≠sico de la inercia . Principio n¬∫6: Acelerar y desacelerar Uno de los principios m√°s sencillos y utilizados. Cuando se inicia un movimiento al principio ese objeto alcanza m√°s velocidad para simular que est√° acelerando (slow in). Cuando un objeto va a frenar, no puede hacerlo en seco, ya que no ser√≠a nada natural, por eso, se realiza un ¬´slow out¬ª, es decir, ese objeto va bajando su velocidad hasta quedar totalmente quieto. Nota En el mundo real ning√∫n objeto pasa del reposo absoluto al movimiento continuo en un paso: tod","date":"24-10-2024","objectID":"/posts/2024/dise%C3%B1o/001/:0:0","tags":["n9+","csharp","dise√±o"],"title":"Los 12 principios de la Animaci√≥n","uri":"/posts/2024/dise%C3%B1o/001/"},{"categories":["dev"],"content":" En este documento, exploraremos c√≥mo integrar varias t√©cnicas de b√∫squeda de caminos. Las t√©cnicas que abordaremos incluyen: B√∫squeda en amplitud (BFS) B√∫squeda en profundidad (DFS) B√∫squeda de menor costo (Dijkstra) B√∫squeda A* (A Star) ","date":"10-07-2024","objectID":"/posts/2024/dev/002/:0:0","tags":["n9+","dev"],"title":"Integraci√≥n de diferentes t√©cnicas de b√∫squeda de caminos","uri":"/posts/2024/dev/002/"},{"categories":["dev"],"content":"1. B√∫squeda en Amplitud (BFS) La b√∫squeda en amplitud explora todos los nodos a una distancia dada antes de avanzar a la siguiente. Es √∫til para encontrar el camino m√°s corto en un grafo no ponderado. #include \u003ciostream\u003e #include \u003cqueue\u003e #include \u003cvector\u003e #include \u003cunordered_set\u003e using namespace std; struct Node { int id; vector\u003cint\u003e neighbors; }; void bfs(vector\u003cNode\u003e\u0026 graph, int start) { queue\u003cint\u003e q; unordered_set\u003cint\u003e visited; q.push(start); visited.insert(start); while (!q.empty()) { int node = q.front(); q.pop(); cout \u003c\u003c \"Visitando nodo: \" \u003c\u003c node \u003c\u003c endl; for (int neighbor : graph[node].neighbors) { if (visited.find(neighbor) == visited.end()) { q.push(neighbor); visited.insert(neighbor); } } } } int main() { // Crear un grafo ejemplo vector\u003cNode\u003e graph(5); graph[0].neighbors = {1, 2}; graph[1].neighbors = {0, 3, 4}; graph[2].neighbors = {0}; graph[3].neighbors = {1}; graph[4].neighbors = {1}; bfs(graph, 0); return 0; } ","date":"10-07-2024","objectID":"/posts/2024/dev/002/:1:0","tags":["n9+","dev"],"title":"Integraci√≥n de diferentes t√©cnicas de b√∫squeda de caminos","uri":"/posts/2024/dev/002/"},{"categories":["dev"],"content":"2. B√∫squeda en Profundidad (DFS) La b√∫squeda en profundidad explora tan lejos como sea posible a lo largo de cada rama antes de retroceder. Es adecuada para encontrar componentes conexos y ciclos en un grafo. #include \u003ciostream\u003e #include \u003cvector\u003e #include \u003cunordered_set\u003e using namespace std; struct Node { int id; vector\u003cint\u003e neighbors; }; void dfs(vector\u003cNode\u003e\u0026 graph, int node, unordered_set\u003cint\u003e\u0026 visited) { if (visited.find(node) != visited.end()) return; cout \u003c\u003c \"Visitando nodo: \" \u003c\u003c node \u003c\u003c endl; visited.insert(node); for (int neighbor : graph[node].neighbors) { dfs(graph, neighbor, visited); } } int main() { // Crear un grafo ejemplo vector\u003cNode\u003e graph(5); graph[0].neighbors = {1, 2}; graph[1].neighbors = {0, 3, 4}; graph[2].neighbors = {0}; graph[3].neighbors = {1}; graph[4].neighbors = {1}; unordered_set\u003cint\u003e visited; dfs(graph, 0, visited); return 0; } ","date":"10-07-2024","objectID":"/posts/2024/dev/002/:2:0","tags":["n9+","dev"],"title":"Integraci√≥n de diferentes t√©cnicas de b√∫squeda de caminos","uri":"/posts/2024/dev/002/"},{"categories":["dev"],"content":"3. B√∫squeda de Menor Costo (Dijkstra) Dijkstra es un algoritmo eficiente para encontrar el camino m√°s corto desde un nodo de origen a todos los dem√°s nodos en un grafo ponderado. #include \u003ciostream\u003e #include \u003cvector\u003e #include \u003cqueue\u003e #include \u003ctuple\u003e #include \u003climits\u003e using namespace std; struct Edge { int target; int weight; }; using Graph = vector\u003cvector\u003cEdge\u003e\u003e; vector\u003cint\u003e dijkstra(const Graph\u0026 graph, int start) { int n = graph.size(); vector\u003cint\u003e dist(n, numeric_limits\u003cint\u003e::max()); priority_queue\u003cpair\u003cint, int\u003e, vector\u003cpair\u003cint, int\u003e\u003e, greater\u003c\u003e\u003e pq; dist[start] = 0; pq.push({0, start}); while (!pq.empty()) { int d, node; tie(d, node) = pq.top(); pq.pop(); if (d \u003e dist[node]) continue; for (const auto\u0026 edge : graph[node]) { int next_dist = d + edge.weight; if (next_dist \u003c dist[edge.target]) { dist[edge.target] = next_dist; pq.push({next_dist, edge.target}); } } } return dist; } int main() { Graph graph(5); graph[0].push_back({1, 1}); graph[0].push_back({2, 4}); graph[1].push_back({2, 2}); graph[1].push_back({3, 5}); graph[2].push_back({3, 1}); graph[3].push_back({4, 3}); vector\u003cint\u003e distances = dijkstra(graph, 0); for (int i = 0; i \u003c distances.size(); ++i) { cout \u003c\u003c \"Distancia desde el nodo 0 al nodo \" \u003c\u003c i \u003c\u003c \" es \" \u003c\u003c distances[i] \u003c\u003c endl; } return 0; } ","date":"10-07-2024","objectID":"/posts/2024/dev/002/:3:0","tags":["n9+","dev"],"title":"Integraci√≥n de diferentes t√©cnicas de b√∫squeda de caminos","uri":"/posts/2024/dev/002/"},{"categories":["dev"],"content":"4. B√∫squeda A* (A Star) A* combina la b√∫squeda en amplitud y la heur√≠stica para encontrar el camino m√°s corto de manera eficiente. #include \u003ciostream\u003e #include \u003cvector\u003e #include \u003cqueue\u003e #include \u003ctuple\u003e #include \u003ccmath\u003e #include \u003cunordered_map\u003e using namespace std; struct Edge { int target; int weight; }; using Graph = vector\u003cvector\u003cEdge\u003e\u003e; struct Node { int id; int g_cost; // Costo desde el nodo de inicio int h_cost; // Costo heur√≠stico al nodo final int f_cost() const { return g_cost + h_cost; } bool operator\u003e(const Node\u0026 other) const { return f_cost() \u003e other.f_cost(); } }; vector\u003cint\u003e a_star(const Graph\u0026 graph, int start, int goal, const vector\u003cint\u003e\u0026 heuristic) { int n = graph.size(); priority_queue\u003cNode, vector\u003cNode\u003e, greater\u003c\u003e\u003e pq; unordered_map\u003cint, int\u003e came_from; vector\u003cint\u003e g_cost(n, numeric_limits\u003cint\u003e::max()); pq.push({start, 0, heuristic[start]}); g_cost[start] = 0; while (!pq.empty()) { int current = pq.top().id; pq.pop(); if (current == goal) break; for (const auto\u0026 edge : graph[current]) { int next = edge.target; int new_g_cost = g_cost[current] + edge.weight; if (new_g_cost \u003c g_cost[next]) { g_cost[next] = new_g_cost; pq.push({next, new_g_cost, new_g_cost + heuristic[next]}); came_from[next] = current; } } } vector\u003cint\u003e path; for (int at = goal; at != start; at = came_from[at]) { path.push_back(at); } path.push_back(start); reverse(path.begin(), path.end()); return path; } int main() { Graph graph(5); graph[0].push_back({1, 1}); graph[0].push_back({2, 4}); graph[1].push_back({2, 2}); graph[1].push_back({3, 5}); graph[2].push_back({3, 1}); graph[3].push_back({4, 3}); vector\u003cint\u003e heuristic = {7, 6, 2, 1, 0}; // Heur√≠sticas estimadas hacia el nodo objetivo vector\u003cint\u003e path = a_star(graph, 0, 4, heuristic); cout \u003c\u003c \"Camino encontrado por A*: \"; for (int node : path) { cout \u003c\u003c node \u003c\u003c \" \"; } cout \u003c\u003c endl; return 0; } Conclusi√≥n Hemos cubierto las t√©cnicas b√°sicas de b√∫squeda de caminos en grafos: BFS, DFS, Dijkstra y A*. Cada t√©cnica tiene sus propias ventajas y casos de uso espec√≠ficos. La implementaci√≥n en C++ muestra c√≥mo se pueden integrar estas t√©cnicas para resolver problemas de b√∫squeda de caminos de manera eficiente. Espero que este documento te sea √∫til para entender y aplicar estas t√©cnicas en tus proyectos. . ","date":"10-07-2024","objectID":"/posts/2024/dev/002/:4:0","tags":["n9+","dev"],"title":"Integraci√≥n de diferentes t√©cnicas de b√∫squeda de caminos","uri":"/posts/2024/dev/002/"},{"categories":["imagen del dia"],"content":" ¬°Feliz 27 aniversario, FFT! ! ! ! ! „Éä„É≥„Éù„Ç¶\r. ","date":"07-07-2024","objectID":"/posts/2024/imagen/001/:0:0","tags":["n9+","ilustracion"],"title":"Imagen del dia [07.07.2024]","uri":"/posts/2024/imagen/001/"},{"categories":["dev"],"content":"¬øQu√© son las Corrutinas? Las corrutinas en Unity son una forma de gestionar la ejecuci√≥n de c√≥digo de manera as√≠ncrona, permitiendo pausas en su ejecuci√≥n y reanudaciones posteriores. Son especialmente √∫tiles para realizar tareas que requieren esperar un cierto tiempo o eventos, sin bloquear el hilo principal del juego. ","date":"07-07-2024","objectID":"/posts/2024/dev/001/:1:0","tags":["n9+","dev"],"title":"Corrutinas y Async en Unity","uri":"/posts/2024/dev/001/"},{"categories":["dev"],"content":"Caracter√≠sticas de las Corrutinas Facilidad de uso: Se declaran con el tipo IEnumerator y se controlan usando yield return. Control del tiempo: Permiten pausar la ejecuci√≥n por un tiempo espec√≠fico utilizando yield return new WaitForSeconds(tiempo). Simplicidad para tareas secuenciales: Son ideales para secuencias de acciones que necesitan ejecutarse con pausas. ","date":"07-07-2024","objectID":"/posts/2024/dev/001/:1:1","tags":["n9+","dev"],"title":"Corrutinas y Async en Unity","uri":"/posts/2024/dev/001/"},{"categories":["dev"],"content":"Ejemplo de Corrutina using UnityEngine; using System.Collections; public class Example : MonoBehaviour { void Start() { StartCoroutine(MyCoroutine()); } IEnumerator MyCoroutine() { Debug.Log(\"Inicio de la corrutina\"); yield return new WaitForSeconds(2); Debug.Log(\"Han pasado 2 segundos\"); yield return new WaitForSeconds(3); Debug.Log(\"Han pasado 3 segundos m√°s\"); } } ","date":"07-07-2024","objectID":"/posts/2024/dev/001/:1:2","tags":["n9+","dev"],"title":"Corrutinas y Async en Unity","uri":"/posts/2024/dev/001/"},{"categories":["dev"],"content":"¬øQu√© es Async/Await? La programaci√≥n as√≠ncrona con async y await es una caracter√≠stica m√°s reciente en Unity (compatible desde Unity 2017.1 con C# 7.0 y superior). Permite escribir c√≥digo as√≠ncrono de manera m√°s intuitiva y estructurada, similar a las corrutinas, pero con ventajas adicionales en t√©rminos de legibilidad y manejo de excepciones. ","date":"07-07-2024","objectID":"/posts/2024/dev/001/:2:0","tags":["n9+","dev"],"title":"Corrutinas y Async en Unity","uri":"/posts/2024/dev/001/"},{"categories":["dev"],"content":"Caracter√≠sticas de Async/Await Sintaxis moderna: Se utilizan palabras clave async y await para definir y gestionar m√©todos as√≠ncronos. Mejor manejo de excepciones: Las excepciones en m√©todos async pueden ser manejadas de manera similar a los m√©todos sincr√≥nicos. Mayor flexibilidad: Se integran mejor con APIs asincr√≥nicas modernas y permiten el uso de Task para gestionar tareas concurrentes. ","date":"07-07-2024","objectID":"/posts/2024/dev/001/:2:1","tags":["n9+","dev"],"title":"Corrutinas y Async en Unity","uri":"/posts/2024/dev/001/"},{"categories":["dev"],"content":"Ejemplo de Async/Await using UnityEngine; using System.Threading.Tasks; public class Example : MonoBehaviour { async void Start() { await MyAsyncMethod(); } async Task MyAsyncMethod() { Debug.Log(\"Inicio del m√©todo async\"); await Task.Delay(2000); // Espera 2 segundos Debug.Log(\"Han pasado 2 segundos\"); await Task.Delay(3000); // Espera 3 segundos m√°s Debug.Log(\"Han pasado 3 segundos m√°s\"); } } ","date":"07-07-2024","objectID":"/posts/2024/dev/001/:2:2","tags":["n9+","dev"],"title":"Corrutinas y Async en Unity","uri":"/posts/2024/dev/001/"},{"categories":["dev"],"content":"Diferencias Clave entre Corrutinas y Async/Await ","date":"07-07-2024","objectID":"/posts/2024/dev/001/:3:0","tags":["n9+","dev"],"title":"Corrutinas y Async en Unity","uri":"/posts/2024/dev/001/"},{"categories":["dev"],"content":"Sintaxis y Estilo de Programaci√≥n: Corrutinas: Usan IEnumerator y yield return. Async/Await: Usan palabras clave async y await con Task. ","date":"07-07-2024","objectID":"/posts/2024/dev/001/:3:1","tags":["n9+","dev"],"title":"Corrutinas y Async en Unity","uri":"/posts/2024/dev/001/"},{"categories":["dev"],"content":"Manejo de Excepciones: Corrutinas: M√°s dif√≠cil de manejar excepciones directamente dentro de la corrutina. Async/Await: Mejor soporte para manejo de excepciones utilizando try-catch. ","date":"07-07-2024","objectID":"/posts/2024/dev/001/:3:2","tags":["n9+","dev"],"title":"Corrutinas y Async en Unity","uri":"/posts/2024/dev/001/"},{"categories":["dev"],"content":"Integraci√≥n con APIs Modernas: Corrutinas: Limitadas a lo que Unity ofrece y menos flexibles para integrar con APIs asincr√≥nicas externas. Async/Await: M√°s adecuadas para trabajar con APIs modernas que devuelven Task. ","date":"07-07-2024","objectID":"/posts/2024/dev/001/:3:3","tags":["n9+","dev"],"title":"Corrutinas y Async en Unity","uri":"/posts/2024/dev/001/"},{"categories":["dev"],"content":"Legibilidad y Mantenimiento del C√≥digo: Corrutinas: Pueden ser menos intuitivas para secuencias complejas de operaciones as√≠ncronas. Async/Await: Facilita la escritura de c√≥digo m√°s limpio y estructurado. Conclusi√≥n Ambas t√©cnicas tienen sus usos y ventajas en Unity, y la elecci√≥n entre corrutinas y async/await depender√° del caso espec√≠fico y las necesidades del proyecto. . ","date":"07-07-2024","objectID":"/posts/2024/dev/001/:3:4","tags":["n9+","dev"],"title":"Corrutinas y Async en Unity","uri":"/posts/2024/dev/001/"},{"categories":["comun"],"content":" Despu√©s de tanto tiempo (como 3 a√±os) por fin he tenido algo de tiempo para cambiar mi perfil. Teniendo la estructura clara y sabiendo que quer√≠a cambiar de tecnolog√≠a. De vez en cuando es bueno salir del confort y probar cosicas nuevas. Esto me lleva a ver que puedo usar para empezar a crear una web de perfil sencilla pero que pueda hacerla vistosa a simple vista y que pueda durar tiempo, ya que la ultima tarde 3 a√±os en desecharla üòÑ Con la llegada de ¬†Next.js 13 y teniendo la limitaci√≥n de tener que ser una web est√°tica e decidido hacerla con Next.js en un formato de salida sin servidor y con el aliciente de agregar ¬†Tailwind y ¬†Framer Motion como reto. El perfil anterior tenia algunas cosas que no me gustaban, en concreto el idioma (totalmente en ingles), y al tiempo vi que era mejor separar los proyectos oficiales de las especialidades, en este quiero tener una secci√≥n de proyectos (open source) y videojuegos y por otro lado una **secci√≥n de especialidades. Tambi√©n un vinculo directo a mi blog pero que salga alguna publicaci√≥n que m√°s destaque en el inicio del perfil y por ultimo un enlace a ¬†Nerve Link. Cambios de funcionalidades nuevas. Antiguo ‚Äì Nuevo Index solo foto Index con foto, trabajos y algunos articulos Menu desplegable Menu con todas las opciones visibles Interpolaci√≥n de fondos Fondo estable Proyectos, juegos y especialidades Division de todos los campos den paginas Sin estado Con estado Complejo, secciones dentro de secciones Simple, todo sin casi scroll Ahora sabiendo lo nuevo y lo viejo, me pongo a ello. ","date":"29-03-2023","objectID":"/posts/2023/comun/001/:0:0","tags":["n9+","comun"],"title":"¬° Nuevo Perfil !","uri":"/posts/2023/comun/001/"},{"categories":["comun"],"content":"Index Secci√≥n inicial en la que aparece una peque√±a introduccion, el estado de convocatoria, unos pocos articulos y los trabajos realizados. Secci√≥n con algo m√°s de informaci√≥n que en el index, junto con los vinculos sociales para la comunicaci√≥n. Secci√≥n de proyectos personales leidos en github (Pinned) y de codigo abierto. Secci√≥n de videojuegos creados y publicados. Secci√≥n de especialidades en un grid con vinculo al proyecto en cuesti√≥n. Secci√≥n de especialidades en una lista con informaci√≥n del proyecto. Una peque√±a utilidad que no lo habia pensado hace a√±os pero que es importantisimo en cualquier web, un sistema oscuro/claro. . ","date":"29-03-2023","objectID":"/posts/2023/comun/001/:1:0","tags":["n9+","comun"],"title":"¬° Nuevo Perfil !","uri":"/posts/2023/comun/001/"},{"categories":["imagen del dia"],"content":" Yitan \u0026 Garnet despu√©s de terminar su aventura juntos „Éä„É≥„Éù„Ç¶\r. ","date":"22-01-2023","objectID":"/posts/2023/imagen/001/:0:0","tags":["n9+","ilustracion"],"title":"Imagen del dia [22.01.2023]","uri":"/posts/2023/imagen/001/"},{"categories":["imagen del dia"],"content":" Comprobando compulsivamente si mi cartera todav√≠a est√° Khyle\r. ","date":"10-08-2022","objectID":"/posts/2022/imagen/001/:0:0","tags":["n9+","ilustracion"],"title":"Imagen del dia [10.08.2022]","uri":"/posts/2022/imagen/001/"},{"categories":["comun"],"content":"Hola, actualmente el blog esta un poco parado. No por no tener art√≠culos que publicar, sino por la pereza de lo que tarda en generarse todo. Cuando inicie el blog, eleg√≠ ¬†Hugo como framework para crear sitios webs est√°ticos lo mas r√°pido posible y realmente era bestialmente r√°pido. El problema viene despu√©s de tantos a√±os ‚Ä¶ es desesperadamente lento, en eso del 2017 se generaba en 20s - 30s, a dia de hoy es normal que tarde 2 o 3 minutos tranquilamente. Crear el articulo(‚àûs) + generar el sitio(3m) + subir los cambios(30s) + desplegar pagina(8m) = mucho Buscando informaci√≥n e encontrado varias maneras de solventar este problema. El primero es actualizar el framework hasta la ultima versi√≥n, ya que han agregado nuevas funciones que mejoran la generaci√≥n del blog en proyectos con una gran cantidad de art√≠culos, el problema que esto trae es que despu√©s de la v0.5+ cambia la arquitectura de ¬†Hugo, haciendo que el tema y todos los art√≠culos dejen de funcionar. Esto me va a mantener ocupado un tiempo, actualizando todo para que el blog se genere mas r√°pido y por otra parte que ¬†github despliegue la pagina en menos tiempo (8m actualmente). Por eso pasaran un par de cosas que enumero a continuaci√≥n: El blog quedara sin ninguna nueva informaci√≥n durante un tiempo, no creo que mucho, ya que realizare una actualizaci√≥n en modo de desarrollo para que no afecte al trabajo actual y posteriormente actualizar el blog de una. La secci√≥n devblog quedara bloqueada, no por titulo sino por contenido. Esta secci√≥n se genera con una funcionalidad de ¬†Hugo que ya no existen con la ultima version. Por lo tanto tengo que investigar como solucionar esto en las nuevas versiones. Por ultimo he notado que al tener tantas im√°genes que cargar, la velocidad de carga de las paginas a disminuido. Esto no es problema de ¬†Hugo, es problema mio por no pensar en la escalabilidad del blog a futuro y gestionar el tama√±o y la optimizaci√≥n de las im√°genes por lo tanto cambiare este tema. Tambi√©n me ocupare de actualizar algunos art√≠culos que ya no son viables ya sea porque la API esta obsoleta y no se puede volver a generar esa soluci√≥n o por los motivos que sea. . ","date":"16-07-2022","objectID":"/posts/2022/comun/001/:0:0","tags":["n9+","comun"],"title":"Actualizaci√≥n del blog - Temporal","uri":"/posts/2022/comun/001/"},{"categories":["comun"],"content":"El ¬†marketplace de Visual Studio Code realmente no es pr√°ctico para encontrar lo que necesitamos, en conceptos de diferentes temas que la comunidad nos brinda. ¬°Visita el sitio web VSCodeThemes, que hace que sea mucho m√°s f√°cil elegir un tema para Visual Studio Code! Asumiendo que el ¬†mercado de Visual Studio Code no es la mejor manera de encontrar temas (mientras que para las extensiones, est√° bien) porque es necesario rezar para que el creador del tema haya capturado la pantalla en el archivo README de su proyecto para echar un vistazo, ‚ÄâJordan Schroter ha ¬†desarrollado un sitio web llamado ¬†VSCodeThemes , congrega temas de ¬†VSCode muy agradables y mucho m√°s pr√°cticos. . ¬°Cada tema se muestra din√°micamente, no son im√°genes! Para esto, el desarrollador conf√≠a en la biblioteca ¬†vscode-textmate utilizada por Microsoft. Este √∫ltimo se utiliza para mostrar un fragmento de c√≥digo con la configuraci√≥n de dise√±o de un tema. El resultado en VSCodeThemes es la copia perfecta de lo que se encontrar√° en VS Code una vez que el tema est√© instalado. En la barra de men√∫, hay tres botones que le permiten ir a la p√°gina de temas de tendencia, aquellos orientados a temas oscuros y, por el contrario, claros. Un motor de b√∫squeda tambi√©n est√° involucrado. En cada tema, hay tres pesta√±as: javascript, css, html. Proporcionan una descripci√≥n m√°s concreta del resaltado de sintaxis en estos tres idiomas. Se muestra una peque√±a p√°gina de detalles al hacer clic en un tema. La descripci√≥n general del tema, su nombre, creador y descripci√≥n est√°n presentes. Un bot√≥n le permite agregar el tema directamente en Visual Studio Code. . En mi setup, he integrado ¬†SynthWave ‚Äò84 desarrollado por ‚ÄâRobb Owen , uno de los mejores temas que he visto este a√±o. . . . ","date":"27-11-2019","objectID":"/posts/2019/comun/008/:0:0","tags":["n9+","comun"],"title":"VSCodeThemes, directorio de temas para Visual Studio Code","uri":"/posts/2019/comun/008/"},{"categories":["comun"],"content":"Trello como una herramienta de apoyo para el desarrollo √°gil. Espec√≠ficamente, vamos a aplicar varios de los conceptos de Scrum, aunque no seguiremos todo lo descrito por esta metodolog√≠a al pie de la letra. ","date":"30-10-2019","objectID":"/posts/2019/comun/006/:0:0","tags":["n9+","comun"],"title":"C√≥mo usar Trello para el desarrollo √°gil","uri":"/posts/2019/comun/006/"},{"categories":["comun"],"content":"Lo b√°sico En Trello existen 3 componentes b√°sicos: Tableros Listas Tarjetas Un tablero de Trello se corresponde con un proyecto. Dentro de cada tablero podemos crear tantas listas como sea necesario. Por √∫ltimo, cada lista contendr√° una serie de tarjetas. Las listas se muestran de izquierda a derecha, de forma que las listas consultadas con m√°s frecuencia se deber√≠an mostrar primero, y las menos consultadas deber√≠an ir m√°s a la derecha. . ","date":"30-10-2019","objectID":"/posts/2019/comun/006/:1:0","tags":["n9+","comun"],"title":"C√≥mo usar Trello para el desarrollo √°gil","uri":"/posts/2019/comun/006/"},{"categories":["comun"],"content":"Estructura b√°sica Creare un tablero imaginario de gu√≠a, que contiene las listas principales a considerar. Y a continuaci√≥n, una descripci√≥n de cada una. Product backlog. Esta lista debe contener todas las historias de usuario que se van a implementar a lo largo de todo el proyecto. Sprint backlog N. Al iniciar un sprint, se debe crear una lista correspondiente. Por ejemplo, al iniciar el primer sprint tenemos una lista llamada Sprint backlog 1. General. Esta lista contendr√° tarjetas ‚Äúespeciales‚Äù que ser√°n descritas luego con mayor detalle. Cada tarjeta contendr√° informaci√≥n importante sobre el proyecto en general. ","date":"30-10-2019","objectID":"/posts/2019/comun/006/:2:0","tags":["n9+","comun"],"title":"C√≥mo usar Trello para el desarrollo √°gil","uri":"/posts/2019/comun/006/"},{"categories":["comun"],"content":"Antes Antes de iniciar un sprint se lleva a cabo una reuni√≥n de planificaci√≥n, conocida como sprint planning meeting. Esta reuni√≥n consiste en identificar qu√© actividades se van a desarrollar. Esto significa que las primeras tarjetas del product backlog pasar√°n a formar parte de un sprint backlog. En este punto es importante delimitar correctamente cada actividad. Generalmente, el product backlog est√° compuesto de historias de usuario que son gen√©ricas. Es importante dividir estas historias de usuario en actividades m√°s espec√≠ficas y asignar un responsable para cada tarjeta. Al final de esta reuni√≥n lo correcto es que: El sprint backlog se encuentre correctamente definido. Se haya redactado el objetivo general del sprint (sprint goal). ","date":"30-10-2019","objectID":"/posts/2019/comun/006/:3:0","tags":["n9+","comun"],"title":"C√≥mo usar Trello para el desarrollo √°gil","uri":"/posts/2019/comun/006/"},{"categories":["comun"],"content":"Durante Cuando el sprint ha iniciado, el equipo de desarrollo se debe centrar en cumplir con sus compromisos (las tarjetas que seleccionaron durante la planificaci√≥n). No se deben a√±adir nuevos requerimientos al sprint backlog. Si el cliente solicita nuevas caracter√≠sticas, estas se a√±aden al product backlog, a fin de ser resueltas en sprints posteriores. Durante el desarrollo del sprint, las listas con mayor actividad son: Sprint backlog. Esta lista representa las actividades pendientes por realizar. In progress. Actividades en desarrollo, caracter√≠sticas que se est√°n implementando. Done. Actividades finalizadas en el sprint actual. Es importante realizar una reuni√≥n al inicio de cada d√≠a, a fin de evaluar el progreso del sprint y aplicar acciones correctivas en caso de ser necesario. Esto se conoce como daily scrum meeting. ","date":"30-10-2019","objectID":"/posts/2019/comun/006/:4:0","tags":["n9+","comun"],"title":"C√≥mo usar Trello para el desarrollo √°gil","uri":"/posts/2019/comun/006/"},{"categories":["comun"],"content":"Despu√©s Lo ideal es que se haya finalizado con todo lo propuesto. En ese caso, la lista Sprint backlog 1 no tendr√° m√°s tarjetas, pues todas estar√°n ubicadas en la lista Done. Y lo siguiente ser√°: Renombrar la lista Done por Sprint release 1. Crear una nueva lista Done para el sprint que est√° por iniciar. Ubicar la lista Sprint release 1 al final. Renombrar Sprint backlog i por Sprint backlog i+1 (el sprint que est√© por iniciar). Realizar una reuni√≥n de revisi√≥n y una reuni√≥n de retrospectiva. Generar un nuevo burndown chart. . ","date":"30-10-2019","objectID":"/posts/2019/comun/006/:5:0","tags":["n9+","comun"],"title":"C√≥mo usar Trello para el desarrollo √°gil","uri":"/posts/2019/comun/006/"},{"categories":["comun"],"content":"Proyectos m√°s grandes Esta idea funciona bien para proyectos peque√±os y medianos, donde el equipo de desarrollo es relativamente peque√±o, tal vez hasta 7 integrantes. Para proyectos donde interviene una cantidad mayor de personas, lo adecuado es usar varios tablones de Trello para el mismo proyecto (un tablero de planificaci√≥n, un tablero por cada sprint, y un tablero de retrospectiva). ","date":"30-10-2019","objectID":"/posts/2019/comun/006/:6:0","tags":["n9+","comun"],"title":"C√≥mo usar Trello para el desarrollo √°gil","uri":"/posts/2019/comun/006/"},{"categories":["comun"],"content":"Conclusi√≥n Aunque este es un concepto scrum, lo bueno de esto es la posibilidad de modificar tu metodolog√≠a en base a tus necesidades. Yo mismo no uso este tipo exacto de metodolog√≠a. Dise√±a tu propio plan en base a las necesidades de tu proyecto. . ","date":"30-10-2019","objectID":"/posts/2019/comun/006/:7:0","tags":["n9+","comun"],"title":"C√≥mo usar Trello para el desarrollo √°gil","uri":"/posts/2019/comun/006/"},{"categories":["dev"],"content":"Al crear ventanas del editor de Unity con barras de herramientas, es posible que haya visto un par de formas diferentes de trabajar con los estilos de la barra de herramientas. Muchos de los ejemplos online o en paquetes de tiendas de activos crean estilos en c√≥digo que ciertamente funcionan. Sin embargo, no he visto muchos ejemplos usando GUISkin para crear una GUI en el editor, as√≠ que pens√© en compartir lo que aprend√≠ experimentando con este m√©todo. Para demostrar lo que puede hacer con solo unas pocas l√≠neas de c√≥digo, he creado una ventana de editor de muestra con una barra de pesta√±as de ‚Äòdise√±o plano‚Äô inspirada en el Material Design de Google, como se muestra a continuaci√≥n: . Si observa detenidamente, notar√° que el color de la fuente de cada pesta√±a se aclara a medida que avanza de izquierda a derecha. Esto no forma parte de Material Design, pero se hizo para demostrar c√≥mo puede controlar el estilo de cada bot√≥n de pesta√±a individualmente. Creando GUISkin El primer paso para crear este estilo de barra de pesta√±as es crear una GUISkin. Este es un tipo de recurso incorporado en Unity. Para crear uno, haga clic en el men√∫ Crear en la ventana Proyecto y seleccione GUISkin. . As√≠gnele un nombre, elijo ‚ÄòCustomSkin‚Äô en este ejemplo al cual el c√≥digo har√° referencia m√°s adelante. Haga clic en CustomSkin para ver su inspector. . Definir un estilo GUI de la barra de herramientas A continuaci√≥n definiremos los estilos personalizados para los botones de la barra de herramientas. En la ventana del Inspector, vaya al elemento ‚ÄòCustomSkin‚Äô y exp√°ndalo. Cambie el valor de ‚ÄòTama√±o‚Äô a 4. Ingrese los siguientes nombres para cada uno de los nuevos estilos: . TabLeft TabMid TabRight Tab El estilo ‚ÄòTab‚Äô solo podr√≠a usarse como su estilo para todos los botones de la barra de herramientas. Sin embargo, en nuestro ejemplo queremos controlar cada una de las 3 pesta√±as de manera individual, por lo que creamos estilos con el mismo nombre que termina con Left, Mid y Right. As√≠ es como podemos controlar el color del texto de cada pesta√±a para obtener ese efecto donde las pesta√±as se desvanecen hacia el fondo de izquierda a derecha. Luego cre√© dos im√°genes simples para los fondos de pesta√±as, un estado normal y seleccionado como se muestra aqu√≠: . . Para cada estilo, vamos a configurar los estados Normal y Encendido Normal (seleccionado). As√≠ es como configuro TabLeft. Utilic√© la misma configuraci√≥n para TabMid y TabRight, con la excepci√≥n del Color de texto normal, que hice un poco m√°s claro para el TabMid y a√∫n m√°s claro para el TabRight. . Implementando ventana de editor Por √∫ltimo, escribiremos el script detr√°s de EditorWindow para vincularlo todo. using UnityEngine; using UnityEditor; public class GUISkinWindow : EditorWindow { private static GUISkinWindow _windowInstance; private GUISkin skin; private GUIStyle tabStyle; private int selectedTab = 0; private void OnEnable() { skin = (GUISkin) Resources.Load(\"CustomSkin\"); tabStyle = skin.GetStyle(\"Tab\"); } public static void ShowWindow() { _windowInstance = (GUISkinWindow)EditorWindow.GetWindow( typeof(GUISkinWindow)); _windowInstance.titleContent = new GUIContent(\"Custom Tabs\"); } private void OnGUI() { GUI.skin = skin; string[] tabs = {\"TAB ONE\", \"TAB TWO\", \"TAB THREE\"}; selectedTab = GUILayout.Toolbar(selectedTab, tabs, tabStyle); } } En OnEnable() cargamos el CustomSkin que creamos anteriormente y obtenemos una referencia al estilo de ‚ÄúTab‚Äù. Notar√°s que no hice nada con el estilo ‚ÄúTab‚Äù antes. Sin embargo, en OnGUI() pasamos este estilo al m√©todo GUILayout.Toolbar() para crear nuestra barra de herramientas. La forma en que funciona es si define los estilos como tenemos con el mismo nombre que termina con ‚ÄúLeft‚Äù, ‚ÄúMid‚Äù, ‚ÄúRight‚Äù, en su lugar usar√° esos estilos. Es por eso que cre√© el estilo de ‚ÄúTab‚Äù adem√°s de los que configuramos. Este comportamiento no es el m√°s obvio, pero es f√°cil de usar una vez que est√© familiarizado con su funcionamiento. El resto del c√≥digo solo trata de mostrar la vent","date":"03-05-2019","objectID":"/posts/2019/dev/004/:0:0","tags":["n9+","dev"],"title":"Uso de GUISkin para el estilo del editor","uri":"/posts/2019/dev/004/"},{"categories":["dev"],"content":"Quiero analizar las diferentes etapas que componen la realizaci√≥n de un videojuego profesional. Si est√°s metido en el mundo del software entonces este proceso te resultar√° familiar debido a que es muy similar, exceptuando que los videojuegos requieren de grandes aportes creativos. ","date":"25-02-2019","objectID":"/posts/2019/dev/003/:0:0","tags":["n9+","dev"],"title":"Fases Importantes del desarrollo de un juego","uri":"/posts/2019/dev/003/"},{"categories":["dev"],"content":"Fase de Concepci√≥n Todo comienza con una idea a partir de la cual se conformar√°n los aspectos fundamentales. Se determina el g√©nero o g√©neros del videojuego, c√≥mo ser√° el proceso de juego (gameplay), y tambi√©n se constituye un guion gr√°fico (storyboard) en el que se tratan todo tipo de ideas preconcebidas que pueden ir adapt√°ndose, como por ejemplo el estilo de los personajes, el ambiente, la m√∫sica, etc. Una vez se sabe qu√© hacer entonces es el momento de dise√±ar. Vi√±eta de un Storyboard de los primeros Super Mario ","date":"25-02-2019","objectID":"/posts/2019/dev/003/:1:0","tags":["n9+","dev"],"title":"Fases Importantes del desarrollo de un juego","uri":"/posts/2019/dev/003/"},{"categories":["dev"],"content":"Fase de Dise√±o Se empieza definiendo los elementos que componen el juego. Se desarrolla la historia, se crean bocetos de guiones para determinar los objetivos, se deciden los personajes principales, el contexto, etc. Utilizando estos esbozos de guiones los artistas se ponen manos a la obra para crear conceptos del aspecto del juego, la forma en que se visualizar√°n los personajes, los escenarios, objetos, etc. Su trabajo es presentar propuestas visuales para ir dando forma a la idea original. Tambi√©n se describen los elementos sonoros de los que consta el juego: efectos de sonidos, ambientaci√≥n, m√∫sica, voces, etc. Aunque todav√≠a no se compone ni se graba nada. Paralelamente se especifica el funcionamiento general del videojuego, algo que depende del g√©nero, ya que se√±alan la forma en que las entidades virtuales interact√∫an dentro del juego. Finalmente, con una idea algo m√°s clara del rumbo que tomar√° el juego, se hace el dise√±o de la programaci√≥n, que describe la manera en la que se implementar√° el videojuego, el lenguaje o lenguajes de programaci√≥n que se utilizar√°n, las metodolog√≠as que se seguir√°n, etc. Todo lo anterior tendr√° como objetivo generar el Documento de Dise√±o que especificar√° el desarrollo del arte, las mec√°nicas y la programaci√≥n del videojuego. Dise√±o original de un escenario de Super Mario ","date":"25-02-2019","objectID":"/posts/2019/dev/003/:2:0","tags":["n9+","dev"],"title":"Fases Importantes del desarrollo de un juego","uri":"/posts/2019/dev/003/"},{"categories":["dev"],"content":"Fase de Planificaci√≥n Esta etapa tiene como objetivo identificar las diferentes tareas para desarrollar el videojuego. Se reparte el trabajo entre los distintos componentes del equipo de desarrollo, se fijan plazos de entregas, se planifican reuniones de seguimiento, etc. Ejemplo de diagrama de Gantt para planificar un proyecto ","date":"25-02-2019","objectID":"/posts/2019/dev/003/:3:0","tags":["n9+","dev"],"title":"Fases Importantes del desarrollo de un juego","uri":"/posts/2019/dev/003/"},{"categories":["dev"],"content":"Fase de Producci√≥n Una vez se tiene claro lo que hay que hacer, c√≥mo hacerlo, y se ha planificado el tiempo para llevarlo a cabo, entonces se empieza la producci√≥n con el objetivo de crear el juego, como m√≠nimo en una versi√≥n inicial o prototipo a mejorar gradualmente. Se llevan por tanto a cabo todas las tareas de la fase de planificaci√≥n teniendo como gu√≠a el documento de dise√±o: programaci√≥n, ilustraci√≥n, desarrollo de interfaces, animaci√≥n, modelado, desarrollo del sonidos, etc. Si finalmente se logra ensamblar correctamente todas las piezas entonces esta fase culmina (por ahora). Sin embargo, al igual que en el desarrollo de software tradicional, es muy dif√≠cil que todo salga bien a la primera, por lo que se entra en una fase para probar a fondo el videojuego. Oficinas de Ubisoft en Toronto (Canad√°) ","date":"25-02-2019","objectID":"/posts/2019/dev/003/:4:0","tags":["n9+","dev"],"title":"Fases Importantes del desarrollo de un juego","uri":"/posts/2019/dev/003/"},{"categories":["dev"],"content":"Fase de Pruebas En esta etapa se corrigen los errores del proceso de programaci√≥n y se mejora la jugabilidad a medida que se prueba el juego. Generalmente encontraremos dos tipos: las pruebas alpha, realizadas por un peque√±o grupo de personas generalmente involucradas en el desarrollo, y las pruebas beta, realizadas por un equipo externo de jugadores. Las primeras tienen el objetivo de corregir defectos graves y mejorar caracter√≠sticas fundamentales no contempladas en el documento de dise√±o, mientras que las segundas se enfocan en detectar fallos menores y perfilar la experiencia de usuario. Comparaci√≥n entre la Alpha y la Beta de Battlefield 3 ","date":"25-02-2019","objectID":"/posts/2019/dev/003/:5:0","tags":["n9+","dev"],"title":"Fases Importantes del desarrollo de un juego","uri":"/posts/2019/dev/003/"},{"categories":["dev"],"content":"Fase de Distribuci√≥n/M√°rketing En cuanto a la distribuci√≥n es el proceso de crear las copias del juego ya finalizado y llevarlo a las tiendas (ya sean f√≠sicas o digitales) para que los jugadores puedan comprarlo o hacerse con √©l. Por otro lado el m√°rketing es tambi√©n fundamental para dar a conocer el videojuego y conseguir el mayor n√∫mero de jugadores posibles. No tiene un orden concreto dentro del desarrollo, pues algunas empresas empiezan a hacer campa√±a de sus videojuegos meses e incluso a√±os antes de publicarlos. La verdad es que depende de los recursos que los desarrolladores quieran destinar a promocionar la obra y no tiene porqu√© ser un departamento dentro de la propia empresa, sino que tanto la distribuci√≥n como el m√°rketing se pueden delegar a empresas externas especialistas en estas √°reas. Vale la pena comentar el fen√≥meno ‚Äúhype‚Äù, que ocurre cuando una empresa hace uso de una excesiva publicidad para dar a conocer su producto, creando incluso una necesidad inexistente en los potenciales consumidores. Lo malo ocurre cuando el producto no est√° a la altura de lo prometido y entonces se convierte en el blanco de multitud de cr√≠ticas en muy poco tiempo, algo que puede perjudicar gravemente la imagen de los creadores. ","date":"25-02-2019","objectID":"/posts/2019/dev/003/:6:0","tags":["n9+","dev"],"title":"Fases Importantes del desarrollo de un juego","uri":"/posts/2019/dev/003/"},{"categories":["dev"],"content":"Fase de Mantenimiento Pese a que el juego est√© finalizado y en las manos de los jugadores, su ciclo de vida a√∫n est√° lejos de terminar. La fase de mantenimiento es el momento de arreglar nuevos errores, mejorarlo, etc. √âsto se hace sacando parches o actualizaciones al mercado. Sin embargo es tambi√©n una oportunidad para seguir sac√°ndole partido. Ya sea en forma de microtransacciones, suscripciones de pago o incluso con expansiones completas que a√±aden nuevas caracter√≠sticas al videojuego sin modificar en profundidad el motor del mismo, digamos que ser√≠a m√°s o menos como aprovechar al m√°ximo la base inicial. League of Legends es un videojuego gratuito con un sistema de micropagos a cambio de dise√±os exclusivos para sus personajes . ","date":"25-02-2019","objectID":"/posts/2019/dev/003/:7:0","tags":["n9+","dev"],"title":"Fases Importantes del desarrollo de un juego","uri":"/posts/2019/dev/003/"},{"categories":["comun"],"content":"Durante la mayor parte de mi vida, nunca pens√© seriamente en la serie Final Fantasy , a pesar de los cientos de horas que literalmente he pasado jugando. Siempre tuve dos suposiciones fundamentales con respecto a los personajes femeninos de la serie. En primer lugar, pueden luchar tan bien como los personajes masculinos. En segundo lugar, aunque son muy, muy bonitos, tambi√©n lo son los personajes masculinos. Como dice en la caja, esto es fantas√≠a. En otras palabras, mi alergia a la misoginia nunca se encendi√≥ mientras jugaba a los juegos. Desde entonces he reconsiderado estas dos suposiciones. Sin embargo, antes de comenzar este ensayo en serio, me gustar√≠a afirmar que no considero que la serie Final Fantasy sea ‚Äã‚Äãmis√≥gina. Sin embargo, hay matices en la representaci√≥n de los personajes femeninos principales de la serie que me gustar√≠a abordar. Me gustar√≠a comenzar definiendo mis t√©rminos. El feminismo, puro y simple, es la idea de que a los hombres y las mujeres se les debe dar igualdad de oportunidades. Aunque hay algunas diferencias biol√≥gicas b√°sicas entre hombres y mujeres que trascienden el tiempo y la cultura, las feministas creen que ni los hombres ni las mujeres, ni ninguna de las intermedias, deben ser juzgados o discriminados simplemente en virtud de su sexo o g√©nero. Las ant√≠tesis del feminismo son la misoginia y el sexismo. La misoginia es una actitud de odio hacia las mujeres. Se expresa a trav√©s de afirmaciones como ‚ÄúLas mujeres son m√°s d√©biles que los hombres‚Äù o ‚ÄúLas mujeres no pueden hacer [x, y, oz] tan bien como los hombres‚Äù. Tambi√©n puede expresarse identificando cualidades negativas con la feminidad, como referirse a Un cobarde como un gatito. La misoginia es un tipo de sexismo, que es una generalizaci√≥n excesiva de los rasgos de car√°cter basados ‚Äã‚Äãen el sexo o el g√©nero. El sexismo es como el racismo o el egocentrismo; es como decir que ‚Äúlos jud√≠os son buenos con el dinero‚Äù o ‚Äúlos franceses llevan ropa de moda‚Äù. Los conceptos err√≥neos sexistas comunes incluyen las ideas de que las mujeres son m√°s espirituales que los hombres, que las mujeres son m√°s art√≠sticas que los hombres, que las mujeres est√°n m√°s en contacto con ellos. Las emociones que los hombres, y que las mujeres tienen redes sociales m√°s fuertes que los hombres. . Esto nos lleva a Final Fantasy . ¬øLa serie promueve puntos de vista sexistas de las mujeres? ¬øProporciona modelos femeninos fuertes para los jugadores que invierten tanto tiempo y energ√≠a emocional en la serie? Para abordar estas preguntas, voy a ver tres personajes: Rydia de Final Fantasy IV , Aeris de Final Fantasy VII y Fran de Final Fantasy XII . Usar√© estos personajes como ejemplos para defender un cambio en la serie desde un punto de vista centrado en el hombre a un enfoque narrativo m√°s neutral. Sin embargo, antes de analizar estos tres personajes espec√≠ficos, creo que podr√≠a valer la pena presentar los videojuegos. Final Fantasy es una serie de juegos de rol de fantas√≠a publicados por Square-Enix, que antes se conoc√≠a como Square. Square fue fundada como desarrollador de software de juegos de computadora por Miyamoto Masafumi en 1983 y, dentro de cinco a√±os, hab√≠a ca√≠do en tiempos dif√≠ciles. En 1987, el director de planificaci√≥n y desarrollo de la compa√±√≠a, Sakaguchi Hironobu, ide√≥ el concepto de una simplificaci√≥n de los juegos de rol basados ‚Äã‚Äãen computadora destinados a capitalizar el √©xito de Enix‚Äôs Dragon Quest., que hab√≠a sido estrenada el a√±o anterior. Debido a que el √©xito o el fracaso del juego propuesto de Sakaguchi podr√≠a hacer o deshacer a la compa√±√≠a, el equipo de producci√≥n de siete hombres decidi√≥ llamar al proyecto ‚ÄúFinal Fantasy‚Äù, ya que ser√≠a el √∫ltimo juego de Square si no se vendiera. Sin embargo, el juego se vendi√≥ y desde entonces se ha expandido a una franquicia r√©cord y rentable que ha generado innumerables juegos derivados, as√≠ como numerosos anime, manga y largometrajes. Lo que voy a argumentar es que los juegos de Final Fantasy se han vuelto cada vez","date":"06-02-2019","objectID":"/posts/2019/comun/004/:0:0","tags":["n9+","comun"],"title":"Reflexi√≥n sobre Final Fantasy","uri":"/posts/2019/comun/004/"},{"categories":["dev"],"content":"En post anteriores exploramos c√≥mo podemos cambiar las propiedades f√≠sicas para simular diferentes materiales utilizando Surface Shaders. Un modelo de iluminaci√≥n es responsable de tomar estas propiedades y calcular el tono final de cada p√≠xel. Comenzaremos con uno realmente simple sobre el que podemos construir, un modelo de iluminaci√≥n de Lambert. Para ello, debemos saber que es la ley de Lambert. Ley de Lambert La ley de Lambert trata sobre la iluminancia de una superficie situada a una cierta distancia de una fuente de luz. Determina que la iluminaci√≥n producida por una fuente luminosa sobre una superficie es directamente proporcional a la intensidad de la fuente y al coseno del √°ngulo que forma la normal a la superficie con la direcci√≥n de los rayos de luz y es inversamente proporcional al cuadrado de la distancia a dicha fuente. B√°sicamente se define en que cuanto m√°s lejos esta el origen de la luz, m√°s radiaci√≥n llegara al objeto final. Este tipo de iluminaci√≥n se denomina Soft. Simple Shader Entendiendo los modelos de iluminaci√≥n, la intensidad de la luz que refleja una superficie en un modelo de iluminaci√≥n Lambertiana depende de la normal de una superficie. Una superficie paralela a una fuente de luz no debe reflejar la luz que recibe, mientras que una superficie ortogonal a una fuente de luz debe reflejarla en su totalidad. Es decir, la intensidad de la luz reflejada por una superficie es la siguiente: Intensidad de reflexi√≥n = Superficie Normal * Direcci√≥n de la luz Crea un nuevo shader y asignalo a un material, apl√≠calo a una esfera con una luz direccional. Aqu√≠ est√° el c√≥digo para el shader: Tenga en cuenta que cuando el valor de puntos es negativo, la luz proviene del lado opuesto del tri√°ngulo. Esto no es un problema para las geometr√≠as opacas, ya que los tri√°ngulos que no est√°n orientados hacia la parte frontal de la c√°mara est√°n seleccionados. . Cell Shader Toon shading, o cell shading, es una t√©cnica de renderizaci√≥n no fotorrealista que hace que los modelos 3D parezcan planos. Volver a crear la apariencia de un shader toon utilizando solo funciones de superficie ser√≠a extremadamente costoso. Adem√°s, como el shader toon requiere que cambiemos la forma en que se refleja la luz, es un problema, en su lugar necesitamos un modelo de iluminaci√≥n personalizado. Para aquellos que no est√°n familiarizados con el shader toon, tenga en cuenta que es una excelente manera de hacer que su juego se vea peculiar sin poner mucha energ√≠a en el desarrollo de un estilo art√≠stico original. Yo tambi√©n soy culpable de esto. Me encanta. . Pero, como puedes ver, ¬°tambi√©n se ve genial! Para comenzar, crea un nuevo shader y material utilizando nuestro anterior shader Soft como base. Adjunte el material a un modelo 3D; el shader toon funciona mejor en superficies curvas. Algunas implementaciones del shader Toon utilizan una textura llamada mapa de Ramp para definir la forma en que reasignamos la intensidad de luz de Lambert(NdotL) a otro valor. En la implementaci√≥n anterior, la variable _CelShadingLevels se usa para ajustar la intensidad de la luz de modo que solo pueda asumir un n√∫mero dado de valores muestreados equidistantemente de 0 a 1. . En esta demostraci√≥n us√© un valor de 5 para la variable de entrada _CelShadingLevels . Puede notar que, como resultado, hay 5 pasos distintos que dividen las 6 bandas diferentes de intensidad de luz. GitHub\r. ","date":"05-02-2019","objectID":"/posts/2019/dev/002/:0:0","tags":["n9+","dev"],"title":"Shaders Cell Shading (Toon)","uri":"/posts/2019/dev/002/"},{"categories":["dev"],"content":"Un CustomEditor nos permite cambiar la representaci√≥n visual de nuestras clases en el Unity Inspector. Hace m√°s sencillo interactuar con las script clases asociadas a Gameobjects, prefabs, etc‚Ä¶ . . Nuestro primer paso es crear una carpeta con el nombre Editor. Para Unity es un nombre de carpeta muy especial, Unity carga autom√°ticamente todos los scripts que modifican el comportamiento del UnityEditor desde esta carpeta. Estos scripts NO ser√°n incluidos en el empaquetado final del juego, solo ser√°n usado por el UnityEditor. Creamos dos carpetas m√°s: Scripts y Scenes para guardar el resto de scripts y la escena que tendr√° nuestro trabajo El √°rbol de directorios nos queda as√≠: . Assets ‚îÇ ‚îî‚îÄ‚îÄ‚îÄNombreProyecto ‚îÇ Editor ‚îÇ Scripts ‚îÇ Scenes Empezaremos con dos clases muy simples, primero creamos un nuevo script con el nombre de Unidad.cs en nuestra carpeta Scripts y a√±adimos las siguientes clases: // ‚îå‚à©‚îê(‚ó£_‚ó¢)‚îå‚à©‚îê // \\\\ // Unidad.cs (24/01/2019) \\\\ // Autor: Antonio Mateo (.\\Moon Antonio) antoniomt.moon@gmail.com \\\\ // Descripcion: Clase que contiene la informacion de una unidad. \\\\ // Fecha Mod: 24/01/2019 \\\\ // Ultima Mod: Version Inicial. \\\\ //******************************************************************************\\\\ #region Librerias using UnityEngine; #endregion namespace MoonAntonio { /// \u003csummary\u003e /// \u003cpara\u003eClase que contiene la informacion de una unidad.\u003c/para\u003e /// \u003c/summary\u003e [HelpURL(\"https://moonantonio.github.io/\"), AddComponentMenu(\"MoonAntonio/Unidad\"), System.Serializable] public class Unidad : MonoBehaviour { #region Variables Publicas public Data data; #endregion #region Dev [ContextMenu(\"Dev\")] protected void DevScript() { Debug.Log(\"\u003ccolor=green\u003eUnidad :: DevScript()\u003c/color\u003e \u003e\u003e Inicializado.\"); } #endregion } [System.Serializable] public class Data { #region Variables Publicas public float vida = 0.0f; public float mana = 0.0f; public bool isVivo = false; #endregion } } Data representar√° la informaci√≥n de la unidad. Queremos clases capaces de ser serializadas. Para hacer esto a√±adimos la etiqueta [System.Serializable] sobre la declaraci√≥n de las clases. . Ahora crearemos nuestra clase editor personalizada, creamos un nuevo script en la carpeta Editor llamado UnidadInspector e importamos la clase editor usada por el UnityEditor. A√±adimos la etiqueta [CustomEditor(typeof(Unidad))] para indicar que vamos a definir la representaci√≥n de la clase Unidad en el editor. UnidadInspector hereda de Editor. Sobreescribimos OnInspectorGUI(), este m√©todo ser√° llamado con cada evento del editor. // ‚îå‚à©‚îê(‚ó£_‚ó¢)‚îå‚à©‚îê // \\\\ // UnidadInspector.cs (24/01/2019) \\\\ // Autor: Antonio Mateo (.\\Moon Antonio) antoniomt.moon@gmail.com \\\\ // Descripcion: Inspector de la clase Unidad. \\\\ // Fecha Mod: 24/01/2019 \\\\ // Ultima Mod: Version Inicial. \\\\ //******************************************************************************\\\\ #region Librerias using UnityEngine; using UnityEditor; #endregion namespace MoonAntonio { /// \u003csummary\u003e /// \u003cpara\u003eInspector de la clase \u003csee cref=\"Unidad\"/\u003e.\u003c/para\u003e /// \u003c/summary\u003e [HelpURL(\"https://moonantonio.github.io/\"), AddComponentMenu(\"MoonAntonio/UnidadInspector\"), CustomEditor(typeof(Unidad))] public class UnidadInspector : Editor { public override void OnInspectorGUI() { // TODO } #region Dev [ContextMenu(\"Dev\")] protected void DevScript() { Debug.Log(\"\u003ccolor=green\u003eUnidadInspector :: DevScript()\u003c/color\u003e \u003e\u003e Inicializado.\"); } #endregion } } La primera tarea es a√±adir en TODO lo siguiente: serializedObject.Update(); // TODO serializedObject.ApplyModifiedProperties(); Ahora podemos continuar con la interfaz gr√°fica Podemos a√±adir etiquetas de texto usando LabelField, donde esta TODO : EditorGUILayout.LabelField(\"Datos Unidad\"); Extraer los atributos de ‚Äòdata‚Äô usando el nombre del atributo con el objecto serializado y FindProperty: SerializedProperty dataProperty = serializedObject.FindProperty(\"data\"); Para extraer los atributos de Data podemos usar el nombre del atributo con FindPropertyRelative porque usaremos la ","date":"24-01-2019","objectID":"/posts/2019/dev/001/:0:0","tags":["n9+","dev"],"title":"Personalizando nuestro editor - Unity","uri":"/posts/2019/dev/001/"},{"categories":["comun"],"content":"Feliz A√±o 2019!!!, este a√±o pasado, han ocurrido muchas cosas. Entre ellas, he terminado las entradas para aprender C# en Unity3D, he empezado a escribir las de C++ en Unreal y he abierto el Code backdoor. Tambi√©n me ha gustado mucho las nuevas tecnolog√≠as que han salido destinadas para la industria de Videojuegos. Entre ellas la ECS es la que mas me esta gustado, la orientaci√≥n a datos frente a la de objetos. Aunque aun no la domino del todo, me esta encantando. Tambi√©n se han anunciado nuevas noticias muy interesantes, como la liberaci√≥n open source de algunos frameworks de NVIDIA como PhysX, la tienda de Epic con sus buenas t√°cticas de mercado, la nueva update de Unity 2019 con tantos cambios, entre muchas otras. En la parte de videojuegos, han salido varias propuestas de mi gusto, uno de ellos Dragon Quest para Pc, FFXV para Pc y NinoKuni II, entre otros. Anime nos deja con un final de 2018 con muchas series abiertas y eso me encanta, estando con Fairy Tail, SAO, Goblin Slayer etc.. Este a√±o a sido un a√±o de buenos resultados, tanto profesional como personalmente y solo pido que para este 2019 siga conociendo nuevos paradigmas que me compliquen la vida ;D . ","date":"03-01-2019","objectID":"/posts/2019/comun/001/:0:0","tags":["n9+","comun"],"title":"Feliz A√±o Nuevo !!! 2019","uri":"/posts/2019/comun/001/"},{"categories":["comun"],"content":" Final Fantasy Tactics Final Fantasy nos ha dejado una larga lista de grandes t√≠tulos. Y ahora que se acerca la remasterizaci√≥n de Final Fantasy VII, de la que, de momento no sabemos en qu√© momento aparecer√°, al menos el primer episodio, desde ScreenRant han decidido desempolvar otro juego de la saga, contempor√°neo de Final Fantasy VII. Final Fantasy Tactics apareci√≥ en 1998 en la primera PlayStation. Sin embargo, el √©xito cosechado por Final Fantasy VII, que se lanz√≥ al mercado un a√±o antes, acab√≥ por cubrir a este t√≠tulo y sumirlo en la oscuridad. Sin embargo, Final Fantasy Tactics cuenta con muchos secretos que se han ido descubriendo a lo largo de los a√±os. ","date":"19-12-2018","objectID":"/posts/2018/comun/025/:0:0","tags":["n9+","comun"],"title":"Final Fantasy Tactics - Curiosidades","uri":"/posts/2018/comun/025/"},{"categories":["comun"],"content":"El juego original Final Fantasy Tactics comparte nombre con otro juego. En este caso se tratar√≠a de Bahamut Lagoon, un t√≠tulo que no sali√≥ de Jap√≥n, a excepci√≥n de una versi√≥n fan que, fue tras ser traducida al ingl√©s fue bautizada con el nombre Final Fantasy Tactics. Sin embargo, posteriormente este nombre se usar√≠a tambi√©n para el t√≠tulo de 1998. ","date":"19-12-2018","objectID":"/posts/2018/comun/025/:1:0","tags":["n9+","comun"],"title":"Final Fantasy Tactics - Curiosidades","uri":"/posts/2018/comun/025/"},{"categories":["comun"],"content":"Saint Ajora Final Fantasy Tactics nos presenta una historia donde la religi√≥n tiene un gran poder. En particular, la iglesia de Glabados habla de un santo o una santa, que vivi√≥ hace miles de a√±os. Ajora, que era una especie de dios que fue traicionado. Sin embargo, a pesar de que Final Fantasy XII acab√≥ confirmando que Ajora ser√≠a una mujer, algo que tambi√©n descubrimos en la √∫ltima batalla de Final Fantasy Tactics, este personaje iba a tener m√°s presencia en el juego de la que finalmente tuvo. Final Fantasy Tactics S ","date":"19-12-2018","objectID":"/posts/2018/comun/025/:2:0","tags":["n9+","comun"],"title":"Final Fantasy Tactics - Curiosidades","uri":"/posts/2018/comun/025/"},{"categories":["comun"],"content":"La batalla del hospital Los combates de Final Fantasy Tactics en ocasiones nos obligan a enfrentarnos a grupos separados de enemigos, e incluso a veces, separaba a nuestro personaje principal del resto de aliados. Sin embargo, los creadores del juego ten√≠an pensado desarrollar y experimentar a√∫n m√°s con los enfrentamientos. Por ejemplo, hab√≠an creado cuatro mapas que se unir√≠an en distintos puntos. Lo que nos permitir√≠a desplazarnos con nuestros personajes entre distintas zonas. Sin embargo, finalmente esta idea no se lleg√≥ a incluir en el juego. ","date":"19-12-2018","objectID":"/posts/2018/comun/025/:3:0","tags":["n9+","comun"],"title":"Final Fantasy Tactics - Curiosidades","uri":"/posts/2018/comun/025/"},{"categories":["comun"],"content":"Mago temporal En cierto momento del juego, nos enfrentamos con un mago que, al ser derrotado, lanzaba el grito de derrota predefinido para los personajes femeninos. Sin embargo, este mago pod√≠a usar todo tipo objetos propios tanto de los personajes masculinos, como femeninos. E incluso pod√≠a utilizar las clases del sexo femenino, a pesar de que los sprites de su oficio solo pod√≠an ser masculinos. Desgraciadamente, este personaje fue eliminado de la versi√≥n de Final Fantasy Tactics para PlayStation Portable. Por lo que al final la explicaci√≥n a sus particularidades solo pueden explicarse como un glitch. ","date":"19-12-2018","objectID":"/posts/2018/comun/025/:4:0","tags":["n9+","comun"],"title":"Final Fantasy Tactics - Curiosidades","uri":"/posts/2018/comun/025/"},{"categories":["comun"],"content":"Little Money En cierto momento de la aventura, durante una conversaci√≥n uno de los personajes pronuncia las palabras ‚ÄúLittle money‚Äù, dejando un tiempo de separaci√≥n entre letra y letra. Esto llev√≥ a que muchos jugadores pensaran que se trataba de una conversaci√≥n importante y de unas palabras trascendentes. Sin embargo, al compararlo con el resto de traducciones se vio que el espacio entre las letras se deb√≠a tan solo a un peque√±o fallo en el juego. ","date":"19-12-2018","objectID":"/posts/2018/comun/025/:5:0","tags":["n9+","comun"],"title":"Final Fantasy Tactics - Curiosidades","uri":"/posts/2018/comun/025/"},{"categories":["comun"],"content":"La nariz En Final Fantasy Tactics los personajes no tienen nariz. Esto se hizo para que fuera m√°s sencillo conseguir una gran est√©tica en los personajes. Sin embargo, en la serie Dissidia Final Fantasy, en la que volver√° a aparecer Ramza Beoulve, este personaje s√≠ contar√° con una nariz. Algo que ha sido muy discutido tanto por parte de los fans, como de los creadores del juego. Personaje sin nariz ","date":"19-12-2018","objectID":"/posts/2018/comun/025/:6:0","tags":["n9+","comun"],"title":"Final Fantasy Tactics - Curiosidades","uri":"/posts/2018/comun/025/"},{"categories":["comun"],"content":"The Elegant Flier Final Fantasy Tactics iba a presentar muchas caracter√≠sticas que finalmente no acabaron viendo la luz. Una de ellas puede observarse en el men√∫, si intentamos a√±adir a Teta a nuestro grupo mediante alg√∫n c√≥digo. En lugar de este personaje, veremos otro distinto, lo que llev√≥ a muchos a pensar que se tratar√≠a de Rapha de joven, y acab√≥ derivando en que un gran n√∫mero de jugadores especulara sobre el hecho de que podr√≠amos ver a este personaje de joven en alguna escena. Sin embargo, m√°s adelante Yasumi Matsuno revel√≥ que quien muchos pensaban que era una versi√≥n m√°s joven de Rapha, en realidad se tratar√≠a de un personaje nuevo conocido como ‚ÄúElegant Flier‚Äù. ","date":"19-12-2018","objectID":"/posts/2018/comun/025/:7:0","tags":["n9+","comun"],"title":"Final Fantasy Tactics - Curiosidades","uri":"/posts/2018/comun/025/"},{"categories":["comun"],"content":"Cloud El personaje de Final Fantasy VII tambi√©n hac√≠a su aparici√≥n en Final Fantasy Tactics. Sin embargo, el verdadero punto de inter√©s de Cloud era que pod√≠a utilizar un objeto llamado Lazo, que en teor√≠a solo pod√≠a ser equipado en personajes de sexo femenino. Algo que podr√≠a hacer referencia a una escena de Final Fantasy VII. ","date":"19-12-2018","objectID":"/posts/2018/comun/025/:8:0","tags":["n9+","comun"],"title":"Final Fantasy Tactics - Curiosidades","uri":"/posts/2018/comun/025/"},{"categories":["comun"],"content":"El cumplea√±os de Agrias Agrias Oaks contaba con una escena extra que se a√±adi√≥ a la versi√≥n de PlayStation Portable. Para desbloquearla ten√≠amos que haber llegado al cap√≠tulo final del juego, con Alicia, Lavian, y Mustadio en nuestro equipo, contar con medio mill√≥n de piezas de gil y visitar una ciudad el primer d√≠a de C√°ncer. Entonces ver√≠amos una escena en la que Mustadio estar√≠a compr√°ndole un regalo apropiado a Agrias. ","date":"19-12-2018","objectID":"/posts/2018/comun/025/:9:0","tags":["n9+","comun"],"title":"Final Fantasy Tactics - Curiosidades","uri":"/posts/2018/comun/025/"},{"categories":["comun"],"content":"El destino de Ramza La conclusi√≥n de Final Fantasy Tactics nos deja ver a Ramza y compa√±√≠a cabalgando sobre chocobos y entrando en otra dimensi√≥n. Sin embargo, el creador del juego, Yasumi Matsuno revel√≥ que al final hab√≠an conseguido llegar a otro pa√≠s donde habr√≠an vivido otra aventura. Una, que alg√∫n d√≠a podr√≠amos llegar a conocer. . ","date":"19-12-2018","objectID":"/posts/2018/comun/025/:10:0","tags":["n9+","comun"],"title":"Final Fantasy Tactics - Curiosidades","uri":"/posts/2018/comun/025/"},{"categories":["dev"],"content":" . Un colega esta terminando el TFG de dise√±o de videojuegos, y el otro dia estuvimos hablando de como crear un entorno para un videojuego shooter, vimos las dificultades y los balanceos necesarios para generar una soluci√≥n factible y escalable. Despu√©s de unos d√≠as de investigaci√≥n, encontr√© a un level design que tiene bastante experiencia en este campo, el es Booby Ross, dise√±ados de niveles de varios juegos de shooter. Aqu√≠ os dejo un apartado que el escribi√≥ en su blog. Tambi√©n os dejo su blog para que vall√°is a el y mir√©is los conceptos que ense√±a. No te lo pierdas. Esto no es una investigaci√≥n mia, sino que es de Bobby Ross. . . . . . . . . . ","date":"30-11-2018","objectID":"/posts/2018/dev/015/:0:0","tags":["n9+","dev"],"title":"Shooter Level Design - Conceptos","uri":"/posts/2018/dev/015/"},{"categories":["dev"],"content":"Creditos ‚ÄâBobby Ross . ","date":"30-11-2018","objectID":"/posts/2018/dev/015/:1:0","tags":["n9+","dev"],"title":"Shooter Level Design - Conceptos","uri":"/posts/2018/dev/015/"},{"categories":["comun"],"content":" La espiral de Fibonacci creada a partir de la proporci√≥n de oro ‚ÄúLa media de oro‚Äù, ‚ÄúProporciones divinas‚Äù, ‚ÄúEspiral de Fibonacci‚Äù, y la lista contin√∫a. Esta forma se crea a partir de una f√≥rmula matem√°tica conocida por su apariencia est√©ticamente agradable. Se puede encontrar de forma natural en muchas cosas como los l√≥bulos de las orejas, flores y conchas de nautilus. Tambi√©n se utiliza para dise√±ar objetos artificiales como el iPod. La regla de tercios m√°s utilizada (que reviso en Navegaci√≥n y orientaci√≥n) es una simplificaci√≥n derivada de esta ecuaci√≥n. En esta publicaci√≥n profundizar√© para mostrar c√≥mo se puede usar para hacer que su imagen sea m√°s efectiva. La espiral de Fibonacci Una aproximaci√≥n de la espiral √°urea generada dibujando arcos circulares conectando las esquinas opuestas de los cuadrados ajustados a los valores de la sucesi√≥n;1‚Äã adosando sucesivamente cuadrados de lado 0, 1, 1, 2, 3, 5, 8, 13, 21 y 34. . . Aqu√≠ hay una escena en la que us√© la proporci√≥n de oro para crear una imagen m√°s din√°mica. La narrativa de la escena es de un aventurero que supera obst√°culos aparentemente imposibles para llegar a una nueva tierra fant√°stica. . En la fase de bloqueo, obtengo las formas generales y entiendo cu√°les son mis principales puntos focales. Quer√≠a que los ojos del espectador giraran en espiral a su alrededor para imitar el viento soplando, por eso eleg√≠ la Proporci√≥n Dorada y la Espiral de Fibonacci. Mis tres principales puntos focales son el inicio (Plataforma), el medio (Globo) y el final (Isla flotante) del viaje. La Plataforma est√° al comienzo de la espiral y la Isla est√° al final de la espiral. Ahora, en mi bloqueo, ya s√© exactamente d√≥nde est√°n mis l√≠neas gu√≠a principales y dos de mis tres puntos focales. . El siguiente paso, comenc√© a fortalecer mis puntos focales dividiendo la Isla Flotante para rodear un Cristal flotante al final de la espiral. Luego saqu√© el globo aerost√°tico de la espiral y lo alej√© de la plataforma para hacerlos m√°s pronunciados. Us√© la vegetaci√≥n para comenzar a romper y debilitar algunos de los bordes duros de la arquitectura. . Agregu√© detalles y puentes en la Plataforma. Luego us√© vi√±as para fortalecer el c√≠rculo alrededor del Cristal. Alargu√© el globo y lo apunt√© hacia el cristal para sugerir hacia d√≥nde se dirig√≠a. . Agregu√© un poco de espacio negativo para reforzar el comienzo de la Plataforma. Agregu√© cuerdas colgantes al globo para dar m√°s l√≠neas de gu√≠a de apoyo hacia la espiral. Estaba obteniendo muchas l√≠neas horizontales en el lado derecho de la imagen que estaba destruyendo mi espiral, as√≠ que agregu√© cascadas y m√°s bloques verticales a la arquitectura. En la parte superior derecha, agregu√© una bandada de p√°jaros para ayudar a conectar la espiral entre la Isla Flotante. Para equilibrar los puntos focales reduje la saturaci√≥n del globo y el cristal y agregu√© flores rojas a la plataforma. Me asegur√© de usar solo el rojo en mis puntos focales, ya que contrastaba bien con el azul y el verde de la escena. Despu√©s de eso tuve una escena terminada! La proporci√≥n de oro es definitivamente un poco m√°s avanzada que la mayor√≠a de las otras gu√≠as de composici√≥n que existen, pero eso no necesariamente lo hace el mejor. Esto solo sucedi√≥ para ayudar a respaldar la experiencia que quer√≠a ofrecer en este entorno. Si est√°s aprendiendo a usar la composici√≥n en tus escenas, te recomiendo estudiar la composici√≥n para fotograf√≠a y dise√±o ambiental. Hay mucha documentaci√≥n bien escrita para eso y, con suerte, en un futuro pr√≥ximo obtendremos m√°s cosas orientadas a crear entornos de juego. . ","date":"30-11-2018","objectID":"/posts/2018/comun/023/:0:0","tags":["n9+","comun"],"title":"Usando la proporci√≥n de oro","uri":"/posts/2018/comun/023/"},{"categories":["aprende cpp con unreal"],"content":"Si yo fuera un modelo de datos de una maquina, habr√≠a variables que me describir√≠an incluyendo una para hacer referencia a mi nombre (un valor que no ha cambiado) y mi edad (un valor que cambia cada a√±o). Algunas variables solo pueden ser determinadas por m√≠, como el nombre de mi pel√≠cula favorita, y otras pueden ser controladas total o parcialmente por fuentes externas, como mi estado civil. Todos estos tipos de relaciones se pueden modelar en c√≥digo cuando conoces el vocabulario correcto. En esta lecci√≥n, crearemos una clase que implemente el ejemplo que acabo de proporcionar. GitHub\rGitlab\r","date":"08-11-2018","objectID":"/posts/2018/cplusplusunreal/003/:0:0","tags":["n9+","cpp","unreal"],"title":"Aprende C++ con Unreal - Variables","uri":"/posts/2018/cplusplusunreal/003/"},{"categories":["aprende cpp con unreal"],"content":"Modelando un humano Para comenzar, crea una nueva escena. Vamos a agregar una nueva clase c++ d√°ndole al bot√≥n de ‚ÄúAdd New‚Äù -\u003e New C++ Class -\u003e Actor -\u003e Nombre: Humano. Cuando se cree la clase, le daremos doble click para que se nos inicie en visual studio. Ahora nuestro archivo Humano.h lo dejaremos asi: #pragma once #include \"CoreMinimal.h\" #include \"GameFramework/Actor.h\" #include \"Humano.generated.h\" UCLASS() class LEARNCPPUNREAL_API AHumano : public AActor { GENERATED_BODY() }; y nuestro archivo Humano.cpp: #include \"Humano.h\" Esto es lo mas limpio que podemos dejar las clases. Ahora como en la anterior secci√≥n, vamos a implementar el m√©todo BeginPlay() junto con un Debug. #pragma once #include \"CoreMinimal.h\" #include \"GameFramework/Actor.h\" #include \"Humano.generated.h\" UCLASS() class LEARNCPPUNREAL_API AHumano : public AActor { GENERATED_BODY() public: FString name = \"Moon\"; protected: virtual void BeginPlay() override; }; #include \"Humano.h\" void AHumano::BeginPlay() { Super::BeginPlay(); UE_LOG(LogTemp, Warning, TEXT(\"Hola, mi nombre es %s\"), *name); } Antes de explicarlo, me gustar√≠a que volvieras al editor y clicaras el bot√≥n compile. Esto realizara un procesamiento para ver que archivos han cambiado y actualizarlos en el editor, para que los cambios se vean reflejados cuando reproduzcamos la soluci√≥n. Cada vez que cambies algo en Visual Studio, tienes que compilar. . . Despu√©s solo ten√©is que arrastras la clase Humano al escenario y ver√©is como os sale el mensaje por consola. . Explicare esta parte, empezando por el .h, como se ve, en el bloque public he creado una variables FString con nombre name y valor Moon. Lo que hemos hecho es ‚Äúleer‚Äù o ‚Äúobtener‚Äù el valor almacenado por una variable llamada ‚Äúname‚Äù, anexarlo a la cadena de texto y pasar todo el mensaje como un par√°metro al m√©todo que imprimi√≥ el mensaje a la consola. Para ‚Äúescribir‚Äù o ‚Äúestablecer‚Äù una variable, usamos algo llamado operador de asignaci√≥n. Para confundirte, los programadores de hace mucho tiempo decidieron que este operador se ver√≠a como el signo igual (y para comprobar realmente la igualdad, decidieron usar DOS signos iguales - suspiro). Entonces, para ‚Äúescribir‚Äù o ‚Äúestablecer‚Äù una variable, puede usar una l√≠nea de c√≥digo como la siguiente: name = \"Moon\"; Si tuviera que poner esa l√≠nea de c√≥digo en el m√©todo de BeginPlay sobre la l√≠nea que imprime el mensaje ‚ÄúHola‚Äù, cuando ejecute la escena, tendr√° dos personas que lo recibir√°n con el mensaje ‚ÄúHola, mi nombre es Moon‚Äù. Mientras que la escena contin√∫e, Moon ser√° su nombre, como puede verificar en la consola. Sin embargo, cuando detenga la escena, los nombres volver√°n a los valores que ten√≠an antes de presionar play (en mi caso, Moon). ","date":"08-11-2018","objectID":"/posts/2018/cplusplusunreal/003/:1:0","tags":["n9+","cpp","unreal"],"title":"Aprende C++ con Unreal - Variables","uri":"/posts/2018/cplusplusunreal/003/"},{"categories":["aprende cpp con unreal"],"content":"Campos Nuestro humano no tiene una variable por edad, as√≠ que a continuaci√≥n le mostrar√© c√≥mo ‚Äúdeclarar‚Äù su propia variable llamada ‚Äúcampo‚Äù. Como m√≠nimo, todas las variables deben declararse con dos cosas, un ‚ÄúTipo de datos‚Äù y un ‚ÄúNombre‚Äù mediante el cual usted ‚Äúidentifica‚Äù la variable. Agregue la siguiente l√≠nea a su script, dentro de la clase (entre los corchetes), pero fuera de los m√©todos. Por convenci√≥n, la mayor√≠a de las variables de nivel de clase aparecen en la parte superior de la clase. public: FString name = \"Moon\"; int32 edad = 30; Consejo Hay muchos tipos de datos que puede elegir al declarar sus variables (consulte la lista completa aqu√≠: https://docs.unrealengine.com/en-us/Programming/Development/CodingStandard) . Los m√°s comunes que querr√°s incluir son: bool - este es un tipo de valor que por defecto es falso, y solo puede contener ‚Äúfalso‚Äù o ‚Äúverdadero‚Äù int32 - este es un tipo de valor que por defecto es 0, y puede contener n√∫meros enteros, por ejemplo: 42 float: este es un tipo de valor que por defecto es 0 y puede contener n√∫meros con decimales, por ejemplo: 3.14159f FString - un tipo especial que tiene como valor predeterminado null (nothing), y puede contener matrices de caracteres,como: ‚ÄúHola‚Äù Como es usuario de Unreal, tambi√©n usar√° con frecuencia otros tipos de datos, como: Objetos: este es un tipo de referencia cuyo valor predeterminado es nulo y puede contener una referencia a un objeto activo. FColor: este es un tipo de valor que por defecto es nulo y puede contener un RGB. FVector - este es un tipo de valor (una estructura) que por defecto es cero en cada uno de sus subcampos (x, y , z). Hay varias otras palabras que pueden aparecer en una declaraci√≥n de variable antes del tipo de datos. ‚ÄúSolo lectura‚Äù indica una variable que solo se puede asignar en el momento en que se crea un objeto (por una clase ‚ÄúConstructor‚Äù o mientras se inicia la variable). ‚ÄúConst‚Äù es similar, pero debe inicializarse solo en la declaraci√≥n. ‚ÄúEst√°tico‚Äù indica una variable que pertenece a la clase misma en lugar de instancias de la clase (por ejemplo, muchas de las variables en la clase ‚ÄúTime‚Äù son est√°ticas). Al declarar la variable en el nivel ra√≠z de nuestra clase, le estamos dando un ‚Äúalcance‚Äù de nivel de clase. Esto significa que la variable ser√° visible en todas partes dentro de la clase(.cpp y .h), incluso dentro de los m√©todos dentro de la clase. Tenga en cuenta que tambi√©n puede declarar variables dentro de un m√©todo, pero su alcance ser√° m√°s limitado, y otros m√©todos o clases no tendr√°n acceso a esas variables. Guarde su script y regrese a Unreal. Mira a uno de tus Humanos e intenta establecer la variable de nombre/edad que acabamos de declarar ‚Ä¶ oye espera, ¬øpor qu√© no lo vemos? Las variables tienen algo llamado ‚Äúvisibilidad‚Äù. Cuando no se especifica la visibilidad de una variable, se predetermina a ‚Äúprivate‚Äù, lo que significa que solo su clase sabe que existe. Unreal solo muestra variables que est√°n marcadas como ‚Äúpublic‚Äù o por ‚ÄúBlueprint‚Äù, que es una forma especial de exponer una propiedad al inspector de Unreal sin permitir que otros scripts conozcan la variable. Cualquiera de las siguientes l√≠neas permitir√° que su variable aparezca en el inspector: #pragma once #include \"CoreMinimal.h\" #include \"GameFramework/Actor.h\" #include \"Humano.generated.h\" UCLASS() class LEARNCPPUNREAL_API AHumano : public AActor { GENERATED_BODY() public: UPROPERTY(EditAnywhere) FString name = \"Moon\"; UPROPERTY(VisibleAnywhere) int32 edad = 30; protected: virtual void BeginPlay() override; }; Antes de continuar, vamos a dirigirnos a nuestra clase, le daremos click derecho y crearemos un blueprint basado en ella. . Esto nos creara un nuevo blueprint que tenga de herencia nuestra clase humano. Ahora arrastramos a la escena nuestro BP MyHumano. Dentro del BP veremos en las variables que salen las dos que creamos. . Ahora cualquier cambio que realicemos en el nombre, cambiara el resultado. Por ejemplo colocando dos BP con el nombre de Moon y ","date":"08-11-2018","objectID":"/posts/2018/cplusplusunreal/003/:2:0","tags":["n9+","cpp","unreal"],"title":"Aprende C++ con Unreal - Variables","uri":"/posts/2018/cplusplusunreal/003/"},{"categories":["comun"],"content":" . Nota breve: cuando se habla de Square Enix, me refiero a la divisi√≥n japonesa de Square, no a las partes occidentales del estudio que hacen juegos como Tomb Raider y Hitman. ‚ÄúEl combate por turnos es viejo. Est√° desactualizado. Es tan muerto como los juegos lineales para un solo jugador. Nunca volver√° a funcionar en otro juego de AAA. Es algo del pasado: un recuerdo nost√°lgico de los juegos de ayer en el mejor de los casos ‚Äú. ¬øO es eso? Si eres como yo y sigues de cerca las tendencias que configuran los juegos de rol, es probable que hayas visto argumentos como estos miles de veces. ¬øPero es realmente el momento de cerrar la puerta en el combate por turnos para los juegos de grandes t√≠tulos como Final Fantasy ? Vamos a discutir. Muchos fan√°ticos, incluido yo mismo, pueden haber pensado que con el lanzamiento de Final Fantasy XV y la presentaci√≥n de un remake de Final Fantasy VII sin turnos , Square Enix (y el mercado AAA JRPG en general) agitaban la bandera blanca y dec√≠an Un adi√≥s permanente al combate por turnos. Desde la d√©cada de 1980, Square Enix ha sido el desarrollador que ayud√≥ a dar forma al g√©nero JRPG con franquicias como Final Fantasy , Chrono Trigger y Secret of Mana . As√≠ que para eliminar el combate por turnos de la alineaci√≥n AAA de lo que quiz√°s sea su serie m√°s famosa y de mayor alcance, fue un movimiento monumental en el mundo JRPG. . Cuando se le pregunt√≥ acerca de los cambios incre√≠blemente significativos (es decir, el mundo abierto, el combate basado en la acci√≥n, etc.) de la serie Final Fantasy , Square ha citado un hecho en particular en varias ocasiones: un cambio dr√°stico en el mercado. En los √∫ltimos a√±os, las ventas de consolas en Jap√≥n han sido r√©cord, dando paso a las crecientes ventas de dispositivos m√≥viles. As√≠ que para mantener las ventas en sus juegos basados ‚Äã‚Äãen Jap√≥n, Square decidi√≥ cambiar su estrategia y dirigirse a las audiencias occidentales, de ah√≠ el abandono del combate por turnos. Pero desde el lanzamiento de FFXV , creo que hay varias razones que han surgido para dar nuevas esperanzas para el regreso del combate por turnos a la serie principal de Final Fantasy . Ejemplo: 2017 fue un a√±o incre√≠ble para JRPG, y 2018 ya se perfila como algo que quiz√°s sea a√∫n m√°s especial. 2017 nos dio juegos como Nier: Automata , FFXII: The Zodiac Age (aunque fue un relanzamiento de un juego de PS2 2006) y Persona 5 . Mientras tanto, 2018 nos ha tra√≠do el lanzamiento de juegos muy esperados como Kingdom Hearts 3, Ni No Kuni II y Monster Hunter: World . ¬øQu√© tienen todos estos juegos en com√∫n? Son juegos de rol de fabricaci√≥n japonesa que tuvieron un impacto significativo en la configuraci√≥n de las experiencias de la audiencia de juegos en 2017 o en el dominio de las listas de ‚Äúlanzamientos m√°s anticipados‚Äù. Por ejemplo, Nier: Automata sorprendi√≥ a todos y no solo revivi√≥ una franquicia de nicho, sino que la puso en el centro de atenci√≥n y la hizo circular en muchos debates sobre el Juego del A√±o. Para ir un paso m√°s all√°, Persona 5 , la √∫nica entrada ‚Äúverdaderamente‚Äù basada en turnos en la lista de juegos que acabo de mencionar, en realidad gan√≥ muchos RPG o incluso premios del Juego del A√±o , sorprendiendo a muchos fan√°ticos de videojuegos con su √©xito. . As√≠ que tomemos un minuto para hablar sobre el √©xito de Persona 5 y lo que podr√≠a significar para el futuro de la serie Final Fantasy . Persona 5: Prueba de que los combates basados en turnos est√° vivo y pateando A pesar de que Persona 5 probablemente nunca vencer√° a FFXV en cantidades absolutas de unidades vendidas, hizo algo incre√≠ble: en 2017, hizo que la salud del combate por turnos fuera una discusi√≥n relevante que simplemente no pod√≠a descartarse. Hasta la fecha, P5 ha vendido m√°s de 2 millones de copias, por lo que es quiz√°s el juego de Persona m√°s vendido de todos los tiempos, y solo ha estado disponible durante menos de un a√±o (al menos para el p√∫blico occidental). Entonces, en un a√±o en que Square Enix, uno de los (antiguos) reyes del","date":"08-11-2018","objectID":"/posts/2018/comun/022/:0:0","tags":["n9+","comun"],"title":"El estado de los juegos de rol basados ‚Äã‚Äãen turnos y el futuro de Final Fantasy","uri":"/posts/2018/comun/022/"},{"categories":["comun"],"content":" . Los pechos oscilan. Ellos caen y se pueden mover. A lo largo de los a√±os, muchos juegos han intentado emular el comportamiento de los pechos. Incluso hay un t√©rmino para ello: ¬†‚ÄúBreast physics‚Äù. Si has jugado a juegos que tienen f√≠sica en los pechos, probablemente hayas visto lo poco com√∫n que son los juegos que muestran los pechos como realmente se mueven: bolsas de grasa afectadas por la gravedad. En cambio, es m√°s probable que un juego represente los pechos como globos de helio que tienen sus propias mentes y fuerzas gravitatorias. Ciertos juegos han fallado en mostrar los pechos realistas tan ampliamente que algunas personas parecen convencidas de que la mala f√≠sica de los pechos es el resultado del sexismo o de una industria a la que le gusta objetivar a las mujeres. He visto conjeturas injustas acerca de si los desarrolladores han interactuado o no con pechos de la vida real. He visto a personas decir que los desarrolladores simplemente no saben c√≥mo caracterizar adecuadamente a las mujeres en los juegos, y que el oc√©ano de juegos de pechos poco realistas es lo que sucede cuando tenemos tan pocas mujeres que desarrollan juegos (por suerte esto va cambiando). ¬øAlguna de estas afirmaciones es cierta, me pregunt√©? Muchas personas teorizan sobre por qu√© los juegos a menudo presentan una mala f√≠sica de los pechos, pero hay poca informaci√≥n sobre el proceso real de creaci√≥n de pechos. Despu√©s de analizarlo un poco, descubr√≠ que muchos desarrolladores aficionados parec√≠an tener un verdadero problema para descubrir c√≥mo abordar la f√≠sica de los pechos en sus juegos. Hay una cantidad sorprendente de publicaciones y tutoriales en los foro donde las personas discuten las mejores maneras de lograr una buena f√≠sica de los pechos en l√≠nea. Una persona incluso cre√≥ una presentaci√≥n de Powerpoint en cuatro partes titulada ‚ÄúThe Quest for Boob Jiggle In Unity‚Äù. Las personas han desarrollado herramientas especializadas para que otros desarrolladores las utilicen, para ayudar a desmitificar el enigma que es ‚Äúc√≥mo funcionan los pechos‚Äù. ADVERTENCIA Contenido NSFW . En 1992, se lanz√≥ un juego de lucha llamado ¬†Fatal Fury 2. Fatal Fury 2 en realidad ten√≠a algunas peculiaridades notables: era un juego de aspecto magn√≠fico que permit√≠a a los jugadores realizar ‚Äúmovimientos de desesperaci√≥n‚Äù cuando su barra de salud estaba baja , y les dio a los jugadores la oportunidad de salir del peligro r√°pidamente a trav√©s de un mec√°nico. Pero seamos realistas. Una de las mayores contribuciones de Fatal Fury 2 al medio fue que fue el primer juego que introdujo un personaje con senos que se movieron por su cuenta. . Conocido como Mai Shiranui, ese personaje es famoso por tener pechos muy animados. Aunque Fatal Fury puede no ser una gran franquicia en la actualidad, su legado est√° muy vivo: muchos de los mejores juegos de lucha incluyen un efecto de jiggle similar: . . . . Cuando los desarrolladores no incluyen la f√≠sica de los pechos, no es infrecuente que los jugadores expertos tomen las cosas en sus propias manos a trav√©s de modding. Un tipo popular de mod de Skyrim agrega la f√≠sica de pechos m√°s robusta al juego de fantas√≠a: . Cuando se trata de la f√≠sica de los pechos, el juego m√°s famoso de todos tiene que ser Dead or Alive . Si bien la f√≠sica de los pechos podr√≠a ser solo una ‚Äúcaracter√≠stica‚Äù menor en los juegos que mencion√© anteriormente, para Dead or Alive , la f√≠sica de los pechos se integra en la identidad del juego. Ese √©nfasis podr√≠a darle a los juegos una mala reputaci√≥n, como dice Mike Fahey en su art√≠culo sobre Dead or Alive , ya que los fan√°ticos encuentran mucho para amar en la forma en que se juega, algunos de los cuales no tienen nada que ver con los pechos. A√∫n as√≠, no puedes realmente divorciarte de Dead or Alive por las f√≠sica de tus pechos. . En los √∫ltimos a√±os, los desarrolladores han creado motores personalizados para dotar de f√≠sicas realistas a los pechos. Como es el ejemplo de Tera Online, con un motor de f√≠sicas integrado en s","date":"07-11-2018","objectID":"/posts/2018/comun/021/:0:0","tags":["n9+","comun"],"title":"Pechos en videojuegos - F√≠sicas","uri":"/posts/2018/comun/021/"},{"categories":["aprende cpp con unreal"],"content":"Si nunca antes has creado un script, no te preocupes, no es exactamente ciencia de cohetes. Aprender a programar es como aprender un nuevo idioma, pero est√°s ‚Äúhablando‚Äù con la maquina. Al igual que un lenguaje humano se puede dividir en oraciones que consisten en un sustantivo y un verbo, los lenguajes de programaci√≥n se pueden dividir en variables (el sustantivo) y m√©todos (el verbo) que a menudo se combinan en enunciados (la oraci√≥n). Aprender a programar simplemente requiere un poco de esfuerzo para aprender el vocabulario y luego juntarlo de una manera l√≥gica. El script que crearemos contendr√° el c√≥digo al que nos referimos como una ‚Äúclase‚Äù. Una clase a menudo se relaciona conceptualmente con un plano desde el que puede crear objetos. En Unreal, usar√°s tu clase para crear ‚ÄúActores‚Äù que se conectan a ‚ÄúObjectos‚Äù de forma muy similar a como puedes agregar un colisionador de f√≠sica o un componente de audio. Al escribir sus propios scripts, puede tener una funcionalidad completamente nueva y personalizada de su propio dise√±o. GitHub\rGitlab\rC++ es un lenguaje de programaci√≥n orientado a objetos que toma la base del lenguaje C. Es un lenguaje de programaci√≥n dise√±ado a mediados de los a√±os 80 por Bjarne Stroustrup. La intenci√≥n de su creaci√≥n fue el extender al exitoso lenguaje de programaci√≥n C con mecanismos que permitieran la manipulaci√≥n de objetos. En ese sentido, desde el punto de vista de los lenguajes orientados a objetos, el C++ es un lenguaje h√≠brido. Posteriormente se a√±adieron facilidades de programaci√≥n gen√©rica, que se sum√≥ a los otros dos paradigmas que ya estaban admitidos (programaci√≥n estructurada y la programaci√≥n orientada a objetos). Por esto se suele decir que el C++ es un lenguaje de programaci√≥n multiparadigma. Aqui es donde se unen C++ y Unreal para videojuegos. . En el panel Content Browser de Unreal, seleccione el bot√≥n ‚ÄúAdd New‚Äù, desde el cual tiene la opci√≥n ‚ÄúNew C++ Class‚Äù. Alternativamente, tambi√©n puede click derecho en Content Browser, ‚ÄúNew C++ Class‚Äù, pero de todos modos tendr√° que volver al panel del proyecto para nombrar y abrir el nuevo archivo. De forma predeterminada, tendr√° que elegir un tipo de clase, en este caso elegiremos Actor. Por ahora solo escribe ‚ÄúDemo‚Äù para el nombre de nuestro script y despu√©s el bot√≥n verde ‚ÄúCreate Class‚Äù. Consejo El nombre de archivo que escriba para su script es importante por una variedad de razones: El nombre del archivo se usar√° autom√°ticamente como el nombre de la clase en el c√≥digo de plantilla que crea autom√°ticamente. Hay algunas reglas sobre qu√© nombres son legales para usar en una clase: Debe comenzar con una letra y debe consistir solo en caracteres alfanum√©ricos. Si intent√≥ ingresar ‚Äú1Bunny‚Äù, obtendr√° un error. No puede soportar espacios. Si trataste de ingresar un nombre con un espacio, como ‚ÄúMi clase‚Äù, Unreal intenta arreglarlo por ti (pero solo a medias) y crea el c√≥digo de plantilla con un nombre de clase de ‚ÄúMi Clase‚Äù aunque abandone el espacio en el nombre del archivo. Luego, cada vez que intente agregar el script a un objeto, Unreal se quejar√° de usted: \" No se puede agregar el script. No se puede agregar el componente ‚ÄòScriptName‚Äô porque no existe. Verifique si el nombre del archivo y el nombre de la clase coinciden. Los nombres de tus clases deben ser √∫nicos: no puedes tener dos clases llamadas ‚ÄúBoogers‚Äù sin importar lo gracioso que pienses que ser√≠a. De nuevo, Unreal intentar√° solucionar este problema autom√°ticamente y enumerar√° su nombre de archivo y clase (agregue un n√∫mero al final) para que sea √∫nico. Si nombra una clase con el mismo nombre que algo que Unreal ya ha tomado, como ‚ÄúAActor‚Äù, recibir√° una advertencia, ‚ÄúScript ‚ÄòAActor‚Äô tiene el mismo nombre que el componente incorporado de Unreal. Los programadores pueden ser muy selectivos y tienen pautas para casi todo, incluso los nombres que usa e incluso el caso de las letras con las que escribe. Un buen nombre de clase ser√° un sustantivo o frase nominal y utilizar√° ‚ÄúPascalCasing‚Äù, don","date":"31-10-2018","objectID":"/posts/2018/cplusplusunreal/002/:0:0","tags":["n9+","cpp","unreal"],"title":"Aprende C++ con Unreal - Tu primer script","uri":"/posts/2018/cplusplusunreal/002/"},{"categories":["comun"],"content":"La frustraci√≥n, desde su interpretaci√≥n m√°s sencilla vista por la psicolog√≠a, no es otra cosa que la sensaci√≥n (generalmente relacionada con la ira) al momento en que nuestro deseo no es satisfecho. Podemos estar viviendo la p√©rdida de un ser querido, un juicio por separaci√≥n, tolerando un trabajo que no da lugar a nuestro crecimiento, falta de oportunidades, dificultades para llegar a fin de mes. A la larga, la frustraci√≥n y sus desaf√≠os aparecen constantemente frente a nosotros como el recordatorio de nuestra humanidad. Tan fr√°gil y ca√≥tica. ¬øPero qu√© pasa cuando los juegos se enfocan en desafiar nuestra frustraci√≥n? Algunos juegos son sencillos, otros ofrecen experiencias impactantes a nivel trama, otros son un viaje visual. Las variedades son muchas y suelen entrelazarse. Pero entre ellos se encuentra un diamante en bruto de la psicolog√≠a: los juegos con alto grado de frustraci√≥n. . Dark Souls, Hotline Miami, Celeste, Super Meat Boy, entre otros t√≠tulos, proponen lo que para muchos es, simplemente, un reto casi imposible. Pero ahora vamos a hablar de qu√© es lo que pasa con nuestra psique cuando despu√©s de pasar horas luchando, el t√≠tulo nos premia por haber aprendido la mec√°nica y c√≥mo impacta esto, no s√≥lo en nuestro √°nimo, sino de c√≥mo se traspola esto a nuestra habilidad para tolerar las crisis y superarlas. En primer lugar, para poder hablar de la frustraci√≥n en tanto consecuencia al deseo no satisfecho, debemos hablar de duelo. En palabras de Sigmund Freud: ‚ÄúEl duelo es, por regla general, la reacci√≥n frente a la p√©rdida de una persona amada o de una abstracci√≥n que haga sus veces, como la patria, la libertad, un ideal, etc. [‚Ä¶] Nunca se nos ocurre considerarlo un estado patol√≥gico ni remetirlo al m√©dico para su tratamiento. Confiamos en que pasado cierto tiempo se lo superar√°, y juzgamos inoportuno y aun da√±ino perturbarlo.‚Äù (Sigmund Freud ‚Äì Duelo y Melancol√≠a, 1915). . Con esto, entonces, podemos empezar a trazar la conclusi√≥n de que, a la larga, la frustraci√≥n es casi un duelo temprano. ¬øSucede tan seguido, como en los juegos, que frente a esta situaci√≥n decidimos abandonar? ¬øQu√© pasar√≠a si frente a cada frustraci√≥n de nuestra vida cotidiana pudi√©ramos ‚Äúarrojar el joystick y apagar la consola‚Äù? Excepto en casos extremos, la mayor√≠a de las veces esto no es posible y por lo menos seguiremos intentando hasta tanto lo consigamos o comprobemos que escapa nuestras posibilidades reales, luego de diversas estrategias. Entonces viene aqu√≠, en segundo lugar, un planteo, una hip√≥tesis. Algo que ahonda en tierras para nosotros poco conocidas a√∫n: ¬øPodr√≠a ser posible que un juego frustrante pudiera, a la inversa de lo que sucede en nuestra vida cotidiana, proveernos de una herramienta m√°s para aportar a nuestra perspectiva de superaci√≥n de la frustraci√≥n? . Para responder esto hice algunas preguntas. Me encontr√© con muchas respuestas: algunas personas afirmaron que sol√≠an abandonar los juegos frustrantes. Sin embargo, aquellas personas que me comentaban que hab√≠an seguido intentando, dijeron que el resultado fue sumamente satisfactorio. Yo mismo cotej√© estas respuestas con mi experiencia personal y descubr√≠ que me hab√≠a pasado lo mismo: compr√© Celeste por sus cr√≠ticas positivas, pese a que reconozco que el g√©nero de plataformas es uno de los que m√°s desaf√≠a mis habilidades, y el empe√±o que puse en no abandonarlo me llev√≥ a sentirme cada vez mejor con los paulatinos avances, e internamente me sent√≠ capaz de probar con otros juegos m√°s dif√≠ciles. El mes pasado tuve la oportunidad de escuchar el testimonio de un muchacho que frente a la separaci√≥n con su novia, tuvo la suerte de que le regalaran el Dark Souls. Comentaba que el juego casi lo estuvo acompa√±ando durante todo su duelo. Y como cada obst√°culo superado luego de tantos intentos, le resultaba casi una palmada en la espalda, como si una voz invisible le dijera ‚Äútu puedes‚Äù. . Creo que a veces tenemos en los juegos m√°s oportunidades y caminos de los que nos imaginamos. Quiz√° ","date":"29-10-2018","objectID":"/posts/2018/comun/020/:0:0","tags":["n9+","comun"],"title":"La dificultad en los videojuegos","uri":"/posts/2018/comun/020/"},{"categories":["dev"],"content":"Llevo unos d√≠as profundizando sobre este tema, hasta ahora solo hab√≠a realizado peque√±as investigaciones sobre esto, pero creo que es algo que puede ayudar mucho tanto para nuevos como para veteranos. La ingenier√≠a inversa (en ingl√©s, reverse engineering) es el proceso de descubrir los principios tecnol√≥gicos de un objeto, herramienta, dispositivo o sistema, mediante el razonamiento abductivo (haciendo conjeturas) de su estructura, funci√≥n y operaci√≥n. Dicho de otra manera, se trata de tomar algo, por ejemplo un dispositivo mec√°nico o electr√≥nico, para analizar su funcionamiento en detalle, con el objetivo de crear un dispositivo que haga la misma tarea o una similar sin copiar los detalles del original. Objetivo La ingenier√≠a inversa persigue el objetivo de obtener la mayor cantidad de informaci√≥n t√©cnica de un producto, del cual no se tiene la m√°s m√≠nima informaci√≥n t√©cnica de su dise√±o, construcci√≥n y funcionamiento, de modo que se debe partir de un todo para comprender cada pieza del sistema, para lo cual se deben tomar notas muy detalladas. La ingenier√≠a inversa es una rama de la ingenier√≠a relativamente reciente, cuyos or√≠genes se remontan a la Segunda Guerra Mundial, cuando alguno de los dos bandos (Aliados y Potencias del Eje) capturaba maquinaria o equipo del otro bando, entonces se dispon√≠an a conocer hasta el m√°s m√≠nimo detalle de la tecnolog√≠a del enemigo con el objetivo de encontrar fallas o puntos d√©biles que les brindar√°n cierta ventaja. Usos La ingenier√≠a inversa tiene muchas aplicaciones en el mundo actual y es aplicada por todo tipo de empresas, de todos los √°mbitos tecnol√≥gicos. Algunos de los usos principales son: Investigar, analizar y comprender la tecnolog√≠a utilizada por otras naciones o por otras empresas. Analizar los productos de la competencia para analizar si infringen alguna patente de otra empresa. Desarrollar productos que sean compatibles con otros productos, sin tener acceso a los detalles t√©cnicos de estos √∫ltimos. Comprobar la seguridad de un producto, en inform√°tica por ejemplo, para conocer las brechas de seguridad que puede tener un programa. Actualmente la ingenier√≠a inversa se divide en dos grandes vertientes: ingenier√≠a inversa de producto e ingenier√≠a inversa de software; en la primera entran todos aquellos productos f√≠sicos tales como m√°quinas, componentes electr√≥nicos, dispositivos, etc., y en la segunda protocolos, c√≥digos de programaci√≥n, aplicaciones digitales, etc. No es una definici√≥n completamente establecida pero es la m√°s aceptada actualmente. ¬øIngenier√≠a inversa? Las tareas habituales de la ingenier√≠a implican seguir la direcci√≥n de lo espec√≠fico a lo general, pero la ingenier√≠a inversa indica que las labores deben realizarse siguiendo la direcci√≥n opuesta, de lo general a lo espec√≠fico, algo poco com√∫n para los ingenieros, que implica invertir el modo de pensamiento y que sin duda es un gran ejercicio de pensamiento adem√°s que es una habilidad de mucha importancia hoy en d√≠a. ¬øM√©todo de aprendizaje? La ingenier√≠a inversa no es un m√©todo de soluci√≥n sino m√°s bien de aprendizaje, como implica analizar un objeto hasta el punto de comprender cada uno de sus componentes y sus funciones entonces la cantidad de conocimientos obtenida ser√° bastante, pero solo hemos aprendido, para solucionar el problema deberemos aplicar lo aprendido y comenzar de cero nuevamente. √âtica Si se sigue un proceso de ingenier√≠a inversa bien establecido no tiene porque haber ning√∫n problema legal; esto implica cumplir al pie de la letra el objetivo de la ingenier√≠a inversa: obtener un producto que haga lo mismo pero que sea nuevo, que no aplique los mismos principios de funcionamiento del producto analizado; es decir, la ingenier√≠a inversa se debe utilizar solamente para conocer un producto, con el fin de hacer uno que haga lo mismo pero de otro modo. . ","date":"27-10-2018","objectID":"/posts/2018/dev/014/:0:0","tags":["n9+","dev"],"title":"Ingenier√≠a inversa :: ¬øQu√© sacar de esto?","uri":"/posts/2018/dev/014/"},{"categories":["dev"],"content":"¬øTe has preguntado cu√°nto tiempo se tarda en aplicar nieve a todas las texturas de tu juego? Probablemente muchas veces. Me gustar√≠a mostrarle c√≥mo crear un efecto de imagen (sombreado de espacio de pantalla) que cambiar√° inmediatamente la temporada de su escena en Unity. . . ¬øComo funciona? En las im√°genes de arriba puedes ver dos capturas de pantalla que presentan la misma escena. La √∫nica diferencia es que en el segundo habilit√© el efecto de nieve en la c√°mara. No se han realizado cambios en ninguna de las texturas. ¬øC√≥mo es posible? La teor√≠a es realmente simple. El supuesto es que debe haber nieve cuando la imagen normal de un p√≠xel renderizado est√° orientada hacia arriba (suelo, techos, etc.) Tambi√©n debe haber una transici√≥n suave entre la textura de la nieve y la textura original si la imagen est√° orientada hacia cualquier otra direcci√≥n (pinos, paredes). Obteniendo los datos necesarios Para que el efecto presentado funcione, requiere al menos dos cosas: Rendering path configurada como deferred (Por alguna raz√≥n, no pude adelantar la reproducci√≥n para que funcione correctamente con este efecto. El sombreador de profundidad se proces√≥ incorrectamente. Si tiene alguna idea de por qu√© podr√≠a ser, h√°zmelo saber en el repositorio.) Camera.depthTextureMode establecido en DepthNormals GitHub\rYa que la segunda opci√≥n puede ser configurada f√°cilmente por el propio script de efectos de imagen, la primera opci√≥n puede causar un problema si su juego ya est√° utilizando forward rendering path. Configurar Camera.depthTextureMode como DepthNormals nos permitir√° leer la profundidad de la pantalla (la distancia a la que se ubican los p√≠xeles de la c√°mara) y las normales (direcci√≥n opuesta). Ahora, si nunca ha creado un Efecto de imagen antes, debe saber que se crean a partir de al menos un script y al menos un shader. Por lo general, este shader, en lugar de representar un objeto 3D, muestra la imagen en pantalla completa de los datos de entrada. En nuestro caso, los datos de entrada son una imagen renderizada por la c√°mara y algunas propiedades configuradas por el usuario. ScreenSpaceSnow.cs #region Librerias using UnityEngine; #endregion namespace MoonAntonio { [ExecuteInEditMode] public class ScreenSpaceSnow : MonoBehaviour { #region Variables public Texture2D SnowTexture; public Color SnowColor = Color.white; public float SnowTextureScale = 0.1f; [Range(0, 1)] public float BottomThreshold = 0f; [Range(0, 1)] public float TopThreshold = 1f; private Material _material; #endregion #region Metodos private void OnEnable() { // Crea dinamicamente un material que utilizara nuestro shader _material = new Material(Shader.Find(\"MoonAntonio/ScreenSpaceSnow\")); // Decir a la camara que cree profundidad y normales. this.GetComponent\u003cCamera\u003e().depthTextureMode |= DepthTextureMode.DepthNormals; } private void OnRenderImage(RenderTexture src, RenderTexture dest) { // Establecer propiedades de shader _material.SetMatrix(\"_CamToWorld\", GetComponent\u003cCamera\u003e().cameraToWorldMatrix); _material.SetColor(\"_SnowColor\", SnowColor); _material.SetFloat(\"_BottomThreshold\", BottomThreshold); _material.SetFloat(\"_TopThreshold\", TopThreshold); _material.SetTexture(\"_SnowTex\", SnowTexture); _material.SetFloat(\"_SnowTexScale\", SnowTextureScale); // Ejecutar el shader en la textura de entrada(src) y escribir en la salida(dest) Graphics.Blit(src, dest, _material); } #endregion } } Es solo la configuraci√≥n b√°sica, no generar√° nieve. Ahora comienza la verdadera diversi√≥n ‚Ä¶ El shader Nuestro shader de nieve debe ser un sombreado no iluminado, no queremos aplicarle ninguna informaci√≥n de luz ya que en el espacio de la pantalla no hay luz. Aqu√≠ est√° la plantilla b√°sica: ScreenSpaceSnow.shader Shader \"MoonAntonio/ScreenSpaceSnow\" { Properties { _MainTex(\"Texture\", 2D) = \"white\" {} } SubShader { Cull Off ZWrite Off ZTest Always Pass { CGPROGRAM #pragma vertex vert #pragma fragment frag #include \"UnityCG.cginc\" struct appdata { float4 vertex : POSITION; float2 uv : TEXCOORD0;","date":"18-10-2018","objectID":"/posts/2018/dev/013/:0:0","tags":["n9+","dev"],"title":"Unity Shader de acumulaci√≥n","uri":"/posts/2018/dev/013/"},{"categories":["comun"],"content":"Hola a todos, como ya supongo que sabr√©is ayer se estreno el anime de SAO Alicization que corresponde a los Vol√∫menes 9 y 10. La tercera temporada se adapta al arco Alicization , que toma parte en los vol√∫menes 9-18 de la serie de novelas ligeras de Kawahara. En 2026, le ofrecen a Kirito un trabajo con Rath. Le pidieron que trabaje para probar un nuevo tipo de equipo FullDive conocido como el Traductor de alma. Pero Rath no ten√≠a planes de hacer una nueva consola de juegos FullDive. En cambio, la empresa est√° trabajando para crear una nueva IA militar. Trayendo a Kirito para que act√∫e como una influencia humana en la inteligencia artificial, descubre que Rath ya hab√≠a atrapado el alma de un ni√±o en la maquina. Cuando sacaron a Kirito de la m√°quina, Rath bloque√≥ sus recuerdos de su tiempo, pero Kirito descubre que hay muchos que quieren que guarde silencio sobre su tiempo con la IA, una ni√±a llamada Alicia. Para aquellos que no est√°n familiarizados con Sword Art Online, la serie fue originalmente creada por Reki Kawahara con ilustraciones proporcionadas por abec. La serie sigue a un ni√±o llamado Kirito despu√©s de que √©l y miles de jugadores quedan atrapados en un videojuego de realidad virtual conocido como Sword Art Online. Los jugadores deben unirse para derrotar el √∫ltimo nivel del juego para escapar, pero Kirito y su gremio saben que hay m√°s detr√°s de su prisi√≥n de lo que originalmente se les dijo.La pr√≥xima temporada ser√° la adaptaci√≥n de ‚ÄúAlicization‚Äù. . ","date":"07-10-2018","objectID":"/posts/2018/comun/019/:0:0","tags":["n9+","comun"],"title":"El anime de SAO Alicizacion","uri":"/posts/2018/comun/019/"},{"categories":["dise√±o de videojuegos"],"content":"Esta serie de ayudas est√°n dise√±ada para una introducci√≥n r√°pida al dise√±o de videojuegos. Introducir√° brevemente la mayor√≠a de las caracter√≠sticas, pero desde la perspectiva del uso en casos de uso general, y con suerte, ser√° m√°s interesante aprender de √©l. Escribir√© asumiendo que no tienes conocimientos de dise√±o. ¬øC√≥mo empezar? Necesitar√° alg√∫n programa de documentos(Word o Doc), libreta y papel. Se explicaran diversos conceptos de programaci√≥n, arte, animaci√≥n entre muchas otras.Si encuentra que una caracter√≠stica o enlace no funciona, siempre puede ponerse en contacto con mi email, ¬øPor qu√© libreta y papel? Todo tiene una base, y como veremos aqu√≠, los videojuegos son la evoluci√≥n de los juegos, por tanto primero crearemos sobre papel y generaremos una soluci√≥n inicial f√≠sica, que posteriormente pueda ser implementada en un videojuego. ¬øD√≥nde puedo obtener m√°s informaci√≥n? Para aquellos de ustedes con miedo a google, aqu√≠ hay algunos enlaces convenientes‚Ä¶ ¬†http://www.gamasutra.com/ ¬†https://www.gamedev.net/ ¬†https://moonantonio.github.io Empecemos Tanto aquellos que llev√©is mucho tiempo en el desarrollo de videojuegos, como los que os hab√©is iniciado ahora y os hab√©is tomado vuestro tiempo en buscar informaci√≥n, seguro que ya hab√©is le√≠do multitud de art√≠culos que tratan de lo mismo, aunque cada uno desde una perspectiva diferente. No obstante, este blog va dirigido tambi√©n a aquellos que acaban de comenzar su andadura, as√≠ pues no puedo hacer o√≠dos sordos a estas personas que desean dise√±ar videojuegos y andan perdidas sin saber muy bien c√≥mo empezar. Adem√°s, al final del art√≠culo enlazar√© a muy distintas fuentes, tanto en castellano como en ingl√©s, para que quien quiera pueda seguir investigando y obteniendo m√°s puntos de vista acerca de este tema. Lo primero que hay que tener claro es que hay muchos perfiles adecuados que ayudan para ser dise√±ador de videojuegos, pero hay unos requisitos comunes que todos deben cumplir. Lo segundo que hay que entender es que se debe tener un esp√≠ritu autodidacta y hay que actuar. Estas dos cosas: capacidad de aprendizaje mantenida y capacidad de automotivaci√≥n para lanzarse a realizar peque√±os proyectos y acabarlos, es crucial. Muchos grupos y personas se han lanzado tras proyectos inalcanzables que se quedaron en tinta y en papel. . Otra cosa que quiero comentar es que a lo largo de estas l√≠neas no se dicen verdades absolutas, pero tambi√©n quiero que quede transparente mi intenci√≥n de que al final tengas muchos m√°s conceptos claros e inclusive te dar√© herramientas para que sepas d√≥nde buscar. Pasemos ahora al primer punto: los perfiles. Vamos a estudiarlos de forma gen√©rica para luego pasar a los requisitos. Los perfiles que a continuaci√≥n expongo puede que tengan mucho o nada que ver contigo, pero es m√°s que probable que si est√°s leyendo este art√≠culo te sientas identificado en m√°s de un aspecto. -Programador.- hay personas que piensan que es fundamental programar para ser dise√±ador de videojuegos. Esto no es totalmente cierto, aunque lo trataremos en profundidad m√°s adelante. El perfil de programador como dise√±ador de videojuegos es el de aquella persona que es capaz de realizar sus propios juegos, dise√±arlos, prototiparlos y desarrollar el c√≥digo final. Generalmente usan unity, a7, flash, XNA, y muchos otros entornos de desarrollo que han aprendido a utilizar por s√≠ mismos. Los hay incluso que se meten con la parte gr√°fica del juego. Muchas personas que encajan con este perfil a menudo venden sus propios juegos en flash para portales de juegos casuales (de hecho conozco a algunos que lo hacen). -Escritor.- es un perfil muy especializado. Por regla general saben todo lo que hay que saber acerca del desarrollo de guiones para videojuegos, narrativa interactiva, etc. Poseen un gran nivel redactando y su capacidad creativa les hace ideales como soporte para un game designer, pero no suplen ‚Äúper se‚Äù algunas necesidades fundamentales que requiere dicha tarea, como puede ser el desarrollo","date":"26-09-2018","objectID":"/posts/2018/dise%C3%B1o/001/:0:0","tags":["n9+","csharp","dise√±o"],"title":"Dise√±o de Videojuegos - Introducci√≥n","uri":"/posts/2018/dise%C3%B1o/001/"},{"categories":["dev"],"content":"Traducir un juego a m√∫ltiples idiomas es una forma muy efectiva de exponerlo a nuevas audiencias. Sin embargo, puede convertirse en un verdadero dolor de cabeza si no lo hace de forma extensible y mantenible. Un sistema .po es una gran manera de administrar traducciones, y es un sistema √∫til para saber m√°s que solo juegos. Analizar√© formas en que puede ampliar el sistema para que sea m√°s robusto, pero la mayor√≠a de los detalles de estos dependen demasiado de su configuraci√≥n para ser detallados por completo. Algo a tener en cuenta cuando decida traducir, es que su juego ya deber√≠a estar en un estado bastante maduro, ya que hacer traducciones (especialmente por los fan√°ticos) es dif√≠cil lograr que se actualicen cada vez que cambia o agrega texto. Algunas cosas que ya deber√≠a haber configurado al entrar en esto son alg√∫n tipo de sistema de configuraci√≥n, as√≠ como un sistema de interfaz de usuario y un objeto global DontDestroyOnLoad al que tiene acceso su UI. Lo m√°s probable es que lo actualice en alg√∫n momento, ya que incluso al escribir esto not√© algunas optimizaciones que podr√≠a estar haciendo. ","date":"25-09-2018","objectID":"/posts/2018/dev/011/:0:0","tags":["n9+","dev"],"title":"Localizaci√≥n usando .PO","uri":"/posts/2018/dev/011/"},{"categories":["dev"],"content":"Traducciones Omita esta secci√≥n si solo quiere ver el flujo de trabajo, pero encontr√© que este sistema es √∫til para que los fan√°ticos me traduzcan las cosas. Lo mejor que puedes hacer es crear una hoja de c√°lculo de Google Drive y compartir el enlace con los fan√°ticos, que puedes encontrar haciendo publicaciones en los distintos centros para tu juego. ","date":"25-09-2018","objectID":"/posts/2018/dev/011/:1:0","tags":["n9+","dev"],"title":"Localizaci√≥n usando .PO","uri":"/posts/2018/dev/011/"},{"categories":["dev"],"content":"El archivo .PO ¬øQu√© es un archivo .po (objeto port√°til)?. Es una parte del est√°ndar gettext, y se describe en el proyecto GNU de esta manera: Un archivo PO se compone de muchas entradas, cada entrada mantiene la relaci√≥n entre una cadena original no traducida y su correspondiente traducci√≥n. Todas las entradas en un archivo PO generalmente pertenecen a un solo proyecto, y todas las traducciones se expresan en un solo idioma de destino. Una entrada de archivo PO tiene la siguiente estructura esquem√°tica: white-space\r# translator-comments\r#. extracted-comments\r#: reference‚Ä¶\r#, flag‚Ä¶\r#| msgid previous-untranslated-string\rmsgid untranslated-string\rmsgstr translated-string ¬øY qu√©? ¬øEs solo un archivo con una clave y un valor y algunos metadatos? No del todo, hay dos partes m√°s para usar un sistema .po que lo haga brillar realmente. Los archivos .pot y los editores. Un .pot (Portable Object Template) es lo que se usa para generar sus archivos .po en un editor, y se puede usar para actualizar sus archivos .po cuando agrega nuevas traducciones. Tiene la misma estructura exacta que un archivo .po normal, pero con una cadena traducida vac√≠a. ¬°No intente administrar traducciones agregando entradas a archivos .po, actualice desde .pot para garantizar la coherencia! El editor m√°s popular es Poedit. Que se ve as√≠, he marcado con un c√≠rculo el bot√≥n ‚ÄòActualizar desde POT‚Äô: . ","date":"25-09-2018","objectID":"/posts/2018/dev/011/:2:0","tags":["n9+","dev"],"title":"Localizaci√≥n usando .PO","uri":"/posts/2018/dev/011/"},{"categories":["dev"],"content":"Implementaci√≥n con Unity3D Es probable que este sistema necesite ajustes en su situaci√≥n exacta, pero intentar√© mantenerlo lo m√°s gen√©rico posible. Aunque algunos de los pasos que tendr√° que averiguar sera, d√≥nde llamar algunas cosas por su cuenta. Vamos a usar las cadenas en ingl√©s como nuestras teclas, ¬°esto es muy importante! Mantenga su .pot actualizado. La idea es que dado que el juego comenzar√° en ingl√©s cada vez que podamos tomar los valores predeterminados para el cuadro de texto y usarlos como ambas claves y los valores del idioma ingl√©s. Los archivos principales con los que trabajaremos son: template.pot - Almacenado en Recursos/Idiomas (crear si no existe) spanish.po - Almacenado en Recursos/Idiomas (crear si no existe) LanguageManager.cs: adjunto y referenciado por el administrador de juego global persistente UILocalizeText.cs: se adjunta a cada objeto de texto de UI, controla la actualizaci√≥n de ese texto Debe adjuntar UILocalizeText.cs a cada cuadro de texto que desee traducir y tener un valor para √©l en los archivos .po y .pot. Convierta LanguageManger en un objeto global no destruir en la carga, llame a LoadLanguage() cuando cambie de idioma y luego UpdateAllTextBoxes() cuando necesite actualizar su UI. Nota: desde que actualic√© Unity, parece que no reconoce los archivos .po como archivos de texto y no puede encontrar los archivos de traducci√≥n. Agregar .txt despu√©s de .po lo corrige (es decir, spanish.po.txt), pero para cargarlo en Poedit debe escribir el nombre en el cuadro de di√°logo. ","date":"25-09-2018","objectID":"/posts/2018/dev/011/:3:0","tags":["n9+","dev"],"title":"Localizaci√≥n usando .PO","uri":"/posts/2018/dev/011/"},{"categories":["dev"],"content":"Scripts En los siguientes scripts todo lo que dice YourGameManager debe ser reemplazado por sus sistemas. Intent√© comentar los archivos para ser bastante descriptivos. Para configurar y usar estos: 1 - Crea tres cuadros de texto con valores que corresponden a los valores en template.pot 2 - Adjunte UILocalizeText.cs a estos cuadros de texto 3 - Init LevelManager.cs 4 - LoadLanguage (‚Äúespa√±ol‚Äù) 5 - UpdateAllTextBoxes() ","date":"25-09-2018","objectID":"/posts/2018/dev/011/:4:0","tags":["n9+","dev"],"title":"Localizaci√≥n usando .PO","uri":"/posts/2018/dev/011/"},{"categories":["dev"],"content":"Template.POT #, fuzzy\rmsgid \"\"\rmsgstr \"\"\r\"Project-Id-Version: Test\\n\"\r\"POT-Creation-Date: 2017-02-12 09:12-0500\\n\"\r\"PO-Revision-Date: 2015-10-27 19:11-0400\\n\"\r\"Last-Translator: \\n\"\r\"Language-Team: \\n\"\r\"Language: en\\n\"\r\"MIME-Version: 1.0\\n\"\r\"Content-Type: text/plain; charset=UTF-8\\n\"\r\"Content-Transfer-Encoding: 8bit\\n\"\r\"X-Generator: Poedit 1.8.11\\n\"\r\"X-Poedit-Basepath: .\\n\"\r\"Plural-Forms: nplurals=2; plural=(n != 1);\\n\"\r\"X-Poedit-KeywordsList: --keyword[-]\\n\"\r\"X-Poedit-SearchPath-0: .\\n\"\rmsgid \"GOLD\"\rmsgstr \"\"\rmsgid \"SILVER\"\rmsgstr \"\"\rmsgid \"BRONZE\"\rmsgstr \"\" ","date":"25-09-2018","objectID":"/posts/2018/dev/011/:4:1","tags":["n9+","dev"],"title":"Localizaci√≥n usando .PO","uri":"/posts/2018/dev/011/"},{"categories":["dev"],"content":"Spanish.po.txt #, fuzzy\rmsgid \"\"\rmsgstr \"\"\r\"Project-Id-Version: Test\\n\"\r\"POT-Creation-Date: 2017-02-12 09:12-0500\\n\"\r\"PO-Revision-Date: 2015-10-27 19:11-0400\\n\"\r\"Last-Translator: \\n\"\r\"Language-Team: \\n\"\r\"Language: en\\n\"\r\"MIME-Version: 1.0\\n\"\r\"Content-Type: text/plain; charset=UTF-8\\n\"\r\"Content-Transfer-Encoding: 8bit\\n\"\r\"X-Generator: Poedit 1.8.11\\n\"\r\"X-Poedit-Basepath: .\\n\"\r\"Plural-Forms: nplurals=2; plural=(n != 1);\\n\"\r\"X-Poedit-KeywordsList: --keyword[-]\\n\"\r\"X-Poedit-SearchPath-0: .\\n\"\rmsgid \"GOLD\"\rmsgstr \"ORO\"\rmsgid \"SILVER\"\rmsgstr \"PLATA\"\rmsgid \"BRONZE\"\rmsgstr \"BRONCE\" ","date":"25-09-2018","objectID":"/posts/2018/dev/011/:4:2","tags":["n9+","dev"],"title":"Localizaci√≥n usando .PO","uri":"/posts/2018/dev/011/"},{"categories":["dev"],"content":"LanguajeManager.cs using UnityEngine; using System.Collections; using System.IO; using System.Collections.Generic; using System; public class LanguageManager : MonoBehaviour { //This is where the current loaded language will go private static Hashtable textTable; [HideInInspector] //Just a reference for the current language, default to english public string CurrentLanguage = \"english\"; //Run this when you are ready to start the language process, you usually want to do this after everything has loaded public void Init() { //You should use an enum for storing settings that are a unique list, //This gets a string representation of an enum, CurrentLanguage = Enum.GetName(typeof(Settings.Languages), (int)YourGameManager.Settings.Language); //Pass that language into LoadLanguage, remember we are in init so this should only run once. LoadLanguage(CurrentLanguage); } //You call this when you want to update all text boxes with the new translation. //Run this after Init //Run this whenever you run LoadLanguage //Run this whenever you load a new scene and want to translate the new UI public void UpdateAllTextBoxes() { //Find all active and inactive text boxes and loop through 'em UILocalizeText[] temp = Resources.FindObjectsOfTypeAll\u003cUILocalizeText\u003e(); foreach (UILocalizeText text_box in temp) { //Run the update translation function on each text text_box.UpdateTranslation(); } } //Run this whenever a language changes, like in when a setting is changed - then run UpdateAllTextBoxes //This is based off of http://wiki.unity3d.com/index.php?title=TextManager, though heavily modified and expanded public void LoadLanguage(string lang) { CurrentLanguage = lang; if(lang == \"english\") { UpdateAllTextBoxes(); } else if (lang != \"english\") { string fullpath = \"Languages/\" + lang + \".po\"; // the file is actually \".txt\" in the end TextAsset textAsset = (TextAsset)Resources.Load(fullpath); if (textAsset == null) { Debug.Log(\"[TextManager] \" + fullpath + \" file not found.\"); return; } else { Debug.Log(\"[TextManager] loading: \" + fullpath); if (textTable == null) { textTable = new Hashtable(); } textTable.Clear(); StringReader reader = new StringReader(textAsset.text); string key = null; string val = null; string line; while ((line = reader.ReadLine()) != null) { if (line.StartsWith(\"msgid \\\"\")) { key = line.Substring(7, line.Length - 8).ToUpper(); } else if (line.StartsWith(\"msgstr \\\"\")) { val = line.Substring(8, line.Length - 9); } else { if (key != null \u0026\u0026 val != null) { // TODO: add error handling here in case of duplicate keys textTable.Add(key, val); key = val = null; } } } reader.Close(); } } } //This handles selecting the value from the translation array and returning it, the UILocalizeText calls this public string GetText(string key) { string result = \"\"; if (key != null \u0026\u0026 textTable != null) { if (textTable.ContainsKey(key)) { result = (string)textTable[key]; } else { } } return (string)result; } } ","date":"25-09-2018","objectID":"/posts/2018/dev/011/:4:3","tags":["n9+","dev"],"title":"Localizaci√≥n usando .PO","uri":"/posts/2018/dev/011/"},{"categories":["dev"],"content":"UILocalizeText.cs using System.Collections; using System.Collections.Generic; using UnityEngine; using UnityEngine.UI; public class UILocalizeText : MonoBehaviour { //This instances key, as well as the english translation [HideInInspector] public string TranslationKey = \"\"; [HideInInspector] public Text TextToTranslate; //References to text values string OriginalText = \"\"; string TranslatedText = \"\"; //This gets run automatically if the original text hasn't been set when you go to update it. //You shouldn't need to manually run this from anywhere public void Init() { //Grab the TextToTranslate if we haven't if(TextToTranslate == null) TextToTranslate = GetComponent\u003cText\u003e(); //Grab the original value of the text before we update it if(TextToTranslate != null) OriginalText = TextToTranslate.text; //Set the translation key to the original english text if(TranslationKey == \"\") TranslationKey = OriginalText; } //This gets called from LanguageManager //One thing I noticed is that it might be nicer to just pass in the correct string to this rather than go grap it from LanguageManager public void UpdateTranslation() { //If original text is empty, then this object hasn't been initiated so it should do that if (OriginalText == \"\") Init(); //If the object has no Text object then we shouldn't try to set the text so just stop if (TextToTranslate == null) return; if(YourGameManager.LanguageManager.CurrentLanguage != \"english\" \u0026\u0026 TranslationKey != \"\") { string new_text = YourGameManager.LanguageManager.GetText(TranslationKey.ToUpper()); if (new_text != \"\") { TextToTranslate.text = new_text; } else { // Debug.Log(\"Key \" + OriginalText + \" doesn't have an entry in this language\"); } } else if(YourGameManager.LanguageManager.CurrentLanguage == \"english\") { if(TextToTranslate != null \u0026\u0026 OriginalText != null) TextToTranslate.text = OriginalText; } } } Bueno con esto, puedes hacer la prueba y comprobar que ya tienes un sistema simple para traducir tu juego a diversos idiomas. . ","date":"25-09-2018","objectID":"/posts/2018/dev/011/:5:0","tags":["n9+","dev"],"title":"Localizaci√≥n usando .PO","uri":"/posts/2018/dev/011/"},{"categories":["aprende cpp con unreal"],"content":"Esta serie de ayudas est√°n dise√±ada para una introducci√≥n r√°pida a la programaci√≥n en C++ usando Unreal. Introducir√° brevemente la mayor√≠a de las caracter√≠sticas del lenguaje, pero desde la perspectiva del uso dentro de Unreal en lugar de casos de uso general, y con suerte, ser√° m√°s interesante aprender de √©l. Escribir√© asumiendo que ya tienes Unreal y tienes una comprensi√≥n b√°sica del programa. ¬øC√≥mo empezar? Necesitar√° el motor Unreal Engine 4. Unreal viene con una copia de Visual Studio, que usar√© para programar. Puede obtener Unreal en unrealengine.com . Tenga en cuenta que si bien intentar√© asegurarme de que los ejemplos aqu√≠ permanezcan compatibles en el futuro con todas las versiones de Unreal, algunas cosas pueden pasar desapercibidas. Si encuentra que una caracter√≠stica o ejemplo no funciona, siempre puede volver a las versiones anteriores del programa el launcher de Epic, en mi caso usare Unreal Engine 4.20.2, ya que es la versi√≥n m√°s estable. Una vez que haya descargado e instalado Unreal, es posible que desee considerar explorar el conjunto de tutoriales de Unreal en UnrealAcademy. ¬øPor qu√© C++ versus otro lenguaje? En √∫ltima instancia, es el unico idioma que soporta Unreal actualmente, aunque hay un tipo de scripting visual llamado Blueprints que usaremos. Los desarrolladores m√°s serios con los que he hablado parecen preferir C++ por su performance. ¬øSe usara Blueprints? Blueprints es una herramienta de scripting visual muy potente y versatil, por ello tambien veremos ciertos aspectos de esta herramienta. Pero el core de nuestros proyectos se realizaran en c++ y unicamente usaremos Blueprints para facilitar el manejo de variables dentro del motor. En resumen, en el desarrollo de un proyecto en Unreal, combinaremos los dos. ¬øD√≥nde puedo obtener m√°s informaci√≥n sobre C++? Para aquellos de ustedes con miedo a google, aqu√≠ hay algunos enlaces convenientes‚Ä¶ ¬†https://msdn.microsoft.com/es-es/library/hh279654.aspx ¬†http://www.cplusplus.com/ ¬†https://docs.unrealengine.com/en-us/Programming Siguiente - Tu primer script\r. ","date":"13-09-2018","objectID":"/posts/2018/cplusplusunreal/001/:0:0","tags":["n9+","cpp","unreal"],"title":"Aprende C++ con Unreal - Introducci√≥n","uri":"/posts/2018/cplusplusunreal/001/"},{"categories":["dev"],"content":" ¬øQuieres saber c√≥mo aprender r√°pidamente la programaci√≥n de videojuegos? Solo haz juegos. Aqu√≠ hay algunos consejos para ayudarlo en el camino: ","date":"10-09-2018","objectID":"/posts/2018/dev/010/:0:0","tags":["n9+","dev"],"title":"¬°Consejos esenciales de Gamedev \u0026 Unity!","uri":"/posts/2018/dev/010/"},{"categories":["dev"],"content":"1. No reinventar la rueda, use las herramientas incorporadas del motor Al trabajar en cualquier motor, como Unity o Unreal Engine, algunos desarrolladores, principalmente provenientes de un campo de ciencias de la computaci√≥n, pueden tener tendencia a inclinarse y comenzar a trabajar en algoritmos o estructuras enormes sin saber si ya existen en el motor. Tengo en mente ejemplos de desarrolladores que intentan recrear el animador de Unity , ¬°o incluso un sistema b√°sico de pathfinding ! Por supuesto, incluso conociendo el motor, escribir sus propias herramientas para que se adapten perfectamente a su proyecto puede ahorrarle mucho tiempo y cubrir los defectos del motor. Pero tenga en cuenta que para un desarrollador de juegos, es importante conocer todas las posibilidades que ofrece el motor. Con este conocimiento, elija qu√© herramientas aprender y cu√°les crear desde cero. ","date":"10-09-2018","objectID":"/posts/2018/dev/010/:1:0","tags":["n9+","dev"],"title":"¬°Consejos esenciales de Gamedev \u0026 Unity!","uri":"/posts/2018/dev/010/"},{"categories":["dev"],"content":"2. Google es tu amigo, la documentaci√≥n tambi√©n Una vez que comience la producci√≥n de su juego, encontrar√° problemas y le faltar√° experiencia en muchas cosas. Cuando lo haga, su primer reflejo deber√≠a ser mirar la documentaci√≥n (ver Unity y Unreal ) . La documentaci√≥n de los motores puede ser gruesa pero realmente √∫til. Puede responder a la mayor√≠a de sus preguntas sobre los componentes del motor, darle acceso a la documentaci√≥n de la API, ayudarle a precisar una sintaxis espec√≠fica y, sobre todo, puede ayudarlo a poner palabras sobre un problema que tenga. Todo esto para llamar a nuestro mejor amigo: ¬° Google ! Independientemente de la consulta que tenga, encontrar√° a alguien que ya la solicit√≥ y recibi√≥ una respuesta. ¬°Es un refuerzo de desarrollo real para poder encontrar soluciones a cualquier problema que tenga! Los principales sitios web que pueden ayudarlo, especialmente con Unity, son answers.unity3d.com , stackoverflow.com y gamedev.stackexchange.com . . ","date":"10-09-2018","objectID":"/posts/2018/dev/010/:2:0","tags":["n9+","dev"],"title":"¬°Consejos esenciales de Gamedev \u0026 Unity!","uri":"/posts/2018/dev/010/"},{"categories":["dev"],"content":"3. Comparte tu experiencia con otros Otra gran fuente de ayuda e inspiraci√≥n son, por supuesto, otras creatividades, de su entorno o en Internet. De hecho, el desarrollo de juegos como muchas otras actividades pueden tomar tantas formas y proyectos que siempre tendr√°s algo que aprender. Por lo tanto, para maximizar su proceso de aprendizaje, alim√©ntese de las experiencias y los fracasos de los dem√°s. Comparte tu trabajo, tendr√° una conversaci√≥n agradable y, en el mejor de los casos, aprender√° maneras de mejorar su trabajo actual y futuro. ","date":"10-09-2018","objectID":"/posts/2018/dev/010/:3:0","tags":["n9+","dev"],"title":"¬°Consejos esenciales de Gamedev \u0026 Unity!","uri":"/posts/2018/dev/010/"},{"categories":["dev"],"content":"4. Haz Game Jams Las Game Jams no son solo una forma de echar un vistazo al desarrollo del juego, sino que son una gran herramienta para estimular tu mente y tus habilidades. El proceso de las Game Jams no es el desarrollo cl√°sico del juego, pero esa es toda su fuerza. De hecho, como ocurre durante un per√≠odo de tiempo realmente corto y fijo, debe prototipar, pensar y decidir r√°pidamente. Adem√°s, debes apuntar a la mec√°nica del juego esencial y mantenerlo simple (¬° este consejo tambi√©n es v√°lido para hacer un juego m√°s grande tambi√©n! ). Es un ejercicio incre√≠ble experimentar nuevas funciones, probar tus habilidades con algo nuevo, ¬°incluso probar y fallar! Puede refrescarse y tomar un descanso en un proyecto largo. En algunas empresas, las Game Jams son un paso importante en el desarrollo de un juego. Se usa para validar un concepto de juego, para probar la viabilidad de un proyecto, estimar el tiempo de desarrollo o cuestionar el alcance. . ","date":"10-09-2018","objectID":"/posts/2018/dev/010/:4:0","tags":["n9+","dev"],"title":"¬°Consejos esenciales de Gamedev \u0026 Unity!","uri":"/posts/2018/dev/010/"},{"categories":["dev"],"content":"5. Reevaluar constantemente tu trabajo ¬°Recuerde siempre volver a evaluar y criticar lo que ha creado! Con un ojo nuevo puede analizar su trabajo anterior, observar sus fuerzas y defectos, y mejorarlo en base a sus nuevos conocimientos. Es un proceso realmente importante y hace que sea m√°s f√°cil desconectarte de tu trabajo. Te permitir√° cortar, eliminar y reiniciar desde cero caracter√≠sticas m√°s libremente cuando sea necesario. ","date":"10-09-2018","objectID":"/posts/2018/dev/010/:5:0","tags":["n9+","dev"],"title":"¬°Consejos esenciales de Gamedev \u0026 Unity!","uri":"/posts/2018/dev/010/"},{"categories":["dev"],"content":"6. S√© organizado y riguroso Algunas personas tienen una naturaleza organizada, y otras no, pero debes ser riguroso y organizado, de lo contrario, t√∫ (o tu equipo) pueden encontrar problemas en el futuro. Puede comenzar a decidir como equipo (si no est√° trabajando solo) en una sintaxis com√∫n, una convenci√≥n de nomenclatura para su c√≥digo, para estar en la misma p√°gina y navegar f√°cilmente a trav√©s de todas sus clases y m√©todos. Si usa Unity, puede basarse en la sintaxis oficial de C# o crear la suya propia, ¬°siempre que todos los miembros de su equipo la respeten! Es exactamente lo mismo con respecto a nombres de assets y jerarqu√≠a de proyectos. Puede utilizar la Convenci√≥n de nombres del motor Unreal o utilizarla como punto de partida. De esta manera, siempre tendr√° un proyecto limpio para integrar convenientemente e incorporar el trabajo de los artistas, sin perderse. . ","date":"10-09-2018","objectID":"/posts/2018/dev/010/:6:0","tags":["n9+","dev"],"title":"¬°Consejos esenciales de Gamedev \u0026 Unity!","uri":"/posts/2018/dev/010/"},{"categories":["dev"],"content":"7. Utiliza herramientas de control de versiones Una vez que haya establecido su jerarqu√≠a y est√© listo para trabajar, debe usar una herramienta de control de versiones para fusionar f√°cilmente el trabajo de todos. No importa qu√© soluciones de control de versiones elija, aseg√∫rese de que todos la usen y sepa c√≥mo trabajar con ella. T√≥mese el tiempo para preparar su proyecto para el control de versiones. Puede evitar grandes conflictos de fusi√≥n y permitir√° que todos trabajen en paz. Incluso cuando se trabaja solo, una herramienta de control de versiones le permite realizar f√°cilmente una copia de seguridad de su trabajo, tambi√©n ramificar su proyecto para experimentar sin temor a perder su progreso. Si est√° usando Git, yo recomiendo la consola de bash o Git Kraken . Es muy visual, intuitivo y ergon√≥mico. Todav√≠a hay algunos errores menores aqu√≠ y all√°, ¬°pero las actualizaciones regulares los reducen gradualmente! . ","date":"10-09-2018","objectID":"/posts/2018/dev/010/:7:0","tags":["n9+","dev"],"title":"¬°Consejos esenciales de Gamedev \u0026 Unity!","uri":"/posts/2018/dev/010/"},{"categories":["dev"],"content":"8. Los plugins pueden salvar tu vida Por supuesto, muchos complementos no son gratuitos, pero comprarlos puede ahorrarle tiempo, por lo que puede ser bueno al menos considerar gastar algunos de sus fondos en complementos que ahorran tiempo. (Siempre y cuando vea esto como un negocio, en el cual, es una inversion de tiempo x dinero) Podr√≠a decir muchas cosas sobre la tienda, pero prefiero solo darte mi paquete de inicio de complementos. Aqu√≠ est√°n todos los complementos que siempre agrego a un proyecto en blanco: DOTween (GRATIS) Tweener real y eficiente con una documentaci√≥n completa y f√°cil de usar. Rewired (45 $) Ahorro de tiempo Sistema de entrada, lo que permite un f√°cil desarrollo para varias plataformas y controladores. Master Audio (30 $) Sistema de integraci√≥n de sonido potente. Odin Inspector ( 35 $ ) Nuevo complemento que le permite personalizar f√°cilmente su inspector. Colorful FX ( 40 $ ) Plugin de post-procesamiento que reagrupa muchos efectos. Post Processing Stack (GRATIS) Unity free post processing plugin. . . ","date":"10-09-2018","objectID":"/posts/2018/dev/010/:8:0","tags":["n9+","dev"],"title":"¬°Consejos esenciales de Gamedev \u0026 Unity!","uri":"/posts/2018/dev/010/"},{"categories":["aprende c# con unity"],"content":"Los Objetos Scriptables son un tipo especial de objeto de datos en Unity. Tienen varios beneficios importantes, pero es posible que no funcionen de manera ideal para cada situaci√≥n. En esta lecci√≥n, cubriremos lo que son y c√≥mo usarlos. GitHub\rGitlab\rIntroducci√≥n a los Objetos Scriptables Puede pensar en un objeto programable como un objeto destinado solo a contener datos. Si ha estado utilizando clases o estructuras tradicionales de C# para objetos simples solo de datos, podr√≠a utilizarlas en su lugar. Por supuesto, usted se estar√° preguntando ‚Äúpor qu√©‚Äù le gustar√≠a usar un Objeto Scriptable. Aqu√≠ hay algunos pros y contras: ","date":"04-09-2018","objectID":"/posts/2018/csharpunity/012/:0:0","tags":["n9+","csharp","unity"],"title":"Aprende C# con Unity - Scriptable Objects","uri":"/posts/2018/csharpunity/012/"},{"categories":["aprende c# con unity"],"content":"Pros Pueden sobrevivir a una recarga de escena (como cuando construyes tus scripts o cuando ingresas y sales del modo de reproducci√≥n). Se guardan por referencia, mientras que las clases y estructuras normales se serializan como copias completas. Esto puede ayudarlo a evitar la duplicaci√≥n de datos. Pueden manejar el polimorfismo, mientras que las clases normales terminan siendo tratadas como la clase base. Se pueden guardar como un asset del proyecto. No necesitan estar adjuntos a GameObjects. ","date":"04-09-2018","objectID":"/posts/2018/csharpunity/012/:0:1","tags":["n9+","csharp","unity"],"title":"Aprende C# con Unity - Scriptable Objects","uri":"/posts/2018/csharpunity/012/"},{"categories":["aprende c# con unity"],"content":"Contras Debe heredar de ScriptableObject, lo que puede romper muchas de sus opciones arquitect√≥nicas o de dise√±o. No puede crearlos usando constructores normales, sino que debe usar ‚ÄúCreateInstance‚Äù en su lugar. Los beneficios de serializaci√≥n no son igualmente aplicables en tiempo de ejecuci√≥n. He creado varias mini ejemplos para aclarar estos puntos. Las dos primeras demostraciones muestran c√≥mo podr√≠a encontrarse con problemas si no estuviera usando objetos. Las dos demos siguientes muestran c√≥mo ScriptableObjects supera esos mismos problemas. ","date":"04-09-2018","objectID":"/posts/2018/csharpunity/012/:0:2","tags":["n9+","csharp","unity"],"title":"Aprende C# con Unity - Scriptable Objects","uri":"/posts/2018/csharpunity/012/"},{"categories":["aprende c# con unity"],"content":"Ejemplo 1 :: P√©rdida de referencias de objeto en la serializaci√≥n Comencemos con algunos ejemplos de serializaci√≥n. Comience por crear un nuevo script llamado ‚ÄúDemo1‚Äù y otro llamado ‚ÄúDemo1Data‚Äù, tambi√©n agregue un script de editor llamado ‚ÄúDemo1Inspector‚Äù: #region Librerias using UnityEngine; #endregion namespace MoonAntonio { public class Demo1 : MonoBehaviour { public Demo1Data dataA; public Demo1Data dataB; } } Este script tendr√° dos copias de la misma instancia de ‚ÄúDemo1Data‚Äù. Usaremos un script editor para crear y asignar sus valores. #region Librerias using UnityEngine; #endregion namespace MoonAntonio { [System.Serializable] public class Demo1Data { public int value; } } Este script muestra una clase C# est√°ndar muy simple. Se puede serializar, gracias a la etiqueta ‚Äú[System.Serializable]‚Äù, pero Unity no lo manejar√° perfectamente, lo que se demostrar√° pronto. #region Librerias using UnityEngine; using UnityEditor; #endregion namespace MoonAntonio { [CustomEditor(typeof(Demo1))] public class Demo1Inspector : Editor { public override void OnInspectorGUI() { DrawDefaultInspector(); Demo1 myTarget = (Demo1)target; if (GUILayout.Button(\"Crear Data\")) { myTarget.dataA = new Demo1Data(); myTarget.dataB = myTarget.dataA; } } } } Este script proporcionar√° un bot√≥n en el inspector de nuestro componente que crear√° una nueva instancia de ‚ÄúDemo1Data‚Äù y la asignar√° a ambos campos en el script ‚ÄúDemo1‚Äù. IMPORTANTE : el script del editor debe agregarse a una carpeta ‚ÄúEditor‚Äù o no funcionar√° correctamente. Adelante y crea una nueva escena. Agregue la ‚ÄúDemo1‚Äù como componente a cualquier objeto, crear un nuevo objeto de juego vac√≠o o incluso adjuntarlo a la c√°mara. Luego mira en el inspector. Unity crear√° autom√°ticamente nuevas instancias de ‚ÄúDemo1Data‚Äù para ambos campos simplemente mirando el objeto en el inspector. Puede asignar cualquier valor que desee a cada uno de los campos ‚Äúvalue‚Äù. Si ingresa y sale del modo de reproducci√≥n, los valores incluso persistir√°n, hasta ahora todo bien. Salga del modo de reproducci√≥n (si a√∫n no lo hizo), luego use el bot√≥n ‚ÄúCrear data‚Äù en el inspector. El valor para ambos campos deber√≠a volver a ‚Äò0‚Äô porque ambos campos ahora se refieren a la misma instancia nueva. Si modifica el campo de valor de ‚ÄúdataB‚Äù, deber√≠a ver el campo de valor de la actualizaci√≥n ‚ÄúdataA‚Äù para que coincida en consecuencia. Sigue luciendo bien ‚Ä¶ al menos hasta que ingrese y salga del modo de reproducci√≥n. Pru√©balo, luego modifica el valor de ‚ÄúdataB‚Äù una vez m√°s. Uh oh, ¬°los dos ya no est√°n haciendo referencia al mismo objeto! Unity ha creado una copia completa del objeto original para ambos campos. ","date":"04-09-2018","objectID":"/posts/2018/csharpunity/012/:1:0","tags":["n9+","csharp","unity"],"title":"Aprende C# con Unity - Scriptable Objects","uri":"/posts/2018/csharpunity/012/"},{"categories":["aprende c# con unity"],"content":"Demo 2 :: P√©rdida de tipo de objeto en la serializaci√≥n Esta demostraci√≥n mostrar√° c√≥mo Unity no puede serializar correctamente el tipo de un objeto. Puede encontrar este problema con una lista polim√≥rfica de objetos. Crea lo siguiente: #region Librerias using UnityEngine; #endregion namespace MoonAntonio { public class Demo2 : MonoBehaviour { public Demo2Data[] dataArray; } } Este script tendr√° una matriz de objetos. Cada objeto compartir√° una clase base - ‚ÄúDemo2Data‚Äù, pero en realidad se instanciar√° como una subclase. #region Librerias using UnityEngine; #endregion namespace MoonAntonio { [System.Serializable] public class Demo2Data { public string name; public override string ToString() { return string.Format(\"[{0}]\", name); } } [System.Serializable] public class Demo2NumberData : Demo2Data { public int number; public override string ToString() { return string.Format(\"[{0}, {1}]\", name, number); } } [System.Serializable] public class Demo2BoolData : Demo2Data { public bool toggle; public override string ToString() { return string.Format(\"[{0}, {1}]\", name, toggle); } } } Aqu√≠ hay tres clases, una clase base llamada ‚ÄúDemo2Data‚Äù y dos subclases de la misma. Tenga en cuenta que nunca instanciaremos una copia de la clase base directamente. #region Librerias using UnityEngine; using UnityEditor; #endregion namespace MoonAntonio { [CustomEditor(typeof(Demo2))] public class Demo2Inspector : Editor { public override void OnInspectorGUI() { DrawDefaultInspector(); Demo2 myTarget = (Demo2)target; if (GUILayout.Button(\"Crear Data\")) { var dataA = new Demo2NumberData(); dataA.name = \"Demo2NumberData\"; dataA.number = UnityEngine.Random.Range(1, 100); var dataB = new Demo2BoolData(); dataB.name = \"Demo2BoolData\"; dataB.toggle = UnityEngine.Random.value \u003e 0.5; myTarget.dataArray = new Demo2Data[] { dataA, dataB }; } if (GUILayout.Button(\"Log\")) { foreach (var data in myTarget.dataArray) { Debug.Log(data.ToString()); } } } } } Este script proporcionar√° algunos botones en el inspector de nuestro componente. El primero est√° etiquetado como ‚ÄúCrear data‚Äù e instanciar√° cada una de nuestras subclases de datos y las asignar√° a la matriz de datos de nuestro script. El segundo bot√≥n est√° etiquetado como ‚ÄúLog‚Äù y har√° que cada objeto en la matriz imprima sus valores en la ventana de la consola. IMPORTANTE : el script del editor debe agregarse a una carpeta ‚ÄúEditor‚Äù o no funcionar√° correctamente. Adelante y crea una nueva escena. Agregue la ‚ÄúDemo2‚Äù como un componente a cualquier objeto del juego, como crear un nuevo objeto de juego vac√≠o o incluso adjuntarlo a la c√°mara. Luego mira en el inspector. Unity crear√° autom√°ticamente una matriz vac√≠a de datos simplemente mirando el objeto en el inspector. Llenemos nuestro objeto con datos haciendo clic en el bot√≥n ‚ÄúCrear datos‚Äù. Deber√≠a ver que la matriz contiene ahora dos objetos. Aunque la clase de datos base y sus subclases tienen la etiqueta ‚Äú[System.Serializable]‚Äù, no ver√° los campos agregados para los campos ‚Äúnumber‚Äù o ‚Äútoggle‚Äù de las instancias reales. Esto se debe a que Unity los trata como a la clase base, que solo conoce el ‚Äúnombre‚Äù del objeto. Sin embargo, los datos todav√≠a est√°n all√≠ (al menos por el momento). Haga clic en el bot√≥n ‚ÄúLog‚Äù y deber√≠a ver la descripci√≥n completa. En una de mis propias ejecuciones vi salidas como las siguientes: [Demo2NumberData, 84] [Demo2BoolData, False] Se ve bien hasta ahora, ¬øverdad? Bueno, veamos si puede sobrevivir a una recarga de escena. Adelante, ingrese y salga del modo de reproducci√≥n. Ahora presione el bot√≥n ‚ÄúLog‚Äù una vez m√°s. Deber√≠a ver un resultado como este: [Demo2NumberData] [Demo2BoolData] Al igual que Unity no sab√≠a c√≥mo mostrar los objetos correctamente, ¬°tampoco sab√≠a c√≥mo serializarlos correctamente! ¬°Ambos objetos ahora son instancias de la clase base y se pierden sus datos de subclase! ","date":"04-09-2018","objectID":"/posts/2018/csharpunity/012/:2:0","tags":["n9+","csharp","unity"],"title":"Aprende C# con Unity - Scriptable Objects","uri":"/posts/2018/csharpunity/012/"},{"categories":["aprende c# con unity"],"content":"Demo 3 :: Las referencias a objetos Scriptable sobreviven a la serializaci√≥n Esta vez recrearemos la Demo 1, excepto que usaremos un Objeto Scriptable para nuestros datos serializados en lugar de una clase C# est√°ndar. Crea lo siguiente: #region Librerias using UnityEngine; #endregion namespace MoonAntonio { public class Demo3 : MonoBehaviour { public Demo3Data dataA; public Demo3Data dataB; } } #region Librerias using UnityEngine; #endregion namespace MoonAntonio { [System.Serializable] public class Demo3Data : ScriptableObject { public int value; } } #region Librerias using UnityEngine; using UnityEditor; #endregion namespace MoonAntonio { [CustomEditor(typeof(Demo3))] public class Demo3Inspector : Editor { public override void OnInspectorGUI() { DrawDefaultInspector(); Demo3 myTarget = (Demo3)target; if (GUILayout.Button(\"Crear Data\")) { myTarget.dataA = ScriptableObject.CreateInstance\u003cDemo3Data\u003e(); myTarget.dataB = myTarget.dataA; } } } } Crea una nueva escena y adjunta el script Demo3 a un objeto. A diferencia de Demo1, el script Demo3 no crear√° autom√°ticamente nuevas instancias del objeto Scriptable con solo mirar el script en el inspector. Para comenzar a jugar con datos, haga clic en el bot√≥n ‚ÄúCrear data‚Äù. Ahora, ambos campos muestran el objeto de datos en si mismo. Podr√≠amos personalizar a√∫n m√°s el script del editor para que se vea similar a Demo1 si as√≠ lo desea, pero por ahora no es necesario. Para editar el valor del objeto compartido, haga doble clic en el objeto de datos en cualquier campo. La ventana del inspector se actualizar√° mostrando solo el objeto que est√° editando. Ahora, para la gran prueba, ¬øpuede esta versi√≥n sobrevivir a una recarga de escena? Contin√∫a e ingresa y luego sal del modo de reproducci√≥n. Intente editar el valor de cualquier objeto de datos. Luego regrese y abra el objeto a trav√©s del otro campo. ¬°Deber√≠a ver que la referencia se serializ√≥ correctamente, porque tendr√° el mismo valor! Unity pudo retener la referencia compartida en lugar de tener que serializar una copia completa del objeto para cada campo. ","date":"04-09-2018","objectID":"/posts/2018/csharpunity/012/:3:0","tags":["n9+","csharp","unity"],"title":"Aprende C# con Unity - Scriptable Objects","uri":"/posts/2018/csharpunity/012/"},{"categories":["aprende c# con unity"],"content":"Demo 4 :: El tipo de objeto Scriptable sobrevive a la serializaci√≥n Ahora recreemos Demo 2 (la demostraci√≥n de polimorfismo) al usar objetos programables en lugar de objetos C# est√°ndar. Tenga en cuenta que en la demostraci√≥n 2, el objeto de datos base y sus subclases compartieron un solo archivo de script. Unity tiene algunos requisitos adicionales tales que cada objeto programable debe aparecer en su propio archivo y el nombre del archivo debe coincidir con el nombre de la clase. #region Librerias using UnityEngine; #endregion namespace MoonAntonio { public class Demo4 : MonoBehaviour { public Demo4Data[] dataArray; } } #region Librerias using UnityEngine; #endregion namespace MoonAntonio { public class Demo4Data : ScriptableObject { public override string ToString() { return string.Format(\"[{0}]\", name); } } } #region Librerias using UnityEngine; #endregion namespace MoonAntonio { public class Demo4NumberData : Demo4Data { public int number; public override string ToString() { return string.Format(\"[{0}, {1}]\", name, number); } } } #region Librerias using UnityEngine; #endregion namespace MoonAntonio { public class Demo4BoolData : Demo4Data { public bool toggle; public override string ToString() { return string.Format(\"[{0}, {1}]\", name, toggle); } } } #region Librerias using UnityEngine; using UnityEditor; #endregion namespace MoonAntonio { [CustomEditor(typeof(Demo4))] public class Demo4Inspector : Editor { public override void OnInspectorGUI() { DrawDefaultInspector(); Demo4 myTarget = (Demo4)target; if (GUILayout.Button(\"Crear Data\")) { var dataA = ScriptableObject.CreateInstance\u003cDemo4NumberData\u003e(); dataA.name = \"Demo4NumberData\"; dataA.number = UnityEngine.Random.Range(1, 100); var dataB = ScriptableObject.CreateInstance\u003cDemo4BoolData\u003e(); dataB.name = \"Demo4BoolData\"; dataB.toggle = UnityEngine.Random.value \u003e 0.5; myTarget.dataArray = new Demo4Data[] { dataA, dataB }; } if (GUILayout.Button(\"Log\")) { foreach (var data in myTarget.dataArray) { Debug.Log(data.ToString()); } } } } } Contin√∫a y crea una nueva escena, luego adjunta el script Demo4 a cualquier objeto. Utilice el script del inspector para ‚ÄúCrear datos‚Äù en nuestro componente Demo4. Al igual que en Demo3, debe hacer doble clic en el campo del objeto para ver y editar los valores de cada instancia del objeto. Use el bot√≥n ‚ÄúLog‚Äù para ver r√°pidamente cada ventana impresa en la consola. Ahora, para la gran prueba, ¬øpuede esta versi√≥n sobrevivir a una recarga de escena? Contin√∫a e ingresa y luego sal del modo de reproducci√≥n. Presione el bot√≥n ‚ÄúLog‚Äù una vez m√°s. ¬°√âxito! ","date":"04-09-2018","objectID":"/posts/2018/csharpunity/012/:4:0","tags":["n9+","csharp","unity"],"title":"Aprende C# con Unity - Scriptable Objects","uri":"/posts/2018/csharpunity/012/"},{"categories":["aprende c# con unity"],"content":"Demo 5 :: Assets Scriptable Object Dije que pod√≠as guardar estos objetos como assets, y tambi√©n mencion√© repetidamente que los Objetos Scriptables no se adjuntan a GameObjects, sin embargo, en cada demostraci√≥n hasta el momento solo los he mostrado como referencias en scripts de MonoBehaviour. En esta lecci√≥n, finalmente mostrar√© c√≥mo trabajar con estos objetos de datos por su cuenta. Sol√≠a ‚Äã‚Äãser un proceso m√°s engorroso para crear Objetos Scriptables, pero ahora tenemos una etiqueta llamada ‚ÄúCreateAssetMenu‚Äù que lo maneja autom√°ticamente para nosotros. Puedes comenzar con algo tan simple como: #region Librerias using UnityEngine; #endregion namespace MoonAntonio { [CreateAssetMenu()] public class ScriptableTets : ScriptableObject { public int value; } } Compila tu c√≥digo y regresa a Unity. Puede usar la barra de men√∫ de la aplicaci√≥n (Assets -\u003e Create -\u003e ScriptableTets), o el men√∫ desplegable ‚ÄúCreate‚Äù del panel Proyecto (Create -\u003e ScriptableTets). Seleccione uno y se crear√° un nuevo activo en su proyecto llamado ‚ÄúNew ScriptableTets‚Äù. Puede cambiar el nombre del activo, moverlo a otra carpeta, rellenarlo con los datos personalizados, etc. Guarde el proyecto y ahora tiene una aplicaci√≥n pr√°ctica del asset. El ‚ÄúCreateAssetMenu‚Äù tambi√©n puede tomar par√°metros. En la siguiente versi√≥n, especifico el nombre de las instancias recientemente creadas, hago que aparezca en un submen√∫ y especifico un orden para que pueda hacer que los objetos utilizados con mayor frecuencia aparezcan en la parte superior de la lista. [CreateAssetMenu(fileName = \"ScriptableTets\", menuName = \"Scriptable Objects/ScriptableTets\", order = 1)] Si ha revisado la documentaci√≥n del ¬†Scriptable Object , puede haber notado que tiene algunos m√©todos similares en nombre a aquellos en un MonoBehaviour. Por ejemplo, tiene: Awake, OnDestroy, OnDisable y OnEnable. Como no hay GameObject, ¬øcu√°ndo se llaman? Desafortunadamente, la respuesta probablemente no sea la esperada. Agregu√© mensajes de registro de depuraci√≥n a cada uno de estos m√©todos en mi clase ‚ÄúScriptableTets‚Äù. #region Librerias using UnityEngine; #endregion namespace MoonAntonio { [CreateAssetMenu(fileName = \"ScriptableTets\", menuName = \"Scriptable Objects/ScriptableTets\", order = 1)] public class ScriptableTets : ScriptableObject { public int value; void Awake() { Debug.Log(\"Awake ScriptableTets \" + name); } void OnDestroy() { Debug.Log(\"Destroy ScriptableTets \" + name); } void OnEnable() { Debug.Log(\"OnEnable ScriptableTets \" + name); } void OnDisable() { Debug.Log(\"OnDisable ScriptableTets \" + name); } } } Compila tus scripts. Ahora crea un nuevo assets ‚ÄúScriptableTets‚Äù. Deber√≠a ver que se llama a ‚ÄúAwake‚Äù y luego a ‚ÄúOnEnable‚Äù, en ese orden. Esto probablemente se esperaba, si est√° familiarizado con el pedido de MonoBehaviour. Haga clic en el activo ScriptableTets para que su nombre se aplique y deje de estar seleccionado. Luego, ingrese el modo de reproducci√≥n. Deber√≠a ver que se llama ‚ÄúOnDisable‚Äù, luego se llama a ‚ÄúOnEnable‚Äù una vez m√°s. Esto tiene que ver con la forma en que los objetos pasan entre el motor central C++ de Unity y el lado de scripting C# de Unity. Salga del modo de reproducci√≥n y ver√° nuevamente ‚ÄúOnDisable‚Äù, pero en realidad no ver√° una llamada a ‚ÄúOnEnable‚Äù como podr√≠a haber esperado. Si ahora selecciona el activo ‚ÄúScriptableTets‚Äù para que aparezca en el inspector, ver√° una llamada ‚ÄúAwake‚Äù y otra vez ‚ÄúOnEnable‚Äù. Sin haberlo probado, habr√≠a pensado que estos m√©todos estaban pensados ‚Äã‚Äãpara el uso en tiempo de ejecuci√≥n y no ser√≠an invocados por las acciones del editor. Adem√°s, habr√≠a pensado que ‚ÄúAwake‚Äù estar√≠a reservado para la creaci√≥n del activo solamente, especialmente dado que no se nos permite usar el constructor de un Objeto Scriptable. En mi opini√≥n, realmente deber√≠a haber alg√∫n tipo de m√©todo ‚Äúinit‚Äù que solo se llame una vez para la creaci√≥n del activo. Aqu√≠ es donde normalmente agregar√≠a trabajo de configuraci√≥n para un objeto que no quisiera que ocurriera m√°s de una vez. Para obt","date":"04-09-2018","objectID":"/posts/2018/csharpunity/012/:5:0","tags":["n9+","csharp","unity"],"title":"Aprende C# con Unity - Scriptable Objects","uri":"/posts/2018/csharpunity/012/"},{"categories":["aprende c# con unity"],"content":"Las estructuras son como Clases, pero completamente diferentes. Si no sabe qu√© es una estructura o cu√°ndo la usar√≠a, o si no conoce la diferencia entre pasar por referencia y pasar por valor, esta lecci√≥n es para usted. GitHub\rGitlab\rStructs en Unidad Dado que esta serie se basa en aprender C# para Unity, comencemos por se√±alar algunos lugares donde es posible que ya haya estado utilizando Structs: Vector2, Vector3 and Vector4 Rect Color y Color32 Bounds Touch En particular, las diversas formas de Vector (2-4) se utilizan en todas partes. Ver√° que se utilizan para almacenar todo, desde la posici√≥n, la rotaci√≥n y la escala de una transformaci√≥n hasta la velocidad de un cuerpo r√≠gido, o la ubicaci√≥n de un toque o un clic del mouse en la pantalla. ¬øQu√© es una Struct? Una estructura es algo as√≠ como un tipo de datos compuestos. Se ve muy similar a una clase, porque puede definir campos y m√©todos de la misma manera. El siguiente ejemplo define una estructura y clase que son casi id√©nticas: public struct PointA { public int x; public int y; } public class PointB { public int x; public int y; } En este ejemplo, la √∫nica diferencia notable se encuentra en las palabras clave: ‚Äústruct‚Äù en lugar de ‚Äúclass‚Äù. Algunas otras diferencias entre los dos incluyen: Una estructura no puede heredar de un tipo base como una clase Las estructuras no pueden tener constructores sin par√°metros Todos los campos de una estructura se deben asignar antes de dejar un constructor Las estructuras se pasan por valor, mientras que una instancia de una clase se pasa por referencia El √∫ltimo punto, para m√≠, es el m√°s importante. Existen muchas diferencias significativas entre los tipos de ‚Äúvalor‚Äù y los tipos de ‚Äúreferencia‚Äù que impactan cu√°ndo y c√≥mo debe usarlos. Tipos de referencia Cuando decimos que una instancia de una clase se pasa por referencia, lo que realmente est√° sucediendo es que obtenemos un ‚Äúpuntero‚Äù a la direcci√≥n en la memoria del objeto y luego pasamos ese ‚Äúvalor‚Äù. Esto es importante porque una instancia de una clase en realidad puede ser muy grande, que contiene muchos campos e incluso otros objetos. En ese tipo de escenario, copiar y transmitir todo puede afectar negativamente el rendimiento, y es por eso que solo pasa la direcci√≥n. Los tipos de referencia se asignan en el ‚Äúmont√≥n‚Äù y se limpian mediante algo llamado ‚Äúrecolecci√≥n de basura‚Äù. La recolecci√≥n de basura es un proceso que ocurre de manera autom√°tica pero que es lento y, en general, da cuenta de los contratiempos en la velocidad de fotogramas de tu juego. Por este motivo, no desea crear objetos con frecuencia y permitir que salgan del alcance. El siguiente ejemplo es un gran no-no : // NO DEBER√çAS HACER ESTO void Update () { // Crear una instancia de una clase con √°mbito local en el ciclo de actualizaci√≥n (llamado cada frame) List\u003cGameObject\u003e objects = new List\u003cGameObject\u003e(); // Imagina que las cosas se hacen con esta lista de objetos (se completa e itera etc.) for (int i = 0; i \u003c objects.Count; i++) { } // Cuando el m√©todo finaliza, la lista de objetos sale del alcance y en alg√∫n momento necesitar√° // ser basura recogida } Tipos de valor Cuando decimos que algo se pasa por valor, lo que realmente est√° sucediendo es que la variable se clona/copia por completo, y la copia se transfiere mientras el original se deja intacto. Las estructuras son tipos de valores y se pasan por valor. Esto significa que las estructuras son idealmente peque√±as estructuras de datos. Los tipos de valores se asignan en la ‚Äúpila‚Äù, lo que significa que su memoria es f√°cil de recuperar y no tienen ning√∫n efecto en ‚Äúrecolecci√≥n de basura‚Äù. A diferencia del ejemplo de ciclo de actualizaci√≥n con tipos de referencia, es totalmente aceptable crear tipos de valores y permitir que salgan del alcance sin temor a una desaceleraci√≥n inminente o un problema de memoria. Por ejemplo, lo siguiente es totalmente aceptable: // Esto esta bien void Update () { // Crea una variable local de un tipo de valor - struct Vector3 offset =","date":"26-08-2018","objectID":"/posts/2018/csharpunity/011/:0:0","tags":["n9+","csharp","unity"],"title":"Aprende C# con Unity - Structs","uri":"/posts/2018/csharpunity/011/"},{"categories":["aprende c# con unity"],"content":"Mencionamos brevemente los enums en nuestra √∫ltima lecci√≥n, por lo que sent√≠ que ahora ser√≠a un buen momento para tratarla en mayor profundidad. Al mismo tiempo, podemos ampliar el tema e introducir Flags (m√°scaras de bits). Algo de esto se profundiza en el lado nerd de la programaci√≥n, pero intentar√© que todo sea f√°cil de entender. GitHub\rGitlab\rEl tipo ‚ÄúEnum‚Äù Primero introduje la enumeraci√≥n en la lecci√≥n anterior con la configuraci√≥n de ‚ÄúDifficulties‚Äù: public enum Difficulties { Easy, Medium, Hard, Count } Este fragmento de c√≥digo se puede colocar fuera de una clase y se convierte en un tipo ‚Äúglobal‚Äù que puede ser utilizado por cualquiera de sus scripts. Tambi√©n puede ubicarlo dentro de una clase, pero luego para acceder a √©l, necesita hacer referencia a la enumeraci√≥n a trav√©s de puntos. // Este ejemplo se puede usar cuando Difficulties no est√° contenido en una clase // o cuando est√° definido en la clase actual Difficulties d1 = Difficulties.Easy; // Este ejemplo se usa cuando se define Difficulties en una clase // que no sea la clase actual Demo.Difficulties d2 = Demo.Difficulties.Easy; El tipo enum es √∫nico para s√≠ mismo, aunque tiene un tipo subyacente (por defecto, ‚Äòint‚Äô). Es posible cambiar el tipo subyacente en la declaraci√≥n, como especificar el ‚Äúbyte‚Äù, lo que podr√≠a hacer si sabe que no tendr√° un gran rango de valores que deben representarse. El formulario se ve bastante similar a la herencia de clase, donde se hace referencia al tipo subyacente despu√©s de dos puntos, como en el siguiente ejemplo: public enum Difficulties : byte { Easy, Medium, Hard, Count } La instancia de una clase, puede asignarla a una referencia de tipo ‚Äúbase‚Äù sin conversi√≥n. Esto no es as√≠ con las enumeraciones; en su lugar, debe convertirlo o, de lo contrario, ver√° un error: ‚Äúerror CS0266: no se puede convertir impl√≠citamente el tipo Demo.Difficulties ‚Äôen byte‚Äô. Existe una conversi√≥n expl√≠cita (¬øfalta using?) \" void Start () { // La conversi√≥n impl√≠cita de una instancia al tipo base est√° bien MonoBehaviour script = this; // La conversi√≥n impl√≠cita de una enumeraci√≥n a un tipo subyacente no est√° bien... // byte value = Difficulties.Easy; // ... Usa esto en cambio byte value = (byte)Difficulties.Easy; } Los valores en nuestra enum comienzan con el valor predeterminado del tipo subyacente (‚Äò0‚Äô) y cuentan hacia arriba, aunque puede especificar cualquier valor que el tipo subyacente pueda contener. Dejados solos, nuestros valores de Difficulties variar√≠an de 0 a 3. Para especificar valores, use la siguiente forma: public enum Multipliers { Negative = -1, Nullify = 0, Positive = 1 } Tenga en cuenta que debido a que los valores se autoincrementan, tambi√©n podr√≠a haber especificado el valor ‚ÄúNegativo‚Äù y las otras entradas se habr√≠an asignado correctamente. Bits y cambio de bit Uno de los mejores usos de las enumeraciones viene por medio de su uso como m√°scara de bits. Sin embargo, antes de comenzar a cubrir eso, puede ser √∫til tener una comprensi√≥n general de lo que est√° sucediendo bajo el cap√≥. Los bits se refieren a la secuencia binaria de 0 y 1 que, en conjunto, se utilizan para definir cosas m√°s complejas. Los tipos de datos requieren una cierta cantidad de bits para estar completamente representados. Un ‚Äòbyte‚Äô, por ejemplo, requiere 8 bits como los siguientes:00000000 El valor num√©rico de la muestra anterior era cero, y al encender (establecer bits a 1 en varias ubicaciones) obtiene combinaciones que hacen los otros n√∫meros. Aqu√≠ hay algunos n√∫meros en orden con su patr√≥n de bits asociado: 00000000 = 0 00000001 = 1 00000010 = 2 00000011 = 3 00000100 = 4 Es de esperar que pueda ver el patr√≥n aqu√≠, donde se incrementa a uno, luego mover un lugar y restablecer el otro bit a 0 para continuar incrementando el valor num√©rico. Algunos programadores analizan esto y piensan: ‚ÄúPodr√≠a usar esta secuencia de bits como una matriz de bool‚Äù, y sin necesitar la cantidad equivalente de almacenamiento (tenga en cuenta que un ‚Äúbool‚Äù requiere 8 bits). B√°sicamente,","date":"25-08-2018","objectID":"/posts/2018/csharpunity/010/:0:0","tags":["n9+","csharp","unity"],"title":"Aprende C# con Unity - Enums y Flags","uri":"/posts/2018/csharpunity/010/"},{"categories":["aprende c# con unity"],"content":"Supongamos que est√°s haciendo un juego ‚Äúcompleto‚Äù. Quieres una pantalla de t√≠tulo y todo. Su usuario puede seleccionar el n√∫mero de jugadores o una configuraci√≥n de dificultad, etc., y luego ‚Ä¶ ¬øc√≥mo pasa la informaci√≥n a la siguiente escena? O, lo que es m√°s importante (y algo truculento) ¬øc√≥mo se puede guardar una sesi√≥n de juego y volver a cargarla m√°s tarde? mostrar√© algunas de las opciones que me gustan. GitHub\rGitlab\rPersistencia est√°tica Para persistir los datos de una escena a otra puede ser tan simple como guardar datos en una variable est√°tica. Para demostrarlo, necesitaremos un poco de configuraci√≥n. Crea dos escenas, una llamada ‚ÄúT√≠tulo‚Äù y otra llamada ‚ÄúJuego‚Äù. En la barra de men√∫, seleccione ‚ÄúFile-\u003e Build Settings‚Äù y en el cuadro de di√°logo deber√° usar el bot√≥n ‚ÄúAgregar actual‚Äù o arrastrar y soltar ambas escenas desde el panel Proyecto a la lista ‚ÄúEscenas en compilaci√≥n‚Äù. La siguiente clase de Data Manager es una clase est√°tica con una variable est√°tica, por lo que no necesita ser agregada a su escena, simplemente ‚Äúfuncionar√°‚Äù autom√°ticamente. Utilizo algo llamado ‚Äúenumeraci√≥n‚Äù de la que no he hablado antes. Por ahora, puede pensar en una enumeraci√≥n como un entero (porque puede ser emitida desde o hacia un n√∫mero entero, aunque en realidad es su propio ‚Äútipo‚Äù) donde cada entrada se nombra para hacer que su c√≥digo sea m√°s legible. ‚ÄúF√°cil‚Äù es como el valor entero de ‚Äò0‚Äô y cuenta desde all√≠. #region Librerias using UnityEngine; #endregion namespace MoonAntonio { public enum Difficulties { Easy, Medium, Hard, Count } public static class DataManager { public static Difficulties difficulty; } } Agregue el siguiente script ‚ÄúTitleController‚Äù como un componente a la c√°mara en la escena ‚ÄúT√≠tulo‚Äù. Este script es muy simple: utilic√© la GUI heredada para reducir a√∫n m√°s el tiempo de configuraci√≥n. Todo lo que hace este script es mostrar botones para cada opci√≥n de dificultad, y uno para comenzar a jugar el juego. Cada vez que selecciona uno de los botones, una configuraci√≥n de dificultad se establece en una variable est√°tica en la clase DataManager. #region Librerias using UnityEngine; using UnityEngine.SceneManagement; #endregion namespace MoonAntonio { public class TitleController : MonoBehaviour { void OnGUI() { int yPos = 10; GUI.Label(new Rect(10, yPos, 200, 30), \"Elegir dificultad\"); for (int i = 0; i \u003c (int)Difficulties.Count; ++i) { yPos += 40; Difficulties type = (Difficulties)i; if (DataManager.difficulty == type) GUI.Label(new Rect(10, yPos, 200, 30), type.ToString()); else if (GUI.Button(new Rect(10, yPos, 100, 30), type.ToString())) DataManager.difficulty = type; } yPos += 40; if (GUI.Button(new Rect(10, yPos, 100, 30), \"Play\")) SceneManager.LoadScene(\"Juego\"); } } } Agregue el siguiente script ‚ÄúGameController‚Äù como un componente, a la c√°mara en la escena ‚ÄúJuego‚Äù. Este script tambi√©n es muy simple. Esta vez todo lo que hago es mostrar qu√© dificultad se ha seleccionado en la escena de T√≠tulo y proporcionar una opci√≥n para Salir de nuevo a esa escena. #region Librerias using UnityEngine; using UnityEngine.SceneManagement; #endregion namespace MoonAntonio { public class GameController : MonoBehaviour { void OnGUI() { GUI.Label(new Rect(10, 10, 200, 30), DataManager.difficulty.ToString()); if (GUI.Button(new Rect(10, 50, 100, 30), \"Salir\")) SceneManager.LoadScene(\"Titulo\"); } } } Con la escena de t√≠tulo abierta, presione Reproducir y observe que la selecci√≥n que hace en la primera pantalla se guarda y a√∫n est√° disponible en la siguiente escena. Esto funciona porque las variables est√°ticas nunca saldr√°n del alcance mientras el programa se est√© ejecutando. Patr√≥n Singleton Aunque una clase est√°tica funcion√≥ bien para la muestra anterior, no ofrece tantas opciones arquitect√≥nicas como lo har√≠a un objeto (a saber, herencia y polimorfismo). Un singleton es una variaci√≥n ligeramente diferente, donde por dise√±o solo se desea que exista una sola instancia de una clase, pero se puede tener m√°s control sobre la creaci√≥n y la vi","date":"24-08-2018","objectID":"/posts/2018/csharpunity/009/:0:0","tags":["n9+","csharp","unity"],"title":"Aprende C# con Unity - Guardando datos","uri":"/posts/2018/csharpunity/009/"},{"categories":["aprende c# con unity"],"content":"Ya sea que lo recuerdes o no, has estado creando clases todo el tiempo en las lecciones anteriores. He comentado brevemente varias caracter√≠sticas de clases como herencia y constructores, pero hay mucho m√°s por cubrir. En esta lecci√≥n, nos enfocaremos en esos temas con mayor profundidad e introduciremos algunos temas m√°s avanzados como polimorfismo, constructores est√°ticos, clases abstractas y clases est√°ticas. GitHub\rGitlab\rHerencia La herencia es el concepto de que una clase toma todas las funcionalidades de una clase ‚Äúpadre‚Äù o ‚Äúbase‚Äù al mismo tiempo que brinda la oportunidad de ampliar o modificar la l√≥gica previamente disponible. El c√≥digo de plantilla proporcionado por Unity para todos sus scripts har√° que su script herede de ‚ÄúMonoBehaviour‚Äù de forma predeterminada. Puedes decir qu√© la clase hereda de tu script al observar los dos puntos en la declaraci√≥n de clase: public class HerenciaMono : MonoBehaviour { // Yo heredo de MonoBehaviour } No tiene que heredar de MonoBehaviour. Puede especificar cualquier otra clase en su lugar como ‚ÄúEstadisticas‚Äù (tenga en cuenta que tendr√≠a que haber creado una clase llamada Estadisticas para que compile): public class HerenciaEsta : Estadisticas { // Yo heredo de Estadisticas } Si no especifica una clase para heredar, todav√≠a hereda de algo: System.Object: public class ClaseNormal { // Yo heredo de System.Object aunque no lo menciono } En C#, una clase solo puede tener una clase base. Si desea algo as√≠ como herencia m√∫ltiple, considere usar interfaces o arquitecturas basadas en componentes en su lugar. Polimorfismo MonoBehaviour hereda de Behavior, que a su vez hereda de Component. El componente hereda de UnityEngine.Object que finalmente hereda de System.Object. Puedo decir que un MonoBehaviour es cualquiera de esas clases base (pero no siempre puedo decir lo contrario). Considere el siguiente ejemplo: #region Librerias using UnityEngine; using System.Collections; using System.Collections.Generic; #endregion namespace MoonAntonio { public class Polimorfismo : MonoBehaviour { void Start() { List\u003cSystem.Object\u003e myList = new List\u003cSystem.Object\u003e(); myList.Add(\"Hola Mundo!\"); myList.Add(42); myList.Add(Camera.main); for (int i = 0; i \u003c myList.Count; ++i) Debug.Log(i + \": \" + myList[i].ToString()); } } } En este fragmento, declaro una lista gen√©rica de objetos. Una lista gen√©rica est√° restringida a contener un solo tipo de datos. Sin embargo, agrego tres cosas muy diferentes: una cadena de texto, un valor entero y un componente de c√°mara, todo sin problema. Cada uno de los tipos ‚Äúconcretos‚Äù a√∫n comparte una ‚Äúbase‚Äù de ‚ÄúObjeto‚Äù y por lo tanto son adiciones v√°lidas a la lista. Debido al polimorfismo, puedo tratar estos tres elementos muy diferentes exactamente de la misma manera. Para demostrarlo, recorro todos los elementos de la lista y llamo a un m√©todo, todos comparten ‚ÄúToString‚Äù e imprimen el resultado en la consola. El resultado es el siguiente: 0: Hola Mundo! 1: 42 2: C√°mara principal (UnityEngine.Camera) Cada elemento sab√≠a c√≥mo convertirse en una cadena a pesar de que todos pueden manejar el proceso de manera diferente. Por ejemplo, el componente de la c√°mara imprimi√≥ un mensaje informativo que inclu√≠a el nombre del GameObject al que estaba adjuntado. El c√≥digo ‚Äúcliente‚Äù (nuestro script de demostraci√≥n que imprimi√≥ los mensajes en la consola) no necesita saber que los objetos son diferentes o c√≥mo responder√°n a la llamada al m√©todo. Solo necesita saber que tienen el m√©todo. Siempre es seguro tratar un objeto como una versi√≥n de clase base de s√≠ mismo. Sin embargo, no siempre es seguro tratar una referencia de una clase base como una clase que hereda de ella. Considere la siguiente l√≠nea de c√≥digo: Camera c = myList[2]; Aunque s√© que el objeto en el √≠ndice 2 de myList es una c√°mara, no puedo agregar esta l√≠nea al final del m√©todo. Si lo intenta, obtendr√° un error, ‚Äúerror CS0266: no se puede convertir impl√≠citamente el tipo objeto ‚Äôen UnityEngine.Camera‚Äô. Existe una conversi√≥n expl√≠cita","date":"24-08-2018","objectID":"/posts/2018/csharpunity/008/:0:0","tags":["n9+","csharp","unity"],"title":"Aprende C# con Unity - Clases","uri":"/posts/2018/csharpunity/008/"},{"categories":["aprende c# con unity"],"content":"Una corrutina es una forma especial de hacer que la l√≥gica suceda con el tiempo. Debo admitir que nunca us√© corrutinas hasta Unity, hab√≠a estado usando programaci√≥n basada en eventos en cualquier otro escenario comparable. Sin embargo, corrutinas son una alternativa r√°pida y f√°cil que definitivamente vale la pena ver. En esta lecci√≥n, mostrar√© c√≥mo funciona Unity con corrutinas, incluidas varias formas de ceder el control e incluso vincular corrutinas para tener un control total sobre la l√≥gica basada en el tiempo. Al final, tambi√©n mostrar√© c√≥mo trabajar con corrutinas de forma nativa para cualquiera que tenga curiosidad sobre c√≥mo funcionan. GitHub\rGitlab\rCorrutinas de Unity Una corrutina es realmente solo un m√©todo con un tipo de devoluci√≥n de ‚ÄúIEnumerator‚Äù. Una diferencia clave es que no simplemente ‚Äúdevuelve‚Äù el tipo de datos como lo har√≠a en un m√©todo normal. En cambio, ‚Äúcede‚Äù un valor que hace que la ejecuci√≥n de la l√≥gica se detenga en su lugar; puede reanudarse m√°s tarde. Echemos un vistazo a una muestra r√°pida: #region Librerias using System.Collections; using UnityEngine; #endregion namespace MoonAntonio { public class UnityCorrutinas : MonoBehaviour { void OnEnable() { StartCoroutine(\"DoStuff\"); } void OnDisable() { StopCoroutine(\"DoStuff\"); } IEnumerator DoStuff() { int value = 0; while (true) { yield return new WaitForSeconds(1); value++; Debug.Log(\"Valor:\" + value); } } } } Tenga en cuenta que debemos asegurarnos de que se utiliza el espacio de nombres ‚ÄúSystem.Collections‚Äù, o se obtendr√° un error: ‚ÄúNo se pudo encontrar el tipo o el nombre del espacio de nombres ‚ÄòIEnumerator‚Äô. ¬øEchas de menos una directiva de uso o una referencia de ensamblado? Para usar una corrutina con Unity, usa un m√©todo llamado ‚ÄúStartCoroutine‚Äù. Hacemos esto dentro del m√©todo OnEnable (l√≠nea 8). StartCoroutine est√° sobrecargado para permitirle pasar un ‚ÄúIEnumerator‚Äù o una cadena que representa el nombre de la corrutina para comenzar. En el ejemplo utilic√© la versi√≥n posterior, porque solo esa versi√≥n se puede ‚Äúdetener‚Äù manualmente usando StopCoroutine. Muestro StopCoroutine en el m√©todo OnDisable (l√≠nea 13) aunque su uso en este ejemplo es innecesario porque todas las corrutinas administradas por unity se detendr√≠an cuando el script se desactivara independientemente de c√≥mo se inicien. Tambi√©n debe tener en cuenta que puede ‚ÄúComenzar la rutina‚Äù varias veces, incluso para el mismo m√©todo, que a menudo puede ser un comportamiento involuntario. Es posible que desee establecer un indicador que le indique cu√°ndo est√° activa una corrutina, de modo que no la inicie varias veces, Aqu√≠ hay algunas variaciones de llamar a StartCoroutine: // Versi√≥n 1, iniciada por una cadena (nombre de coroutine): esta versi√≥n es compatible con StopCoroutine StartCoroutine(\"DoStuff\"); // Versi√≥n 2, Igual que la Versi√≥n 1 pero con un par√°metro - nota, el m√©todo de destino debe ser modificado para aceptar un par√°metro StartCoroutine(\"DoStuff\", 5); // Versi√≥n 3, esta versi√≥n se inicia al pasar el IEnumerator, usted NO PUEDE utilizar StopCoroutine StartCoroutine(DoStuff()); // Versi√≥n 4, Igual que la Versi√≥n 3 pero con par√°metro - nota, el m√©todo de destino debe ser modificado para aceptar un par√°metro StartCoroutine(DoStuff(5)); El m√©todo ‚ÄúDoStuff‚Äù es nuestra ‚Äúcorrutina‚Äù. La primera instrucci√≥n crea una variable local llamada ‚Äúvalor‚Äù y la inicializa a cero. Entonces comenzamos un ‚Äúbucle infinito‚Äù (un bucle ‚Äúwhile‚Äù que itera mientras sea ‚Äúverdadero‚Äù, que es siempre). Dentro del ciclo vemos nuestra primera declaraci√≥n de ‚ÄúWaitForSeconds‚Äù (l√≠nea 21) que indica a Unity que deseamos esperar un segundo. En este punto, la ejecuci√≥n de este m√©todo se suspende y no continuar√° hasta que se cumpla nuestra condici√≥n de espera. Despu√©s de esperar un segundo, Unity reanuda la corrutina justo donde lo dej√≥, incluso manteniendo en memoria los valores de las variables locales (en este caso, ‚Äúvalue‚Äù). Incrementamos el valor en uno, e imprimimos en la ventana de la consola. Si adjunta est","date":"24-08-2018","objectID":"/posts/2018/csharpunity/007/:0:0","tags":["n9+","csharp","unity"],"title":"Aprende C# con Unity - Corrutinas","uri":"/posts/2018/csharpunity/007/"},{"categories":["aprende c# con unity"],"content":"Los gen√©ricos proporcionan una forma de hacer una especie de ‚Äúplantilla‚Äù de su c√≥digo que funciona de la misma manera en una variedad de tipos de datos diferentes. Si bien podr√≠a considerarse un tema m√°s avanzado, existen algunos beneficios importantes al usarlos desde el principio. En esta lecci√≥n, presentar√© listas gen√©ricas y diccionarios, y mostrar√© c√≥mo se usan los gen√©ricos para funcionalidades espec√≠ficas de Unity, como obtener componentes y cargar recursos. Si te sientes aventurero, no dudes en echar un vistazo a algunos ejemplos r√°pidos de clases y m√©todos gen√©ricos personalizados al final. GitHub\rGitlab\rLista gen√©rica Si has hecho alguna prueba con matrices, es posible que hayas topado con algunas caracter√≠sticas de la lista de deseos. Por ejemplo, es posible que se haya sentido decepcionado al ver que son ‚Äúinmutables‚Äù, lo que significa que no puede cambiar el tama√±o a√±adiendo o eliminando objetos de forma din√°mica. Muchas de las funciones que est√° esperando se excluyen por el bien del rendimiento. Si est√° escribiendo un c√≥digo altamente optimizado, como una inteligencia artificial compleja para jugar al Ajedrez, entonces querr√° esa velocidad extra. En la mayor√≠a de los otros casos, los beneficios de opciones son un poco menos eficaces, pero m√°s robustos. La lista gen√©rica es muy parecida a una matriz. Gran parte de la sintaxis para leer y escribir se ver√° igual tambi√©n. Sin embargo, una lista puede agregar o eliminar elementos din√°micamente, indicarle el √≠ndice de un elemento que contiene, ordenar, etc. Veamos c√≥mo se ve en el c√≥digo: #region Librerias using UnityEngine; using System.Collections; using System.Collections.Generic; #endregion namespace MoonAntonio { public class ListExamples : MonoBehaviour { public List\u003cint\u003e indices = new List\u003cint\u003e(); void Start() { for (int i = 0; i \u003c 10; ++i) { int index = UnityEngine.Random.Range(0, 10); Debug.Log(\"Agregada entrada: \" + index); indices.Add(index); } if (indices.Contains(3)) { Debug.Log(\"Eliminada entrada.\"); indices.Remove(3); } indices.Sort(); Debug.Log(\"Entradas ordenadas ... Ahora:\"); for (int i = 0; i \u003c indices.Count; ++i) { int index = indices[i]; Debug.Log(string.Format(\"i: \" + index)); } } } } En primer lugar, tenga en cuenta que en la l√≠nea 3, he especificado que estoy usando un nuevo espacio de nombres, ‚ÄúSystem.Collections.Generic‚Äù. Esto nos permite declarar y usar gen√©ricos sin especificarlos completamente. Por ejemplo, sin la instrucci√≥n using, la l√≠nea 7 se ver√≠a as√≠ en su lugar: public System.Collections.Generic.List\u003cint\u003e indices = new System.Collections.Generic.List\u003cint\u003e(); Declaramos nuestra lista en la l√≠nea 7 y la inicializamos como una lista vac√≠a. Esto es genial para mostrar que no necesita saber qu√© tan grande ser√° su lista, o qu√© elementos espec√≠ficos contendr√°. La parte ‚Äúgen√©rica‚Äù ‚Äã‚Äãde la l√≠nea se ve entre \" \u003c\" y \" \u003e\" donde especificamos un tipo de datos; en este ejemplo usamos un ‚Äúint‚Äù. Esto significa que esta lista en particular solo puede contener valores int. Debido a que todos los elementos de la lista est√°n obligados a ser del mismo tipo de datos, el c√≥digo se ejecutar√° de forma m√°s segura y r√°pida. Lo llamamos gen√©rico porque podemos pasar cualquier tipo de DataType (a veces hay excepciones a esta regla) en la declaraci√≥n. Una lista de float, string o Transform se declarar√≠a de manera similar: List\u003cfloat\u003e list1 = new List\u003cfloat\u003e(); List\u003cstring\u003e list2 = new List\u003cstring\u003e(); List\u003cTransform\u003e list3 = new List\u003cTransform\u003e(); En el m√©todo de inicio, ejecut√© una variedad de tareas en nuestra lista e imprim√≠ mensajes a la consola explicando lo que estaba sucediendo. Primero, uso un bucle for para generar y agregar 10 n√∫meros aleatorios a nuestra lista. Los hice al azar para mostrar que la lista puede contener valores duplicados, y para ayudar a ilustrar el hecho de que puedo agregar valores fuera de orden y ordenarlos m√°s tarde. Luego, en la l√≠nea 21, verifico si agregamos alguna entrada del n√∫mero 3. Si lo hicimos, eliminamos ese valor. (Tenga ","date":"23-08-2018","objectID":"/posts/2018/csharpunity/006/:0:0","tags":["n9+","csharp","unity"],"title":"Aprende C# con Unity - Gen√©ricos","uri":"/posts/2018/csharpunity/006/"},{"categories":["aprende c# con unity"],"content":"Como programador, con frecuencia trabajar√° con un ‚Äúgrupo‚Äù de datos (como una matriz o array que present√© en la lecci√≥n anterior). Tic Tac Toe, por ejemplo, tiene un tablero de 3 √ó 3 con nueve celdas totales. Si estuviera creando un m√©todo para operar en ese grupo de datos, como limpiar un tablero para un nuevo juego, no querr√≠a tener que aplicar manualmente los cambios a todos y cada uno de los valores de la matriz. En cambio, puede escribir algo llamado bucle y dejar que la maquina maneje el trabajo tedioso por usted. En esta lecci√≥n, crearemos un Tic Tac Toe y mostraremos c√≥mo los bucles pueden ayudar a que nuestro c√≥digo sea m√°s elegante. GitHub\rGitlab\rLa vida sin bucles Crea un nuevo script llamado ‚ÄúTicTacToe‚Äù. Sin bucles, puede tratar de implementar este juego con algo como lo siguiente: #region Librerias using UnityEngine; using UnityEngine.UI; using System.Collections; #endregion namespace MoonAntonio { public class TicTacToe : MonoBehaviour { [SerializeField] Text[] cells; void Start() { NewGame(); } public void NewGame() { cells[0].text = \"\"; cells[1].text = \"\"; cells[2].text = \"\"; cells[3].text = \"\"; cells[4].text = \"\"; cells[5].text = \"\"; cells[6].text = \"\"; cells[7].text = \"\"; cells[8].text = \"\"; cells[9].text = \"\"; } } } Este c√≥digo declara una matriz de componentes de texto que representan las celdas de nuestro tablero de tres en raya. Tambi√©n define el primer m√©todo que necesitaremos, uno que despeje el tablero para prepararlo para un nuevo juego. En ese m√©todo asignamos el texto de cada celda a una cadena vac√≠a para que la celda no se use. Todo lo escrito aqu√≠ hasta ahora es funcional, pero no elegante, o f√°cilmente ampliable para juegos con tableros m√°s grandes. ¬°Imagine una configuraci√≥n similar para Ajedrez, donde tiene que asignar manualmente 64 fichas en lugar de las 9 que tenemos aqu√≠! La magia de los bucles Cada una de las nueve afirmaciones en el m√©todo NewGame es id√©ntica a una excepci√≥n, el √≠ndice de la celda en la matriz. Como programador, a menudo escuchar√° acerca de mantener su c√≥digo ‚ÄúDRY‚Äù, lo que significa ‚ÄúNo repetir‚Äù. Esto a menudo puede referirse a la necesidad de poner bits de l√≥gica en m√©todos m√°s reutilizables y m√°s peque√±os, pero tambi√©n puede aplicarse aqu√≠. Mira c√≥mo el m√©todo NewGame podr√≠a implementarse con un nuevo vocabulario: public void NewGame() { for (int n = 0; n \u003c cells.Length; n++) { cells[n].text = \"\"; } } En este ejemplo, pudimos reemplazar nueve declaraciones separadas del m√©todo ‚ÄúNewGame‚Äù con una sola declaraci√≥n envuelta en un ‚Äúfor loop‚Äù. Adem√°s de ser m√°s compacto, este c√≥digo recortado tambi√©n es din√°mico y ampliable. ¬°Podr√≠amos cambiar de un tablero de tres en raya est√°ndar de 3 x 3 pies a un tablero de 5 x 5 y no necesitar cambiar ni agregar ninguna l√≠nea de c√≥digo, mientras que la implementaci√≥n anterior habr√≠a requerido 16 l√≠neas adicionales! La palabra clave ‚Äúfor‚Äù marca el comienzo de nuestro ciclo. Un inicializador, una condici√≥n y una ‚Äúexpresi√≥n‚Äù de iterador aparecen dentro de sus par√©ntesis (tenga en cuenta que est√°n separados por punto y coma, pero el √∫ltimo no termina con un punto y coma), y un cuerpo (los enunciados que se ejecutar√°n repetidamente) aparecer√°n entre el abierto y cerrar corchetes ‚Äò{‚Äô y ‚Äò}‚Äô. Las declaraciones dentro del par√©ntesis determinan las ‚Äúreglas‚Äù de c√≥mo bucleamos y merecemos un poco m√°s de discusi√≥n: Declaro una variable temporal llamada ‚Äún‚Äù en la declaraci√≥n ‚Äúinicializador‚Äù y asigno su valor predeterminado a 0. El alcance de esta variable est√° restringido al bucle en s√≠, y no ser√° visible fuera de su declaraci√≥n y cuerpo. El inicializador solo se ejecuta una vez, al comienzo de este bloque de c√≥digo. La ‚Äúcondici√≥n‚Äù determina si se ejecuta el c√≥digo en su cuerpo o no. En este ejemplo, continuaremos iterando mientras el valor de ‚Äún‚Äù sea menor que la longitud de nuestra matriz de celdas. Esta afirmaci√≥n se comprueba una vez antes de cada ciclo de ciclo. El ‚Äúiterador‚Äù nos brinda la oportunidad de modificar la variable que declaramos en el ","date":"23-08-2018","objectID":"/posts/2018/csharpunity/005/:0:0","tags":["n9+","csharp","unity"],"title":"Aprende C# con Unity - Bucles","uri":"/posts/2018/csharpunity/005/"},{"categories":["comun"],"content":"Cuando se es un peque√±o estudio, puede ser dif√≠cil encontrar el paquete de software adecuado, manteniendo los gastos mensuales razonables. Hacer la tarea m√°s dif√≠cil es el hecho de que muchas herramientas tienen m√°s funciones completas que las necesidades de un estudio peque√±o, o est√°n dise√±adas para ser incluidas con otras herramientas premium por el mismo desarrollador. . He recogido una serie de herramientas que evita niveles premium y lock-in de proveedores. Viene con algunas compensaciones, como el uso de productos de m√∫ltiples compa√±√≠as en lugar del paquete de una sola compa√±√≠a. Para bien o para mal, constantemente cuestionamos estas herramientas, por lo que esta lista cambia ocasionalmente. Aqu√≠ est√° la lista actualizada de herramientas en su mayor√≠a gratuitas que utilizo para todo lo que hago en el desarrollo de juegos. Game Dev Art Tools Comunicacion Marketing Unity Game Engine (Free) Photoshop (36,29 ‚Ç¨/mes) GSuite (4 ‚Ç¨/Usuario) Mailchimp (Free) Unreal Game Engine (Free) Aseprite (15 ‚Ç¨ / Full) Slack (Free) Presskit() (Free) 150‚Ç¨ CV Gesti√≥n Github (7‚Ç¨/mes) Trello (Free) . ","date":"22-08-2018","objectID":"/posts/2018/comun/011/:0:0","tags":["n9+","comun"],"title":"Las herramientas de bajo coste usadas en un Indie Game Studio","uri":"/posts/2018/comun/011/"},{"categories":["dev"],"content":" . Administrar las hojas de sprites y las animaciones de pixel art dentro de Unity sin herramientas personalizadas es una pesadilla. Esto es lo que tiene que hacer solo para crear los assets para un solo personaje: Crea una textura (png) a trav√©s de un programa de pintura como Photoshop e importa un png en el proyecto de Unity. Establezca las configuraciones de importaci√≥n deseadas para que la textura importada coincida con la misma configuraci√≥n que ha utilizado para cada textura que haya importado. Corta la hoja de sprites en una cuadr√≠cula de sprites dentro del editor de Sprite ingresando el tama√±o de la celda. Cree clips de animaci√≥n uno por uno para recrear los mismos clips que plane√≥ cuando cre√≥ su arte. Da la vuelta a tu escritorio en un ataque de ira. Este flujo de trabajo claramente no es sostenible y es un desperdicio de tiempo de desarrollo. Y tampoco es tan laborioso cuando necesitas actualizar el arte. Pasamos semanas durante la infancia entreteni√©ndonos con diferentes programas de pintura y herramientas personalizadas para descubrir c√≥mo acelerar√≠amos nuestro flujo de trabajo de pixel art. . As√≠ es como haces todo eso con el Importador de animaci√≥n: Crea tu textura (png) a trav√©s de Aseprite o Pyxel Edit. Arrastra y suelta el archivo en Importador de animaci√≥n en Unity. Mira los pasos 2, 3 y 4 de la lista anterior que suceden autom√°ticamente. As√≠ que aqu√≠ hay un tutorial sobre c√≥mo usar el Importador de animaci√≥n en su proyecto de pixel art. En este tutorial crearemos un personaje en Aseprite, lo animaremos y le daremos vida dentro de Unity. Lo he escrito para principiantes de Unity y con Aseprite en mente, pero los expertos deber√≠an poder leerlo r√°pidamente para entender la herramienta. ","date":"22-08-2018","objectID":"/posts/2018/dev/009/:0:0","tags":["n9+","dev"],"title":"Unity : Aseprite Workflow","uri":"/posts/2018/dev/009/"},{"categories":["dev"],"content":"Requisitos previos Antes de comenzar, aseg√∫rese de haber instalado Aseprite , que vale los $15, pero tambi√©n hay una demostraci√≥n si quiere probarlo. Obviamente, tambi√©n necesitar√° un proyecto de Unity listo para funcionar. Descargar, instalar y configurar Esta secci√≥n explica todo lo que necesita saber para instalar el Importador de animaci√≥n y prepararlo para que trabaje bien. ","date":"22-08-2018","objectID":"/posts/2018/dev/009/:0:1","tags":["n9+","dev"],"title":"Unity : Aseprite Workflow","uri":"/posts/2018/dev/009/"},{"categories":["dev"],"content":"Descargue la herramienta Importador de animaci√≥n . Obtenga la √∫ltima versi√≥n de la herramienta del repositorio de github. Este es un .unitypackage , que es como un zip que contiene los archivos de los assets. ","date":"22-08-2018","objectID":"/posts/2018/dev/009/:1:0","tags":["n9+","dev"],"title":"Unity : Aseprite Workflow","uri":"/posts/2018/dev/009/"},{"categories":["dev"],"content":"Importar el paquete en Unity . Despu√©s de descargar el paquete, imp√≥rtelo en Unity a trav√©s de Assets \u003e Import Package \u003e Custom Package‚Ä¶ ","date":"22-08-2018","objectID":"/posts/2018/dev/009/:2:0","tags":["n9+","dev"],"title":"Unity : Aseprite Workflow","uri":"/posts/2018/dev/009/"},{"categories":["dev"],"content":"Instalar el importador de animaci√≥n . Abra el importador a trav√©s de Window \u003e Animation Importer Primero aseg√∫rese de que la ruta a su aplicaci√≥n Aseprite sea la correcta. Deber√≠a ser correcto a menos que lo haya movido a una ubicaci√≥n adem√°s del predeterminado. Target Object debe dejarse como SpriteRenderer. Esto se usa para crear animaciones para elementos de la interfaz de usuario, pero como ahora estamos creando un personaje, lo dejamos en SpriteRenderer. Especifique los P√≠xeles por unidad de su proyecto. Este es el n√∫mero de p√≠xeles en el sprite que corresponden a una unidad en el mundo. Solo usamos 1 para mantenerlo simple (1 p√≠xel es 1 unidad), pero podemos cambiarlo a nuestro tama√±o de mosaico de 16 debido a las preocupaciones sobre la precisi√≥n del punto flotante. Decide d√≥nde quieres que salgan tus Sprites, Animaciones y AnimatorControllers. Estos son los activos generados en la importaci√≥n. Usamos el mismo directorio porque mantiene todos los archivos en un solo lugar. Hace que sea f√°cil eliminarlos a todos o renombrarlos todos (a granel) si es necesario. Elige un esquema de nombres de sprites si lo deseas. Usamos el valor predeterminado porque rara vez tenemos que mirar los nombres de los sprites para que no nos moleste. Optamos por no participar en la importaci√≥n autom√°tica. Puede ser incre√≠ble, pero no hemos tenido ning√∫n problema con el flujo de trabajo manual. Los ajustes de Non-Looping son donde especifica qu√© clips deben no estar en bucle. Querr√° volver a esto cuando agregue animaciones, pero por ahora puede dejar los valores predeterminados. Felicidades! Ya terminaste con la configuraci√≥n. Crea tu archivo Aseprite A continuaci√≥n, explicar√© los conceptos b√°sicos del uso de Aseprite para crear tu personaje. Si desea saber m√°s sobre las cosas que puede hacer en Aseprite, puede consultar su documentaci√≥n. ","date":"22-08-2018","objectID":"/posts/2018/dev/009/:3:0","tags":["n9+","dev"],"title":"Unity : Aseprite Workflow","uri":"/posts/2018/dev/009/"},{"categories":["dev"],"content":"Crear un nuevo archivo en Aseprite Abra Aseprite y cree un nuevo archivo. Establezca el tama√±o de Sprite en el tama√±o deseado de cada celda. Esto ser√° lo mismo para cada celda de la animaci√≥n, por lo que debe ser lo m√°s grande que pueda necesitar. . ","date":"22-08-2018","objectID":"/posts/2018/dev/009/:4:0","tags":["n9+","dev"],"title":"Unity : Aseprite Workflow","uri":"/posts/2018/dev/009/"},{"categories":["dev"],"content":"Crea el primer cuadro Luego usa las herramientas de pintura para crear el primer cuadro de la animaci√≥n de tu personaje. Tambi√©n puede agregar capas que afectan a todos los marcos y son especialmente √∫tiles para gu√≠as o sombras de puntos. Cada capa se puede bloquear u ocultar, como se muestra en este gif. . Avancemos y guardemos el archivo ahora. El Importador de animaci√≥n requiere que los archivos Aseprite se almacenen en el proyecto, as√≠ que adelante, gu√°rdelo en la carpeta que elija. Ponemos todos nuestros archivos Aseprite dentro de una √∫nica carpeta Aseprite con subcarpetas para varios tipos de objetos, como Doodads y Characters. ","date":"22-08-2018","objectID":"/posts/2018/dev/009/:5:0","tags":["n9+","dev"],"title":"Unity : Aseprite Workflow","uri":"/posts/2018/dev/009/"},{"categories":["dev"],"content":"Agregar cuadros . A√±ada marcos haciendo clic con el bot√≥n derecho en la celda y seleccionando ‚ÄòNuevo Frame‚Äô o ‚ÄòNuevo empty frame‚Äô. El peque√±o c√≠rculo dentro de cada celda indica que tiene p√≠xeles dibujados en √©l. Agregue tantos marcos como necesite para su inactividad. Terminamos usando 6 en nuestro tiempo libre. Tambi√©n puede editar cada cuadro para establecer la duraci√≥n en milisegundos. ","date":"22-08-2018","objectID":"/posts/2018/dev/009/:6:0","tags":["n9+","dev"],"title":"Unity : Aseprite Workflow","uri":"/posts/2018/dev/009/"},{"categories":["dev"],"content":"Nombrar (etiquetar) la animaci√≥n . A continuaci√≥n, tenemos que agrupar los marcos como una animaci√≥n. Esto ayuda a Unity a saber qu√© cuadros crear en los clips de animaci√≥n. Aseprite usa lo que llama ‚ÄúEtiquetas‚Äù para designar marcos como parte de una sola animaci√≥n. Para etiquetar su animaci√≥n, seleccione todas las celdas haciendo clic y arrastrando los n√∫meros, haga clic derecho y seleccione ‚ÄúNueva etiqueta‚Äù. Nombra la etiqueta, dale un color opcional y selecciona ‚ÄúAceptar‚Äù. Puede crear tantas etiquetas como necesite e incluso superponerlas. Aqu√≠ he hecho un h√©roe con dos animaciones, un Inactivo y un Ataque. Como estamos haciendo un juego de arriba abajo, tenemos que animar en varias direcciones. As√≠ que nombramos nuestras animaciones con la direcci√≥n como un sufijo, como Idle_D y Attack_D como se muestra en la siguiente captura de pantalla. . ","date":"22-08-2018","objectID":"/posts/2018/dev/009/:7:0","tags":["n9+","dev"],"title":"Unity : Aseprite Workflow","uri":"/posts/2018/dev/009/"},{"categories":["dev"],"content":"Importe el archivo Aseprite en la unidad A continuaci√≥n, tenemos que importar el archivo a Unity para que podamos animar un personaje. Aqu√≠ es donde entra la herramienta Importador de animaci√≥n. . Ve a Window \u003e Animation Importer y abrir el Importador. Ver√°s tres botones grandes en la parte superior de la ventana, con tres encabezados. Cada uno de estos representa un m√©todo para importar el archivo Aseprite. Los m√©todos son Animaciones , Animator Controller + Animations y Animator Override Controller + Animations . Cada uno de estos tiene un prop√≥sito ligeramente diferente, pero todos importan las animaciones del archivo Aseprite. Para entender cu√°ndo usar cada uno y cu√°l es el mejor para su flujo de trabajo, es mejor comprender qu√© es un Animator Controller y qu√© un Animator Override Controller. Por ahora queremos \" Animator Controller and Animations ‚Äú, as√≠ que haga clic en su archivo Aseprite y arr√°strelo y su√©ltelo en la ventana donde dice \" Animator Controller + Animations \" como se muestra en el GIF. Despu√©s de la barra de progreso, ver√° 4 archivos nuevos como se muestra (tenga en cuenta que pueden estar en subdirectorios seg√∫n la configuraci√≥n del Importador de animaci√≥n). . La hoja de Sprites es la textura y los sprites en fragmentos a los que hacen referencia los clips de animaci√≥n. Tambi√©n puede utilizar estos sprites como sprites √∫nicos en todo su proyecto. El Controlador Animator se usa en Animators para vincular clips de animaci√≥n al objeto. Si abre el Controlador, ver√° los dos estados, uno para cada clip de animaci√≥n. . Actualizar estos activos es tan simple como arrastrar y soltar el archivo en el Importador de Animaci√≥n nuevamente. Esto har√° que los activos se regeneren sin destruir las referencias a ellos. Poniendo los activos a trabajar Has creado todos los recursos que necesitas para animar a tu personaje en el juego. La siguiente tarea es crear un GameObject que pueda usar estas animaciones y un script para controlarlo. Conclusi√≥n Con un poco de pr√°ctica, este flujo de trabajo se convertir√° en una optimizaci√≥n de tiempo bestial. Al agilizar la creaci√≥n y actualizaci√≥n de controladores y clips, el flujo de trabajo de Aseprite a Importador de Animaciones elimina todas las molestias de los flujos de trabajo predeterminados de Unity. Ahora puede pasar su tiempo iterando en su arte en lugar de buscar con Unity. . ","date":"22-08-2018","objectID":"/posts/2018/dev/009/:8:0","tags":["n9+","dev"],"title":"Unity : Aseprite Workflow","uri":"/posts/2018/dev/009/"},{"categories":["aprende c# con unity"],"content":"La parte de ‚Äúacci√≥n‚Äù de la programaci√≥n proviene de ‚Äúllamar‚Äù (tambi√©n conocido como ‚Äúinvocar‚Äù) algo llamado ‚Äúm√©todo‚Äù (tambi√©n conocido como ‚Äúfunci√≥n‚Äù). En esta lecci√≥n aprenderemos c√≥mo definir y llamar a nuestros propios m√©todos, y luego revisaremos algunos m√°s que son especiales para Unity. Finalmente, crearemos nuestra propia demo de ‚ÄúMagic 8 Ball‚Äù y explicaremos c√≥mo vincular un m√©todo con el clic de un bot√≥n y generar el resultado de una etiqueta. GitHub\rGitlab\r","date":"19-08-2018","objectID":"/posts/2018/csharpunity/004/:0:0","tags":["n9+","csharp","unity"],"title":"Aprende C# con Unity - M√©todos","uri":"/posts/2018/csharpunity/004/"},{"categories":["aprende c# con unity"],"content":"Declaraciones de m√©todos Un m√©todo requiere al menos tres cosas, pero generalmente tiene cuatro: un tipo de datos de retorno un nombre de identificador un conjunto de par√°metros un cuerpo (opcional si tambi√©n marca el m√©todo como ‚Äúabstracto‚Äù, ‚Äúexterno‚Äù o ‚Äúparcial‚Äù, pero esas son caracter√≠sticas avanzadas para m√°s adelante). Aqu√≠ est√°n algunas muestras: private void MetodoQueRealizaAlgo() { Debug.Log(\"Hola Mundo!\"); } Este m√©todo se declara con un tipo de devoluci√≥n de ‚Äúvac√≠o‚Äù, que es un caso especial y significa que no devuelve nada. El nombre del identificador es ‚ÄúMetodoQueRealizaAlgo‚Äù y el conjunto de par√°metros est√° vac√≠o (hay par√©ntesis sin nada dentro). El ‚Äúcuerpo‚Äù del m√©todo es todo, desde el corchete abierto hasta el corchete de cierre ‚Äú{‚Äù y ‚Äú}‚Äù. Puede colocar ‚Äúdeclaraciones‚Äù dentro de un cuerpo de m√©todo como he hecho aqu√≠. Cuando se llame a nuestro m√©todo, veremos el mensaje ‚ÄúHola Mundo!‚Äù impreso en la consola. public bool IsRegistrado (string myID) { return string.Equals(myID, \"Moon\"); } Este m√©todo de ejemplo comienza con la palabra clave ‚Äúpublic‚Äù, que puede recordar al usar las variables en la lecci√≥n anterior. Al igual que las variables, los m√©todos predeterminados son ‚Äúprivados‚Äù a menos que especifique lo contrario. Al hacer p√∫blico este m√©todo, otras clases pueden ‚Äúinvocarlo‚Äù. Luego vemos un tipo de retorno de ‚Äúbool‚Äù (verdadero o falso). Tenga en cuenta que a menos que el tipo de devoluci√≥n de su m√©todo sea ‚Äúvac√≠o‚Äù debe tener una declaraci√≥n dentro del m√©todo que realmente ‚Äúdevuelva‚Äù un valor del tipo que indic√≥, o el compilador se quejar√° , ‚Äúno todas las rutas de c√≥digos devuelven un valor‚Äù . Por lo general, esta ser√° la √∫ltima l√≠nea del m√©todo, ya que las instrucciones posteriores al ‚Äúretorno‚Äù no se podr√°n ejecutar. El identificador es ‚ÄúIsRegistrado‚Äù y tomamos un √∫nico par√°metro llamado ‚ÄúmyID‚Äù que debe ser un tipo de ‚Äústring‚Äù. private int Multiplicar (int a, int b) { return a * b; } Marqu√© el √∫ltimo m√©todo de ejemplo ‚Äúprivado‚Äù, que es innecesario ya que es privado de forma predeterminada, pero a veces es posible que desee volver a repetir sus intenciones a otros programadores. Este m√©todo devolver√° un ‚Äúint‚Äù (un valor num√©rico que usa n√∫meros enteros). El identificador es ‚ÄúMultiplicar‚Äù y toma dos par√°metros. Tenga en cuenta que cada par√°metro debe especificar su propio tipo de datos, nombre de identificador y m√∫ltiples par√°metros est√°n separados por comas. ","date":"19-08-2018","objectID":"/posts/2018/csharpunity/004/:1:0","tags":["n9+","csharp","unity"],"title":"Aprende C# con Unity - M√©todos","uri":"/posts/2018/csharpunity/004/"},{"categories":["aprende c# con unity"],"content":"Invocaciones de m√©todo Para ‚Äúinvocar‚Äù su m√©todo, utiliza una declaraci√≥n que hace referencia al identificador del m√©todo seguido de los par√°metros necesarios, y luego a un punto y coma. Tenga en cuenta que no necesita volver a especificar el tipo o el nombre del par√°metro, y puede pasar cualquier valor o variable existente, siempre que el tipo de datos coincida. En un minuto mostrar√© el c√≥digo que llama a cada uno de nuestros m√©todos de demostraci√≥n, pero antes de eso, agreguemos algunas variables a nuestra clase para hacerlo m√°s interesante. public string test; public int value1; public int value2; Las declaraciones que escribimos que llaman a nuestros m√©todos deben ser ‚Äúejecutadas‚Äù ellas mismas, y la manera m√°s f√°cil de hacerlo es conectarnos a un m√©todo que Unity que llamar√° por nosotros. Agregue el siguiente c√≥digo en el m√©todo de Start: void Start () { MetodoQueRealizaAlgo(); if (IsRegistrado(test)) { Debug.Log(\"Registrado.\"); } else { Debug.Log(\"No Registrado.\"); } int value = Multiplicar(value1, value2); Debug.Log(\"Resultado: \" + value); } La primera afirmaci√≥n que hemos hecho ‚Äúllama‚Äù a nuestro primer m√©todo de ejemplo ‚ÄúMetodoQueRealizaAlgo‚Äù. Es muy simple porque no acepta ni devuelve ning√∫n valor. Luego tenemos algo llamado ‚Äúinstrucci√≥n if‚Äù que nos permite ramificar y ejecutar c√≥digo selectivamente. Lo que aparece dentro del par√©ntesis de apertura y cierre se eval√∫a como verdadero o falso y esa evaluaci√≥n determina qu√© camino seguir. Debido a que nuestro m√©todo arroja un valor verdadero o falso, podemos simplemente invocarlo en su lugar. Si el valor que devuelve nuestro m√©todo ‚ÄúIsRegistrado‚Äù es ‚Äúverdadero‚Äù, entonces veremos el mensaje ‚ÄúRegistrado‚Äù impreso en la consola. De lo contrario, la condici√≥n ‚Äúelse‚Äù se hace cargo y veremos el mensaje ‚ÄúNo registrado‚Äù impreso en su lugar. Al igual que un m√©todo, las instrucciones de c√≥digo que se ejecutan selectivamente est√°n envueltas por un corchete de abrir y cerrar. Consejo Una ‚Äúdeclaraci√≥n if‚Äù es un tipo especial de declaraci√≥n de ‚Äúselecci√≥n‚Äù. Hay algunas caracter√≠sticas adicionales que no se muestran en este ejemplo, como la capacidad de usar una o m√°s ramas ‚Äúelse if‚Äù y la capacidad de crear condiciones compuestas (como ‚Äúcondition1 o condition2‚Äù y ‚Äúcondition1 y condition2‚Äù ) Consulte la referencia para obtener m√°s informaci√≥n: ¬†https://msdn.microsoft.com/en-us/library/5011f09h.aspx Debemos pasar una cadena como par√°metro cuando invocamos ‚ÄúIsRegistrado‚Äù, pero no nos confundamos por el nombre del par√°metro en nuestra declaraci√≥n de m√©todo y el nombre de lo que pasamos en nuestra declaraci√≥n: los nombres no tienen que coincidir. De hecho, el valor ni siquiera tiene que ser nombrado. Podr√≠a haber pasado un valor literal como ‚ÄúMoon‚Äù (tenga en cuenta que habr√≠a incluido las comillas en el c√≥digo). El nombre en la declaraci√≥n del par√°metro se usa en la implementaci√≥n del m√©todo (las declaraciones que aparecen dentro del m√©todo), pero de lo contrario no importa. Lo que s√≠ importa es que pasemos ‚Äúalgo‚Äù del tipo de datos correcto. Si accidentalmente pasa el tipo de datos incorrecto, el compilador generar√° un error, ‚ÄúLa mejor coincidencia de m√©todo sobrecargado para ‚ÄòCLASS.METHOD (ARG)‚Äô tiene algunos argumentos inv√°lidos‚Äù. En este ejemplo, usamos la variable de cadena llamada ‚Äútest‚Äù que definimos anteriormente en nuestra clase. El m√©todo ‚ÄúIsRegistrado‚Äù se marc√≥ como p√∫blico, lo que no hace diferencia en el ejemplo presentado aqu√≠. Una clase puede llamar a cualquiera de sus m√©todos independientemente de si el m√©todo est√° marcado como p√∫blico, privado o protegido. Sin embargo, si otra clase tuviera una referencia a una instancia de esta clase, podr√≠amos ‚Äúllamar‚Äù cualquier m√©todo p√∫blico que contenga a trav√©s de la notaci√≥n de puntos con una declaraci√≥n como la siguiente: bool resultado = instance.IsRegistrado(\"Moon\"); Finalmente llamamos al m√©todo ‚ÄúMultiplicar‚Äù pasando dos variables separadas por comas del tipo correcto, en este caso nuestras variables ‚Äúvalue1‚Äù y ‚Äúvalue2‚Äù. El valor devue","date":"19-08-2018","objectID":"/posts/2018/csharpunity/004/:2:0","tags":["n9+","csharp","unity"],"title":"Aprende C# con Unity - M√©todos","uri":"/posts/2018/csharpunity/004/"},{"categories":["aprende c# con unity"],"content":"M√©todos MonoBehaviour Los dos m√©todos m√°s comunes para familiarizarse son los dos incluidos en la plantilla (‚ÄúStart‚Äù y ‚ÄúUpdate‚Äù). Sin embargo, hay muchos m√°s m√©todos de plantilla en los que puede conectarse. Los siguientes son algunos de los que uso con m√°s frecuencia. ‚ÄúAwake‚Äù se llama inmediatamente despu√©s de la instanciaci√≥n de un objeto. Es la primera llamada a m√©todo con la que puede conectarse, y puede ser una buena ubicaci√≥n para ‚Äúinicializaci√≥n‚Äù (esto puede incluir obtener referencias a otros componentes o crear instancias de prefabricados, etc.) aunque en otras ocasiones podr√≠a necesitar esperar hasta \" Start ‚Äúpara asegurarse de que todo est√© activo y configurado correctamente. Tenga en cuenta que tanto Awake como Start solo se llamar√°n una vez en la vida de un objeto. ‚ÄúOnEnable‚Äù se llama despues. A menudo uso OnEnable para registrar oyentes de eventos y OnDisable para eliminarlos. Una diferencia clave entre este m√©todo y Awake o Start es que se puede invocar varias veces, cada vez que cambia el estado ‚Äúhabilitado‚Äù del objeto, por lo que solo tiene sentido ir a ciertos tipos de c√≥digo de inicializaci√≥n. Se llamar√° a ‚ÄúStart‚Äù antes del primer frame del m√©todo de ‚ÄúUpdate‚Äù(despu√©s de que todos los objetos hayan ejecutado sus m√©todos Awake y OnEnable) siempre que el objeto en el que est√° activado est√© habilitado. Al igual que el m√©todo ‚ÄúAwake‚Äù, puede ser un buen lugar para inicializar tus objetos. ‚ÄúUpdate‚Äù se llama una vez por frame, en un intervalo de tiempo variable, y proporciona un manejo conveniente para el ‚Äúbucle del juego‚Äù. ‚ÄúFixedUpdate‚Äù es similar pero se ejecuta en un intervalo de tiempo fijo y se usa para interactuar con F√≠sica. Se llama a ‚ÄúLateUpdate‚Äù despu√©s de que la Actualizaci√≥n haya finalizado y proporciona una opci√≥n para que tenga l√≥gica en respuesta a otros cambios. Se llama a ‚ÄúOnDestroy‚Äù cuando eliminas un GameObject de la escena. Solo se llama una vez en la vida de un objeto y puede ser un buen lugar para limpiar todo lo que se cre√≥ durante la inicializaci√≥n. Por ejemplo, si creaste una textura o malla, querr√°s asegurarte de que tambi√©n se destruyan aqu√≠. Consejo Consulte la referencia de la clase MonoBehaviour para familiarizarse con todos los m√©todos disponibles: ¬†http://docs.unity3d.com/ScriptReference/MonoBehaviour.html . Luego, consulte este enlace en el ‚Äúorden de ejecuci√≥n‚Äù (qu√© m√©todo se llamar√° y en qu√© momento) aqu√≠: ¬†http://docs.unity3d.com/Manual/ExecutionOrder.html ","date":"19-08-2018","objectID":"/posts/2018/csharpunity/004/:3:0","tags":["n9+","csharp","unity"],"title":"Aprende C# con Unity - M√©todos","uri":"/posts/2018/csharpunity/004/"},{"categories":["aprende c# con unity"],"content":"Magic 8 Ball Crea una nueva escena y agregue un Panel (desde la barra de men√∫ elija GameObject -\u003e UI -\u003e Panel). Luego agregue un objeto de Bot√≥n y Texto y agr√©galos a ambos al panel. El bot√≥n se usar√° para activar una respuesta de nuestra Bola m√°gica 8, y el texto es la etiqueta donde se mostrar√° la respuesta. Crea un nuevo script llamado ‚ÄúMagic‚Äù y pega el siguiente c√≥digo: using UnityEngine; using UnityEngine.UI; using System.Collections; public class Magic : MonoBehaviour { public string[] respuestas; [SerializeField] Text _label; public void Pregunta() { int index = UnityEngine.Random.Range(0, respuestas.Length); _label.text = respuestas[index]; } } En la l√≠nea 7 de este script, hemos declarado un tipo especial de variable que a√∫n no te he mostrado: una matriz o array. Una matriz es una colecci√≥n de valores del tipo especificado. La declaraci√≥n de nuestra variable ‚Äúrespuestas‚Äù tiene el mismo aspecto que declarar una variable de string normal, excepto que agregamos un corchete de abrir y cerrar despu√©s del tipo de datos. Puede hacer que cualquier declaraci√≥n de variable sea una matriz utilizando este ejemplo. Como nuestra variable es p√∫blica, aparecer√° en el inspector y llenaremos sus valores all√≠. Consejo Hay muchos tipos de matrices, incluidas matrices unidimensionales, multidimensionales e irregulares. Tambi√©n hay muchas formas de inicializarlos. Valdr√≠a la pena investigar la gama completa de opciones disponibles aqu√≠: ¬†https://msdn.microsoft.com/en-us/library/aa288453(v=vs.71).aspx Tambi√©n creamos una variable para mantener una referencia a un componente de texto. Usamos la marca ‚Äú[SerializeField]‚Äù en lugar de ‚Äúpublic‚Äù porque necesitamos asignar la referencia en el inspector, pero ning√∫n otro script ‚Äúnecesita saber‚Äù sobre esta etiqueta o su uso, es algo ‚Äúinterno‚Äù para la implementaci√≥n de nuestro script y podr√≠a cambiar f√°cilmente en cualquier momento. En la l√≠nea 10, definimos un m√©todo que usaremos como un ‚Äúdetector de eventos‚Äù, un m√©todo que se invoca autom√°ticamente en funci√≥n de los eventos activados. En este caso, nuestro ‚Äúevento‚Äù es presionar un bot√≥n de UI. Tenga en cuenta que nuestro m√©todo debe ser p√∫blico para poder conectarlo al bot√≥n a trav√©s del inspector. Nuestro m√©todo tiene dos declaraciones. La primera (l√≠nea 12) crea una variable temporal llamada √≠ndice, a la que asignamos un n√∫mero aleatorio. Generamos nuestro n√∫mero aleatorio utilizando el m√©todo ‚ÄúRange‚Äù, que nos permite especificar un valor m√≠nimo (incluido) y m√°ximo (exclusivo) para producir el resultado. Si nuestra matriz de respuestas tuviera 3 strings, entonces generar√≠amos 0, 1 o 2 de este m√©todo, porque el valor que especificamos para ‚Äúmin‚Äù es 0 y el valor que especificamos para ‚Äúmax‚Äù es din√°mico basado en la cantidad de respuestas en la matriz. La siguiente declaraci√≥n (l√≠nea 13) asigna a la variable de texto de nuestra etiqueta una de las respuestas de nuestra matriz. Se accede a los valores individuales dentro de la matriz mediante ‚Äú√≠ndice‚Äù (un valor num√©rico dentro de corchetes). Tenga en cuenta que las matrices est√°n basadas en cero, lo que significa que el primer elemento de la matriz se encuentra en el √≠ndice 0. Regresa a Unity y adjunta el script a algo de la escena. Tenga en cuenta que realmente no importa d√≥nde lo conecte, pero un objeto de nivel ra√≠z como el ‚ÄúCanvas‚Äù o un objeto de juego ‚ÄúControlador‚Äù especialmente creado (solo un GameObject vac√≠o) son candidatos bastante buenos que alguien podr√≠a esperar usar. Asigne la referencia de la etiqueta del script (tenga en cuenta que aparecer√° como ‚ÄúTexto‚Äù en el inspector aunque usemos ‚Äútexto label‚Äù en el c√≥digo) arrastrando y soltando el objeto Texto de la escena en el campo en el inspector de nuestro guion. Expanda el campo ‚ÄúRespuestas‚Äù haciendo clic en la flecha y establezca el tama√±o para contener tantas respuestas como desee (debe ser al menos una o la demostraci√≥n generar√° un error, porque mi c√≥digo de muestra no muestra errores). Agregue algunas respuestas como: ‚ÄúS√≠ Definitivamente","date":"19-08-2018","objectID":"/posts/2018/csharpunity/004/:4:0","tags":["n9+","csharp","unity"],"title":"Aprende C# con Unity - M√©todos","uri":"/posts/2018/csharpunity/004/"},{"categories":["aprende c# con unity"],"content":"Si yo fuera un modelo de datos de una maquina, habr√≠a variables que me describir√≠an incluyendo una para hacer referencia a mi nombre (un valor que no ha cambiado) y mi edad (un valor que cambia cada a√±o). Algunas variables solo pueden ser determinadas por m√≠, como el nombre de mi pel√≠cula favorita, y otras pueden ser controladas total o parcialmente por fuentes externas, como mi estado civil. Todos estos tipos de relaciones se pueden modelar en c√≥digo cuando conoces el vocabulario correcto. En esta lecci√≥n, crearemos una clase que implemente el ejemplo que acabo de proporcionar, y luego usaremos nuestra comprensi√≥n de variables para animar un sistema solar de ejemplo, todo con un solo script. GitHub\rGitlab\r","date":"19-08-2018","objectID":"/posts/2018/csharpunity/003/:0:0","tags":["n9+","csharp","unity"],"title":"Aprende C# con Unity - Variables","uri":"/posts/2018/csharpunity/003/"},{"categories":["aprende c# con unity"],"content":"Modelando un humano Para comenzar, crea una nueva escena. Agregue un GameObject vac√≠o (de la barra de men√∫ elija ‚ÄúGameObject -\u003e Create Empty‚Äù) y luego en el inspector haga clic en el bot√≥n ‚ÄúAgregar componente‚Äù. Escriba ‚ÄúHumano‚Äù en el mensaje que aparece. No hay componentes con este nombre, por lo que debe mostrar ‚ÄúNew Script‚Äù. Presiona la tecla Enter y ver√°s las opciones del script. Aseg√∫rese de que la opci√≥n Languaje est√© configurada en C# y presione la tecla Intro nuevamente. Esto crear√° un nuevo script y lo adjuntar√° al objeto simult√°neamente. Finalmente, ‚Äúduplica‚Äù el GameObject para que tengas dos ‚ÄúHumanos‚Äù (desde la barra de men√∫, elige ‚ÄúEditar -\u003e Duplicar‚Äù o Ctrl + D). Abra el script ‚ÄúHumano‚Äù en Visual Studio (o su editor de c√≥digo favorito). Para nuestra primera tarea, descubramos c√≥mo nombrar a nuestros Humanos. Todos los GameObjects ya tienen una variable para almacenar su nombre. Esto es lo que ve listado en el panel Jerarqu√≠a y en la parte superior del Inspector. Nuestros dos objetos actualmente tienen el nombre ‚ÄúGameObject‚Äù, que personalmente considero que es un nombre terrible para un ser humano. Como nota al margen, cuando ves el nombre de tu GameObject, est√°s ‚Äúleyendo‚Äù o ‚Äúobteniendo‚Äù la variable. Ahora, vamos a ‚Äúescribir‚Äù o ‚Äúestablecer‚Äù la variable. Proporcione un nombre que suene diferente para cada persona tipeando en el campo en el inspector. Ahora, eso no fue muy de programador, ¬øverdad? Veamos c√≥mo har√≠amos lo mismo a trav√©s del c√≥digo. Modifique el m√©todo de Start de la siguiente manera: private void Start() { Debug.Log(\"Hola, mi nombre es \" + name); } Guarde su script y ejecute la escena. Deber√≠a ver dos mensajes imprimirse en la ventana de la consola (un mensaje enviado por cada humano que cre√≥). . Lo que hemos hecho es ‚Äúleer‚Äù o ‚Äúobtener‚Äù el valor almacenado por una variable llamada ‚Äúname‚Äù, anexarlo a la cadena de texto y pasar todo el mensaje como un par√°metro al m√©todo que imprimi√≥ el mensaje a la consola. Para ‚Äúescribir‚Äù o ‚Äúestablecer‚Äù una variable, usamos algo llamado operador de asignaci√≥n. Para confundirte, los programadores de hace mucho tiempo decidieron que este operador se ver√≠a como el signo igual (y para comprobar realmente la igualdad, decidieron usar DOS signos iguales - suspiro). Entonces, para ‚Äúescribir‚Äù o ‚Äúestablecer‚Äù una variable, puede usar una l√≠nea de c√≥digo como la siguiente: name = \"Moon\"; Si tuviera que poner esa l√≠nea de c√≥digo en el m√©todo de Start sobre la l√≠nea que imprime el mensaje ‚ÄúHola‚Äù, cuando ejecute la escena, tendr√° dos personas que lo recibir√°n con el mensaje ‚ÄúHola, mi nombre es Moon‚Äù. Mientras que la escena contin√∫e, Moon ser√° su nombre, como puede verificar en el inspector. Sin embargo, cuando detenga la escena, los nombres volver√°n a los valores que ten√≠an antes de presionar play (en mi caso, Moon y Andrea). Lo que sucedi√≥ es que Unity est√° haciendo algo llamado ‚ÄúSerializaci√≥n‚Äù: b√°sicamente, esto significa que cualquier variable en un GameObject que Unity ‚Äúcomprenda‚Äù se guardar√° en el momento de edici√≥n con la escena como valor de inicio predeterminado. Esto le permite configurar sus niveles y asegurarse de que una escena comience de la misma manera todo el tiempo. ","date":"19-08-2018","objectID":"/posts/2018/csharpunity/003/:1:0","tags":["n9+","csharp","unity"],"title":"Aprende C# con Unity - Variables","uri":"/posts/2018/csharpunity/003/"},{"categories":["aprende c# con unity"],"content":"Campos GameObjects no tiene una variable por edad, as√≠ que a continuaci√≥n le mostrar√© c√≥mo ‚Äúdeclarar‚Äù su propia variable llamada ‚Äúcampo‚Äù. Como m√≠nimo, todas las variables deben declararse con dos cosas, un ‚ÄúTipo de datos‚Äù y un ‚ÄúNombre‚Äù mediante el cual usted ‚Äúidentifica‚Äù la variable. Agregue la siguiente l√≠nea a su script, dentro de la clase (entre los corchetes), pero fuera de los m√©todos. Por convenci√≥n, la mayor√≠a de las variables de nivel de clase aparecen en la parte superior de la clase. int edad; ","date":"19-08-2018","objectID":"/posts/2018/csharpunity/003/:2:0","tags":["n9+","csharp","unity"],"title":"Aprende C# con Unity - Variables","uri":"/posts/2018/csharpunity/003/"},{"categories":["aprende c# con unity"],"content":"Consejo: Hay muchos tipos de datos que puede elegir al declarar sus variables (consulte la lista completa aqu√≠: ¬†http://msdn.microsoft.com/en-us/library/ms228360(v=vs.90).aspx) . Los m√°s comunes que querr√°s incluir son: bool - este es un tipo de valor que por defecto es falso, y solo puede contener ‚Äúfalso‚Äù o ‚Äúverdadero‚Äù int - este es un tipo de valor que por defecto es 0, y puede contener n√∫meros enteros, por ejemplo: 42 float: este es un tipo de valor que por defecto es 0 y puede contener n√∫meros con decimales, por ejemplo: 3.14159f string - un tipo especial que tiene como valor predeterminado null (nothing), y puede contener matrices de caracteres,como: ‚ÄúHola‚Äù Como es usuario de Unity, tambi√©n usar√° con frecuencia otros tipos de datos, como: GameObject: este es un tipo de referencia cuyo valor predeterminado es nulo y puede contener una referencia a un GameObject activo. Transform: este es un tipo de referencia que por defecto es nulo y puede contener una referencia a una Transformaci√≥n activa. Vector3 - este es un tipo de valor (una estructura) que por defecto es cero en cada uno de sus subcampos (x, y , z). RigidBody: este es un tipo de referencia que se establece por defecto en nulo y puede contener una referencia a un RigidBody activo. Hay varias otras palabras que pueden aparecer en una declaraci√≥n de variable antes del tipo de datos. ‚ÄúSolo lectura‚Äù indica una variable que solo se puede asignar en el momento en que se crea un objeto (por una clase ‚ÄúConstructor‚Äù o mientras se inicia la variable). ‚ÄúConst‚Äù es similar, pero debe inicializarse solo en la declaraci√≥n. ‚ÄúEst√°tico‚Äù indica una variable que pertenece a la clase misma en lugar de instancias de la clase (por ejemplo, muchas de las variables en la clase ‚ÄúTime‚Äù son est√°ticas). Al declarar la variable en el nivel ra√≠z de nuestra clase, le estamos dando un ‚Äúalcance‚Äù de nivel de clase. Esto significa que la variable ser√° visible en todas partes dentro de la clase, incluso dentro de los m√©todos dentro de la clase. Tenga en cuenta que tambi√©n puede declarar variables dentro de un m√©todo, pero su alcance ser√° m√°s limitado, y otros m√©todos o clases no tendr√°n acceso a esas variables. Guarde su script y regrese a Unity. Mira a uno de tus Humanos e intenta establecer la variable de edad que acabamos de declarar ‚Ä¶ oye espera, ¬øpor qu√© no lo vemos? Las variables tienen algo llamado ‚Äúvisibilidad‚Äù. Cuando no se especifica la visibilidad de una variable, se predetermina a ‚Äúprivate‚Äù, lo que significa que solo su clase sabe que existe. Unity solo muestra variables que est√°n marcadas como ‚Äúpublic‚Äù o por ‚Äú[SerializeField]‚Äù, que es una forma especial de exponer una propiedad al inspector de Unity sin permitir que otros scripts conozcan la variable. Cualquiera de las siguientes l√≠neas permitir√° que su variable aparezca en el inspector, aunque por ahora, usaremos la declaraci√≥n ‚Äúpublic‚Äù: public int edad; Consejo Hay una manera de ver variables ‚Äúprivate‚Äù y ‚Äúprotected‚Äù en el inspector. Puede establecer el modo de inspector en ‚ÄúDebug‚Äù haciendo clic en el bot√≥n de la esquina superior derecha (tres l√≠neas horizontales apiladas) que aparece justo a la derecha del candado. En el modo de depuraci√≥n, podr√° ver los valores de variables privadas, sin embargo, a√∫n no podr√° escribir en ellos. Con la variable de edad establecida en p√∫blico, ahora puede verla aparecer en el inspector. ¬øPor qu√© tiene un valor ya? Nuestra variable de edad se inicializ√≥ a cero, porque ese es el valor predeterminado para ese tipo de datos, y porque no lo inicializamos a ning√∫n otro valor en nuestra declaraci√≥n. Podr√≠amos haber definido nuestra variable de la siguiente manera: public int edad = 25; Esta declaraci√≥n se ve como lo hac√≠a antes, con la excepci√≥n de que tambi√©n tenemos el operador de asignaci√≥n y un valor que est√° asignado como predeterminado. Si modifica su script para usar este ejemplo y luego regresa a Unity, los scripts Humanos todav√≠a mostrar√°n cero. Esto se debe a que 25 solo se asigna cuando el objeto se ‚Äú","date":"19-08-2018","objectID":"/posts/2018/csharpunity/003/:2:1","tags":["n9+","csharp","unity"],"title":"Aprende C# con Unity - Variables","uri":"/posts/2018/csharpunity/003/"},{"categories":["aprende c# con unity"],"content":"Propiedades En caso de que quiera establecer restricciones sobre la forma en que una variable puede cambiar, puede usar algo llamado ‚Äúpropiedad‚Äù. Las propiedades se parecen mucho a ‚Äúcampos‚Äù, que es lo que creamos con nuestra variable ‚Äúedad‚Äù, con una gran diferencia: la propiedad ‚Äúencapsula‚Äù el campo, lo que significa que las secuencias de comandos externas no tienen acceso directo al campo, y usted puede controlar lo que se les permite leer o escribir. A continuaci√≥n se muestra un ejemplo de una propiedad. public string PeliculaFavorita { get; set; } Con la excepci√≥n de los corchetes, y las palabras ‚Äúget‚Äù y ‚Äúset‚Äù, esto se ve muy similar a la declaraci√≥n de un campo. Debe incluir un ‚Äúgetter‚Äù o ‚Äúsetter‚Äù (las palabras clave get y set), pero no tiene que especificar ambos. Adem√°s, puede tener diferentes niveles de visibilidad para cada uno. En este ejemplo, otros scripts podr√°n leer y escribir el valor de PeliculaFavorita. Podemos cambiarlo as√≠: public string PeliculaFavorita { get; private set; } Ahora, otras clases pueden descubrir cu√°l es la pel√≠cula favorita de este Humano, pero no tienen la capacidad de cambiarla. Solo los m√©todos dentro de la clase Humana pueden modificar el valor almacenado. Aunque esta propiedad es p√∫blica, no podr√° verla en el Inspector. Las propiedades en realidad no almacenan ning√∫n dato como lo hace un campo. Lo que est√° sucediendo es que el compilador de C# crea autom√°ticamente otro campo, que es ‚Äúprivado‚Äù y lee ese valor cuando usa el captador, y escribe en el campo cuando usa el colocador. La siguiente forma es funcionalmente id√©ntica, pero ayuda a ilustrar la anterior versi√≥n. public string PeliculaFavorita { get { return _peliculaFavorita; } private set { _peliculaFavorita = value; } } private string _peliculaFavorita; Si especifica su propio ‚Äúget y set‚Äù para una propiedad de esta manera, tambi√©n puede agregar la etiqueta ‚Äú[SerializeField]‚Äù y obtendr√° lo mejor de ambos mundos: sus datos est√°n encapsulados y a√∫n puede configurarlos f√°cilmente con el inspector. Por otro lado, tambi√©n agrega mucho c√≥digo a sus scripts de esta manera, y puede ralentizar el desarrollo y hacer que un script sea m√°s dif√≠cil de leer y mantener. Por lo general, solo convierto mis campos en propiedades si necesito limitar el acceso de alguna manera o responder cada vez que cambia un valor. Consejo El captador y el colocador de una propiedad son muy similares a los m√©todos. El getter es como un m√©todo con un tipo de retorno que coincide con el tipo de propiedad y que no toma ning√∫n par√°metro. El colocador es como un m√©todo con un tipo de vac√≠o devuelto pero que acepta un par√°metro. Cualquier declaraci√≥n que aparezca entre los corchetes del getter y del setter se ejecutar√° cuando la propiedad sea le√≠da o escrita, respectivamente. ","date":"19-08-2018","objectID":"/posts/2018/csharpunity/003/:3:0","tags":["n9+","csharp","unity"],"title":"Aprende C# con Unity - Variables","uri":"/posts/2018/csharpunity/003/"},{"categories":["aprende c# con unity"],"content":"Modelado de un sistema solar El ejemplo humano sirvi√≥ para ilustrar vocabulario diverso para variables, pero no fue muy inspirador porque no ‚Äúhizo‚Äù nada. Hagamos un ejemplo m√°s interesante y permitamos que las variables que definimos tengan un efecto sobre otra cosa. Crea una nueva escena para trabajar. Si tienes algunas texturas bonitas y sabes c√≥mo aplicarlas a las esferas, crea una esfera y aplica tu textura. De lo contrario, simplemente crea un cubo, para que sea m√°s obvio cuando usamos el c√≥digo para hacer que gire (desde la barra de men√∫ elige ‚ÄúGameObject -\u003e 3D Object -\u003e Cube‚Äù). Cree un nuevo script llamado ‚ÄúMotor‚Äù y ejec√∫telo de la siguiente manera: using UnityEngine; using System.Collections; public class Motor : MonoBehaviour { public float vel; void Update () { transform.Rotate( new Vector3(0, vel * Time.deltaTime, 0) ); } } En la l√≠nea 6 de este script definimos la variable ‚Äúvel‚Äù, que determinar√° la velocidad en ‚Äúgrados por segundo‚Äù, en la cual un objeto est√° girando. Por ejemplo, para hacer que un objeto gire en un c√≠rculo completo cada segundo, le conviene asignar el valor ‚Äú360‚Äù. Esta unidad de medida har√≠a un gran calculo, aunque lo exclu√≠ porque lo estoy explicando aqu√≠ y quiero mantener los fragmentos de c√≥digo peque√±os. Tenga en cuenta que no asignamos el valor de la variable en ning√∫n lugar de este script porque se supondr√° que la persona que lo utiliza lo asignar√° en el editor o mediante otro script. Consejo Cuando asigna valores a un float en el inspector, puede completar valores enteros o decimales normales como normalmente los ver√≠a. Si tuvi√©ramos que asignar un valor num√©rico a una variable float en el c√≥digo, deber√≠a ir seguido de la letra ‚Äòf‚Äô, como ‚Äúvel = 3.14f;‚Äù. Se supone que los n√∫meros enteros, como ‚Äú10‚Äù son de tipo ‚Äúint‚Äù, y que los compiladores suponen que los n√∫meros con decimales son de tipo ‚Äúdouble‚Äù. Un tipo de datos floats puede contener cualquier valor que pueda contener un int, pero no cualquier valor que pueda contener un double, y es por eso que se requiere la ‚Äòf‚Äô. En la l√≠nea 8 vemos un m√©todo que se incluye en el c√≥digo de plantilla predeterminado llamado ‚ÄúUpdate‚Äù. Unity llama a este m√©todo una vez por frame para permitirle modificar los objetos del juego de forma incremental. Los sistemas r√°pidos pueden llamar a este m√©todo 100 veces por segundo, mientras que las m√°quinas lentas o los tel√©fonos m√≥viles solo pueden llamarlo 30 veces por segundo. Si tuviera que hacer cambios en objetos usando valores fijos, entonces parecer√≠a jugaria ‚Äúm√°s r√°pido‚Äù en la mejor m√°quina. Para crear una muestra que parece ejecutarse a la misma velocidad en todas las plataformas, multiplicamos nuestra velocidad deseada por ‚ÄúTime.deltaTime‚Äù, de modo que la tasa real que usamos no es constante, sino que var√≠a seg√∫n la cantidad de tiempo que realmente ha pasado. Por ejemplo, en el tel√©fono m√≥vil, el ejemplo Time.deltaTime podr√≠a ser 0.0333 ‚Ä¶ y en el equipo m√°s r√°pido algo as√≠ como 0.01 en su lugar. La declaraci√≥n que ponemos dentro del m√©todo es compuesta (est√° haciendo muchas cosas). Podr√≠a haber sido m√°s detallado como en el siguiente ejemplo que es funcionalmente equivalente: float velFrameLimitada = vel * Time.deltaTime; Vector3 rotacion = new Vector3(0, velFrameLimitada, 0); transform.Rotate( rotacion ); Este ejemplo muestra que creamos una nueva variable float que contiene la velocidad de giro para este frame. Tambi√©n creamos un Vector3, que es una variable struct especial. Usted crea el Vector3 usando algo llamado ‚ÄúConstructor‚Äù que toma tres par√°metros que representan valores para tres ejes: X, Y y Z. Finalmente, pasamos el Vector3 a un m√©todo que realmente rota el objeto mismo. A veces, expandir el c√≥digo de este modo lo ayuda a ser m√°s legible, pero en este caso, sent√≠ que definirlo en una sola l√≠nea estaba bien. Algunas de las razones por las que me hubiera ido con la versi√≥n posterior incluyen: necesidad de usar las variables en m√°s de un lugar la l√≠nea individual es excesivamente larga, as√≠ que tendr√≠a","date":"19-08-2018","objectID":"/posts/2018/csharpunity/003/:4:0","tags":["n9+","csharp","unity"],"title":"Aprende C# con Unity - Variables","uri":"/posts/2018/csharpunity/003/"},{"categories":["aprende c# con unity"],"content":"Si nunca antes has creado un script, no te preocupes, no es exactamente ciencia de cohetes. Aprender a programar es como aprender un nuevo idioma, pero est√°s ‚Äúhablando‚Äù con la maquina. Al igual que un lenguaje humano se puede dividir en oraciones que consisten en un sustantivo y un verbo, los lenguajes de programaci√≥n se pueden dividir en variables (el sustantivo) y m√©todos (el verbo) que a menudo se combinan en enunciados (la oraci√≥n). Aprender a programar simplemente requiere un poco de esfuerzo para aprender el vocabulario y luego juntarlo de una manera l√≥gica. El script que crearemos contendr√° el c√≥digo al que nos referimos como una ‚Äúclase‚Äù. Una clase a menudo se relaciona conceptualmente con un plano desde el que puede crear objetos. En Unity, usar√°s tu clase para crear ‚Äúcomponentes‚Äù que se conectan a ‚ÄúGameObjects‚Äù de forma muy similar a como puedes agregar un colisionador de f√≠sica o un componente de audio. Al escribir sus propios scripts, puede tener una funcionalidad completamente nueva y personalizada de su propio dise√±o. GitHub\rGitlab\rEn el panel Project de Unity, seleccione el bot√≥n ‚ÄúCreate‚Äù, desde el cual tiene la opci√≥n ‚ÄúScript C#‚Äù. Alternativamente, tambi√©n puede usar la barra de men√∫, ‚ÄúAssets-\u003e Create-\u003e Script C#‚Äù, pero de todos modos tendr√° que volver al panel del proyecto para nombrar y abrir el nuevo archivo. De forma predeterminada, habr√° creado un archivo llamado ‚ÄúNewBehaviourScript‚Äù y el nombre del archivo se seleccionar√° para que usted lo edite. Por ahora solo escribe ‚ÄúDemo‚Äù para el nombre de nuestro script. Consejo El nombre de archivo que escriba para su script es importante por una variedad de razones: El nombre del archivo se usar√° autom√°ticamente como el nombre de la clase en el c√≥digo de plantilla que crea autom√°ticamente. Hay algunas reglas sobre qu√© nombres son legales para usar en una clase: Debe comenzar con una letra y debe consistir solo en caracteres alfanum√©ricos. Si intent√≥ ingresar ‚Äú1Bunny‚Äù, obtendr√° un error (aparecer√° un signo de admiraci√≥n rojo en la consola y en la parte inferior de la ventana de Unity) con el siguiente mensaje, \" Assets/1Bunny.cs (4,14): error CS8025: error de an√°lisis ‚Äú. Tenga en cuenta que no podr√° jugar su juego mientras haya errores. No puede soportar espacios. Si trataste de ingresar un nombre con un espacio, como ‚ÄúMi clase‚Äù, Unity intenta arreglarlo por ti (pero solo a medias) y crea el c√≥digo de plantilla con un nombre de clase de ‚ÄúMi Clase‚Äù aunque abandone el espacio en el nombre del archivo. Luego, cada vez que intente agregar el script a un objeto, Unity se quejar√° de usted: \" No se puede agregar el script. No se puede agregar el componente ‚ÄòScriptName‚Äô porque no existe. Verifique si el nombre del archivo y el nombre de la clase coinciden. ‚ÄúRecuerda esto por si alguna vez cambias el nombre de la clase en un momento posterior; debes cambiar el nombre del archivo para que coincida. Los nombres de tus clases deben ser √∫nicos: no puedes tener dos clases llamadas ‚ÄúBoogers‚Äù sin importar lo gracioso que pienses que ser√≠a. De nuevo, Unity intentar√° solucionar este problema autom√°ticamente y enumerar√° su nombre de archivo y clase (agregue un n√∫mero al final) para que sea √∫nico. Si nombra una clase con el mismo nombre que algo que Unity ya ha tomado, como ‚ÄúLight‚Äù, recibir√° una advertencia, ‚ÄúScript ‚ÄòLight‚Äô tiene el mismo nombre que el componente incorporado de Unity. AddComponent y GetComponent no funcionar√°n con esta secuencia de comandos. ‚ÄúEl nombre duplicado se permite aqu√≠ porque la Luz de Unity se defini√≥ en un \" espacio de nombres \" separado, que es un tema avanzado para m√°s adelante. Tenga en cuenta que aunque puede jugar su juego con advertencias presentes, un buen programador lo tratar√° como si hubiera sido un error y har√° todo lo posible para resolverlo. Los programadores pueden ser muy selectivos y tienen pautas para casi todo, incluso los nombres que usa e incluso el caso de las letras con las que escribe. Un buen nombre de clase ser√° un sustantivo o frase ","date":"19-08-2018","objectID":"/posts/2018/csharpunity/002/:0:0","tags":["n9+","csharp","unity"],"title":"Aprende C# con Unity - Tu primer script","uri":"/posts/2018/csharpunity/002/"},{"categories":["aprende c# con unity"],"content":"Esta serie de ayudas est√°n dise√±ada para una introducci√≥n r√°pida a la programaci√≥n en C# usando Unity. Introducir√° brevemente la mayor√≠a de las caracter√≠sticas del lenguaje, pero desde la perspectiva del uso dentro de Unity en lugar de casos de uso general, y con suerte, ser√° m√°s interesante aprender de √©l. Escribir√© asumiendo que ya tienes Unity y tienes una comprensi√≥n b√°sica del programa. ¬øC√≥mo empezar? Necesitar√° el motor Unity 3D. Unity viene con una copia de MonoDevelop en sus versiones antiguas, actualmente ‚ÄòUnity 2018‚Äô usa Visual Studio, que usar√© para programar, aunque no es necesario que use ese editor de c√≥digo. Puede obtener Unity en ¬†unity3d.com. Tenga en cuenta que si bien intentar√© asegurarme de que los ejemplos aqu√≠ permanezcan compatibles en el futuro con todas las versiones de Unity, algunas cosas pueden pasar desapercibidas. Si encuentra que una caracter√≠stica o ejemplo no funciona, siempre puede volver a las versiones anteriores del programa ¬†aqu√≠, en mi caso usare Unity 2017.4, ya que es la versi√≥n m√°s estable. Una vez que haya descargado e instalado Unity, es posible que desee considerar explorar el conjunto de tutoriales de Unity en ¬†TutorialesUnity ¬øPor qu√© C# versus otro lenguaje? En √∫ltima instancia, es porque es el idioma con el que estoy m√°s familiarizado, aunque hay muchos otros argumentos que encontrar√° publicados en la web. No he pasado mucho tiempo con JavaScript y he escuchado que eliminaran JavaScript en un futuro. Los desarrolladores m√°s serios con los que he hablado parecen preferir C#, y eso se confirma con este hilo en los foros de Unity comparando las opciones de los lenguajes. Muestra que C# es m√°s del doble de popular que cualquier otra opci√≥n: ¬†Enlace a la discusi√≥n ¬øD√≥nde puedo obtener m√°s informaci√≥n sobre C#? Para aquellos de ustedes con miedo a google, aqu√≠ hay algunos enlaces convenientes‚Ä¶ ¬†http://msdn.microsoft.com/en-us/library/aa288436(v=vs.71).aspx ¬†http://www.tutorialspoint.com/csharp ¬†https://csharp-station.com/ ¬†http://www.learncs.org Siguiente - Tu primer script\r. ","date":"19-08-2018","objectID":"/posts/2018/csharpunity/001/:0:0","tags":["n9+","csharp","unity"],"title":"Aprende C# con Unity - Introducci√≥n","uri":"/posts/2018/csharpunity/001/"},{"categories":["comun"],"content":"En esta ocasi√≥n hablar√© del trabajo del Dise√±ador de Videojuegos, integrado en el proceso de desarrollo de un equipo. Encontrar√©is que es dif√≠cil, dentro de los grupos independientes, que la gente conozca este perfil y comprendan este rol de una manera realista. Mientras que todo el mundo sabe lo que tiene que hacer un programador o lo que hace un artista, poca gente comprende qu√© es exactamente un dise√±ador de videojuegos y d√≥nde empiezan y acaban sus competencias. . En primer lugar es el ‚Äúqui√©n‚Äù. Quiz√°s lo m√°s obvio, es decir que esta persona es la que se encarga de definir el concepto de juego, que luego tendr√° que ser discutido entre los miembros del equipo, si √©ste ya estuviera establecido. Sin embargo, es posible que la idea inicial de juego salga de otra persona o rol. No importa. Ser√≠a en este caso misi√≥n del dise√±ador el preparar un documento preciso e inicial desde el que dejar las bases sentadas para empezar a hablar: a esto le llamo concepto. Una idea es algo abstracto, mientras que un concepto entra en detalles que de otra manera se obviar√≠an. Particularmente pienso que un product sheet no encierra el nivel de detalles necesario para que un equipo entienda el potencial de un proyecto. Por eso prefiero preparar documentos espec√≠ficos dependiendo del concepto, ya que mientras en unos habr√° que ahondar en el guion o historia, en otros el peso del juego recaer√° en determinadas mec√°nicas, o en un est√©tica concreta. De todas maneras un product sheet s√≠ que es el documento predilecto a la hora de presentarlo a publishers u otras instancias en una primera aproximaci√≥n, ya que recoge de manera sint√©tica todo lo necesario para dar a entender el alcance del proyecto. . Una vez que un concepto de juego se ha aprobado, se tiene el equipo y empieza el trabajo, el dise√±ador de videojuegos debe empezar con la preproducci√≥n. Este ya es un proceso m√°s elaborado y que requiere mucho m√°s trabajo. Se deben estudiar todos los puntos que har√°n de ese juego algo viable, que tenga un alcance adecuado y preveer dificultades, para tener un punto de partida adecuado con respecto al desarrollo del juego. Tambi√©n ha de especificar claramente qu√© mec√°nicas espec√≠ficas debe prototipar y probar, que influyan en el gamefeel, o sea, en la sensaci√≥n o experiencia que se proporcione al jugador. Pero la realidad es algo diferente y depende de las cualidades y experiencia de cada persona. Habr√° dise√±adores que tengan un buen nivel escribiendo y dise√±ando el guion, con una imaginaci√≥n adecuada y capaces de dotar un juego de un ambiente espectacular. Los habr√° que sean unos m√°quinas dise√±ando mec√°nicas de juego y haciendo prototipos. Los habr√° que hagan un poco de todo. Lo realmente dif√≠cil es que una misma persona aglutine todo lo que conlleva este rol. De hecho, si pregunt√°is, es muy dif√≠cil encontrar buenos dise√±adores de juego, ya que entre otras cosas no es una disciplina que se pueda estudiar en ning√∫n centro espec√≠fico, que est√© ampliamente reconocida fuera del √°mbito de la industria anglosajona, o que tenga un manual o √≠ndice acerca de qu√© materias estudiar. A d√≠a de hoy, en Espa√±a, la triste realidad es que muy poca gente sabe qu√© es un ‚Äúgame designer‚Äù. . Pero claro, esta realidad se agrava si los propios grupos de desarrollo independientes, no saben qu√© hace esta persona. As√≠, nos encontramos con miembros del equipo que les llaman guionistas directamente (aunque se dediquen a las mec√°nicas de juego), otros justifican su existencia diciendo que ‚Äúson los que tienen las ideas‚Äù y, algunos simplemente no saben qu√© diantres hace esa persona en el equipo. Por experiencia puedo decir que esto es as√≠, aunque poco a poco est√° cambiando. Otro foco de confusi√≥n sale de las propias personas que se adec√∫an a este perfil, pero que no lo conocen. Hay que tener algunas ideas muy claras, pero quiz√°s la base de partida sea esta: Proyecto Peque√±o Quiz√°s uno o dos dise√±adores. En este caso un proceso aproximado puede ser: concepto, prototipos y preproducci√≥n, teste","date":"13-08-2018","objectID":"/posts/2018/comun/010/:0:0","tags":["n9+","comun"],"title":"El rol del dise√±ador de videojuegos","uri":"/posts/2018/comun/010/"},{"categories":["comun"],"content":" . En el trabajo o en la escuela, los que nos preparamos para la programaci√≥n tenemos la ventaja de poder aprovechar el pc para automatizar o mejorar lo que hacemos. Independientemente de si el trabajo en s√≠ consiste en programar, las tareas de cualquier tipo pueden automatizarse para beneficio propio o de la organizaci√≥n (si es que la organizaci√≥n te apoya en eso, de lo contrario no desperdicies tu energ√≠a). Puedes pensar que puede haber c√≥digo por todas partes, algo as√≠ como ‚ÄúCode here, code there, code everywhere‚Äù y bajo esta idea te doy 3 consejos para agilizar tus tareas en el trabajo o en la escuela. Consejo 1: Excel Un reporte de trabajo en Excel es algo que seguramente te corresponder√° hacer un d√≠a y es com√∫n que la plantilla que te den para reportar no tenga ni una f√≥rmula, pero seguro s√≠ te pedir√°n cuentas sobre las horas trabajadas, por actividad, d√≠a u otros c√°lculos del mismo estilo. Hay plantillas que necesitan tantos detalles que, aunque en teor√≠a es simple llenarlas y ajustarlas, resultan un trabajo tedioso que provoca que cometas errores con facilidad. Como programador te resultar√° r√°pido y f√°cil poner las f√≥rmulas necesarias para tu reporte. Inclusive podr√≠as escribir una macro en VBA para organizar los archivos en una carpeta y tener tus reportes ordenados por d√≠a, semana o mes, seg√∫n tu caso particular. Un ejemplo de esos reportes que te pueden tomar mucho tiempo es uno donde te pidan redacciones como: El avance es de 54.30% (Diferencia = -45.70% puntos, 45.70%). En el ejemplo anterior, los datos se capturan en una hoja aparte y tienes que hacer las cuentas para escribir el reporte de avance. En casos como estos puedes establecer las f√≥rmulas de c√°lculo e inclusive f√≥rmulas que te den la redacci√≥n que te solicitan, como esta f√≥rmula: =\"El avance es de \"\u0026TEXTO(C12,\"0.00%\")\u0026\" (Diferencia = \"\u0026TEXTO(D12,\"0.00%\")\u0026\" puntos, \"\u0026TEXTO(F12,\"0.00%\")\u0026\")\" Resolviendo de una vez por todas el c√°lculo y la redacci√≥n. Consejo 2: Datos de prueba Cuando est√°s desarrollando un componente o una aplicaci√≥n, seguramente ser√° necesario preparar un conjunto de datos que sirva de entrada para las pruebas. Si est√°s en esa situaci√≥n en la que te pedir√°n bastante pruebas de lo mismo, ya sea porque no es estable el desarrollo o no es estable el requerimiento, armar un script para preparar la base de datos es de mucha ayuda y te permite concentrarte en lo que realmente hay que hacer. Para este consejo es necesario que conozcas bien los objetivos de las pruebas o que tengas a alguien cerca que te pueda ayudar. Para preparar el script considera estos puntos: Hay que incluir el borrado o la eliminaci√≥n de objetos o registros que pueden haberse generado en pruebas pasadas y que puedan alterar el resultado de pruebas futuras. Versiona tu script. En estas situaciones es com√∫n repetir una prueba realizada anteriormente. Considera el efecto del avance en secuencias, n√∫meros de folio e √≠ndices. Si tus pruebas dependen del d√≠a en que se realizan, prepara tu script para las pruebas en diferentes momentos. Esto pasa cuando tienes reglas de negocio como ‚Äúreiniciar el folio de las actas cada inicio de mes‚Äù. Los IDE, como SQL Developer, pueden ahorrarte una gran parte del trabajo de generaci√≥n de tu script. Consejo 3: Scripting for testing Todo programador tiene un lenguaje de programaci√≥n en el que desarrolla con mayor velocidad y comodidad (En mi caso C#). Puedes aprovechar esa velocidad y comodidad para probar algoritmos o reglas inusuales. Desde lo m√°s simple: reglas para formaci√≥n de claves, clasificaciones, reglas de negocio. Hasta lo complejo: an√°lisis estad√≠sticos, simulaciones o aprendizaje maquinal. La idea es probar el algoritmo antes de implementarlo en donde sea requerido, sobre todo, si hay incertidumbre sobre los resultados que se van a obtener o si los cambios y correcciones son muy costosos. Si no has probado Python, deber√≠as darte una oportunidad de aprender ese lenguaje. Python te permite codificar y probar con mucha rapidez. Adem√°s,","date":"08-08-2018","objectID":"/posts/2018/comun/009/:0:0","tags":["n9+","comun"],"title":"Consejos para agilizar tu trabajo como programador","uri":"/posts/2018/comun/009/"},{"categories":["comun"],"content":"Probablemente alguna vez has escuchado hablar de personas que han logrado recuperar archivos despu√©s de haber sido borrados (y no hablo de archivos que solamente estaban en la papelera). Si te interesa saber c√≥mo es posible hacer esto, sigue leyendo. ¬øC√≥mo funcionan los discos duros? Antes de explicar por qu√© es posible recuperar un archivo es necesario comprender c√≥mo funciona un disco duro. A diferencia de los discos de estado s√≥lido o SSD, los discos duros o HDD almacenan la informaci√≥n en estado f√≠sico. Un HDD est√° compuesto de uno o varios discos con una o dos caras en las que es posible almacenar informaci√≥n. Cada una de estas caras est√° dividida en millones de peque√±os segmentos magn√©ticos. Estos segmentos tienen una capacidad predefinida. Si queremos almacenar un bit encendido (1), en uno de estos segmentos ser√° magnetizado por una cabeza de lectura/escritura; en cambio, si queremos almacenar un bit apagado (0), esta misma cabeza desmagnetizar√° el segmento correspondiente. No basta con almacenar informaci√≥n en un disco duro, si no tenemos un control sobre en d√≥nde se almacena esta informaci√≥n entre tantos millones de segmentos, si quisi√©ramos localizar un archivo ser√≠a como buscar una aguja en un pajar. Para mantener control, los sistemas operativos cuentan con una herramienta llamada sistema de archivos, la cual funciona como una tabla o mapa que mantiene la informaci√≥n de qu√© archivos hay en el sistema y en qu√© direcciones de memoria (o segmentos) est√°n localizados. ¬øC√≥mo elimina archivos el sistema operativo? Cuando eliminamos un archivo, como podr√°s suponer, generalmente no es borrado inmediatamente. Imagina que que quieres deshacerte de un archivo de 15 Gigabytes, el tiempo que le tomar√≠a al sistema operativo mover la cabeza de lectura/escritura a lo largo del disco duro hasta ‚Äúlimpiar‚Äù cada uno de los sectores que lo componen ser√≠a considerablemente alto. Para hacer este proceso m√°s r√°pido, el SO solamente borra la entrada de este archivo del sistema de archivos. Si no existen entradas en el sistema de archivos indicado que un bloque est√° ocupado, la pr√≥xima vez que almacenes algo en tu HDD, el sistema operativo podr√≠a sobrescribir aquellos en los que originalmente estaba tu archivo de 15 Gigabytes. Recuperar archivos eliminados Ya comprendimos que el sistema operativos puede optar por solo eliminar la entrada de un archivo en el sistema de archivos en lugar de realmente ‚Äúlimpiarlo‚Äù del sistema. El proceso para recuperar estos archivos es muy simple, simplemente usamos herramientas que nos permitan localizar archivos cuyas entradas fueron eliminadas del sistema de archivos. La mayor√≠a de estas herramientas hacen uso de los logs del sistema de archivos para saber qu√© archivos se han eliminado recientemente y de qu√© direcciones de memoria. Recuperar archivos en Linux En Linux es posible recuperar archivos desde la terminal sin instalar ning√∫n programa adicional usando debugfs. Foremost es otra herramienta muy √∫til para recuperar archivos; para instalarla desde Ubuntu: sudo apt-get install foremost Para instalarla desde CentOS/RHEL 7: rpm -Uvh http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el7.rf.x86_64.rpm yum install foremost Desde Debian: aptitude install foremost Otra alternativa muy pr√°ctica para Linux es Testdisk. Para instalarla desde Ubuntu y derivados: sudo apt install testdisk Recuperar archivos en Windows Recuva es, probablemente, la alternativa m√°s popular para recuperar archivos en Windows gracias a su interfaz de usuario atractiva e intuitiva. Puedes descargar Recuva desde aqu√≠. ¬øC√≥mo prevenir la recuperaci√≥n de archivos? Una vez que el sistema operativo ha sobrescrito algo en los sectores con archivos marcados como eliminados, es casi imposible recuperarlos. Generalmente no tenemos control de las direcciones de memoria en las que el sistema operativo almacena todos los archivos, as√≠ que si queremos eliminar permanentemente los archivos de nuestro d√≠a a d√≠a ser√≠a muy complicado de ","date":"08-08-2018","objectID":"/posts/2018/comun/008/:0:0","tags":["n9+","comun"],"title":"¬øPor qu√© podemos recuperar archivos eliminados?","uri":"/posts/2018/comun/008/"},{"categories":["dev"],"content":"Esta entrada, es un recordatorio personal, despu√©s de hablar con amigos y de hablarme tan bien de UNET (Yo solo toque NET en Unity 3.5, :S), me entro el gusanico de ver esta nueva tecnolog√≠a, por lo que decid√≠ ponerme a investigar, pero descubr√≠ que hay muy poca informaci√≥n sobre esto. Detallo en m√°s profundidad, hay informaci√≥n, pero del High API. Lo que yo quer√≠a ver es informaci√≥n sobre el Low API y de esto hay poco, asi que decid√≠ crear esta entrada para guardar como recuerdo este estudio, por si pr√≥ximamente tengo que volver a mirarlo (soy un neur√≥tico del guardado de datos xD). Tambi√©n agradecer a Alejandro Rivas y Fernando Gal√°n por la ayuda e info que me dieron con libros y art√≠culos. Conceptos necesarios Un sistema de red en videojuegos implica que los participantes pueden jugar juntos a trav√©s de la conexi√≥n entre ellos por medio de una red, ya sea una red de √°rea local o el Internet. Esto quiere decir que uno o varios clientes se conectan a un servidor, para intercambiar datos. . En esencia, un cliente le dice al servidor lo que esta realizando y el servidor remite la informaci√≥n para todos los clientes, sincronizando sus estados. Este m√©todo se realiza desde cada cliente, haciendo asi que todos los clientes sean sincronizados por el servidor. . Se le suele llamar a un servidor, servidor dedicado, ya que solo efect√∫a el cambio de datos y no ejecuta ninguna instancia. Pero tambi√©n existen otros tipos de servidores. Por ejemplo en Warcraft 3, cualquier cliente puede crear una partida desde su cliente, esto realmente es levantar un servidor para que otros jugadores puedan conectar con el como clientes, a la vez, el servidor tambi√©n podr√° ser un cliente. . Incluso se puede implementar una capa m√°s, com√∫nmente llamada matchmaker, que es la instancia de un servidor que congrega las partidas de otros servidores, de esta forma los clientes conectan con el servidor principal, que este a su vez conecta con los dem√°s servidores. . Empezamos el planteamiento . Como siempre al final de la entrada dejo el link del repositorio en Github para los que quieran descargarlo. Doy por sentado que ya conoc√©is Unity y ten√©is un conocimiento sobre su funcionamiento. Lo primero que necesitaremos, sera un Manager para gestionar toda la informaci√≥n de nuestro servidor. Este Manager no puede desaparecer nunca, ya que si lo hace, el servidor y todas las conexiones se caer√°n. Crearemos un objeto vaci√≥ y le agregaremos el componente Network Manager que sera nuestro objeto para administrar la red. Este componente nos proporcionara mucha funcionalidad necesaria que podr√≠amos escribirla desde cero pero ya que esta y no buscamos un sistema mega optimizado vamos a usarlo. Este componente ya lleva un valor booleano**(Dont destroy on load)** para decirle si quer√©is que el objeto sea destruido o que no se destruya nunca. Tambi√©n dispone de otro valor**(Run in Background)** para decidir si se ejecutara en segundo plano, Unity si no tiene este valor activado, al salir de Unity o del juego, se queda sin el foco y por lo tanto se pausa, esto seria malo si queremos que nuestros clientes reciban la informaci√≥n a tiempo. . Ahora vamos a agregarle un nuevo componente, llamado Network Manager HUD. Este componente nos facilita una interfaz con la funcionalidad necesaria para conectar con un servidor, levantar nuestro servidor o activar un matchmaker. Si construimos ahora mismo la aplicaci√≥n, veremos como podemos crear dos o tres instancias de Unity y con ello poder conectarlas entre ellas. Ahora que ya tenemos un administrador de red, tenemos que ver en sus opciones spawn info, una opci√≥n de player prefab. Esto nos indica que este cliente tiene que instanciar algo. Pero no se refiere a algo f√≠sico, sino que tiene que tener una instancia de jugador en memoria. Digamos que la siguiente manera como vemos en la siguiente imagen. . Cada jugador tiene que tener una presencia no f√≠sica, es decir, pongamos el objeto que pon√©is como spawn, es un objeto que posteriormente es","date":"16-07-2018","objectID":"/posts/2018/dev/008/:0:0","tags":["n9+","dev"],"title":"Estudio de UNET","uri":"/posts/2018/dev/008/"},{"categories":["comun"],"content":"Un dise√±o es el resultado final de un proceso, cuyo objetivo es buscar una soluci√≥n id√≥nea a cierta problem√°tica particular, pero tratando en lo posible de ser pr√°ctico y a la vez est√©tico en lo que se hace. Para poder llevar a cabo un buen dise√±o es necesario la aplicaci√≥n de distintos m√©todos y t√©cnicas de modo tal que pueda quedar plasmado bien sea en bosquejos, dibujos, bocetos o esquemas lo que se quiere lograr para as√≠ poder llegar a su producci√≥n y de este modo lograr la apariencia m√°s id√≥nea y emblem√°tica posible. El objetivo es conocer ciertos principios involucrados en el √°rea de dise√±o gr√°fico y visi√≥n perceptual, y brindar una introducci√≥n en el dise√±o y programaci√≥n de interfaces gr√°ficas para videojuegos. . Dentro del dise√±o, hay varios tipos, entre ellos el dise√±o de videojuegos y acotando aun mas el dise√±ador de interfaces. Hay varias preguntas que hacer cuando realizamos un dise√±o de interfaz para videojuegos. ","date":"28-06-2018","objectID":"/posts/2018/comun/007/:0:0","tags":["n9+","comun"],"title":"El Arte del dise√±o","uri":"/posts/2018/comun/007/"},{"categories":["comun"],"content":"Al dise√±ar la interfaz‚Ä¶ ¬øQue piezas de arte utilizar? ¬øCuales se pueden reutilizar? ¬øQue informaci√≥n puede ser desplegada? ¬øCuantas pantallas se deben crear? ¬øCuantas animaciones? ¬øCu√°l es el tiempo estimado que puede llevar el trabajo? ¬øCu√°les son las opciones que dif√≠cilmente cambian? . Se debe generar un documento con una lista de todos los recursos (‚Äúassets‚Äù) que se utilizar√°n. Se pueden utilizar diagramas de flujo, para indicar las distintas pantallas, opciones de men√∫ y navegaciones entre ellas. El diagrama debe ser claro y consistente. Se puede empezar construyendo una caja que representa a la p√°gina principal con todas las opciones posibles que se pueden tomar a partir de esta, a partir de aqu√≠ construir las navegaciones a las otras distintas pantallas(no olvidar la opci√≥n volver) y sus respectivas opciones. ","date":"28-06-2018","objectID":"/posts/2018/comun/007/:1:0","tags":["n9+","comun"],"title":"El Arte del dise√±o","uri":"/posts/2018/comun/007/"},{"categories":["comun"],"content":"HUD . Se suele referir como HUD(Head up Display) al sistema de men√∫ que aparece dentro del juego(mientras el usuario juega). Es importante organizarlo correctamente, debe ocupar el menor tama√±o posible en pantalla. Es necesario conocer toda la informaci√≥n que se desea visualizar durante el gameplay. Inventario, mapas, vidas, fuerza, opciones que se quieren mostrar durante el men√∫ de pausa son ejemplos de informaci√≥n que puede aparecer. Solamente debe desplegar informaci√≥n que el jugador necesite conocer mientras juega, y no debe distraerlo. ","date":"28-06-2018","objectID":"/posts/2018/comun/007/:2:0","tags":["n9+","comun"],"title":"El Arte del dise√±o","uri":"/posts/2018/comun/007/"},{"categories":["comun"],"content":"Principios de dise√±o b√°sicos ","date":"28-06-2018","objectID":"/posts/2018/comun/007/:3:0","tags":["n9+","comun"],"title":"El Arte del dise√±o","uri":"/posts/2018/comun/007/"},{"categories":["comun"],"content":"Creando un punto de atenci√≥n Cuando se dise√±a una interface se debe determinar cual es el objeto m√°s importante de la composici√≥n, el objeto que se pretende que llame la atenci√≥n del jugador. Un buen dise√±o ayuda al jugador a descubrir r√°pidamente cual es este punto, gu√≠a el ojo del observador a donde se quiere que mire. Para esto se recurre a la combinaci√≥n de colores, animaciones, tama√±o y forma de los distintos elementos que aparecen en pantalla. ","date":"28-06-2018","objectID":"/posts/2018/comun/007/:3:1","tags":["n9+","comun"],"title":"El Arte del dise√±o","uri":"/posts/2018/comun/007/"},{"categories":["comun"],"content":"Movimiento del ojo Se refiere al orden en el cual el observador recorre la imagen. ¬øQue es lo que primero ve?¬øEs el objeto m√°s importante de la escena?¬øQu√© es lo pr√≥ximo que ver√°? El dise√±ador puede controlar el movimiento visual del observador mediante la composici√≥n de los distintos elementos. El color, tama√±o y la forma son elementos que pueden atraer la atenci√≥n del observador y as√≠ controlar su movimiento visual. ","date":"28-06-2018","objectID":"/posts/2018/comun/007/:3:2","tags":["n9+","comun"],"title":"El Arte del dise√±o","uri":"/posts/2018/comun/007/"},{"categories":["comun"],"content":"Colores Determinan humor, expresan emoci√≥n y establecen la atm√≥sfera del juego. Se debe elegir un conjunto de colores armoniosos para trabajar, y este debe ser reducido. ","date":"28-06-2018","objectID":"/posts/2018/comun/007/:3:3","tags":["n9+","comun"],"title":"El Arte del dise√±o","uri":"/posts/2018/comun/007/"},{"categories":["comun"],"content":"Organizaci√≥n visual Espaciamiento, alineaci√≥n, a la mayor√≠a de las personas les atrae la organizaci√≥n. ","date":"28-06-2018","objectID":"/posts/2018/comun/007/:3:4","tags":["n9+","comun"],"title":"El Arte del dise√±o","uri":"/posts/2018/comun/007/"},{"categories":["comun"],"content":"Balance y peso Influyen el color, la forma, el tama√±o, la ubicaci√≥n. Un desbalance en este punto produce tensi√≥n en el observador. ","date":"28-06-2018","objectID":"/posts/2018/comun/007/:3:5","tags":["n9+","comun"],"title":"El Arte del dise√±o","uri":"/posts/2018/comun/007/"},{"categories":["comun"],"content":"Patrones de usabilidad para videojuegos Los patrones de usabilidad, como todo patr√≥n, describen problemas recurrentes, sugieren buenas pr√°cticas y brindan soluciones a estos problemas, en este caso vinculados al dise√±o de interfaces gr√°ficas o componentes gr√°ficos con las que el usuario debe interactuar. Se enfocan en mejorar la satisfacci√≥n del usuario cuando utiliza el sistema, y que este pueda brindar la mayor utilidad posible, en base a organizaciones, formas y acciones de los componentes gr√°ficos, que facilitan al usuario su interacci√≥n. ","date":"28-06-2018","objectID":"/posts/2018/comun/007/:4:0","tags":["n9+","comun"],"title":"El Arte del dise√±o","uri":"/posts/2018/comun/007/"},{"categories":["comun"],"content":"Escudo . Es una capa proactiva que previene que el jugador accidentalmente active una caracter√≠stica o funci√≥n que cause un indeseable efecto de borde. Fuerza al usuario a confirmar su decisi√≥n, de esta forma dos errores son requeridos para activar el comportamiento por equivocaci√≥n. ","date":"28-06-2018","objectID":"/posts/2018/comun/007/:4:1","tags":["n9+","comun"],"title":"El Arte del dise√±o","uri":"/posts/2018/comun/007/"},{"categories":["comun"],"content":"Estado Brinda pistas visuales al usuario de su actual estado. Un ejemplo podr√≠a ser utilizar la imagen del cursor del mouse seg√∫n lo que el personaje se encuentra haciendo en determinado momento(si el juego utiliza el mouse para moverse, hablar, etc.). Puede ser usados para prevenir ambig√ºedades, la cantidad de estados posibles debe ser peque√±a y las representaciones simb√≥licas deben ser claramente distinguibles. ","date":"28-06-2018","objectID":"/posts/2018/comun/007/:4:2","tags":["n9+","comun"],"title":"El Arte del dise√±o","uri":"/posts/2018/comun/007/"},{"categories":["comun"],"content":"Magnetismo Es utilizado cuando se necesita que el jugador tenga acciones de movimiento precisas. Por ejemplo con el mouse en un juego de estrategia, si el sistema detecta que el cursor esta muy cerca a una unidad, puede llevar de forma autom√°tica el cursor al elemento. El patr√≥n puede ayudar a prevenir inexactitudes y el jugar sea m√°s divertido. ","date":"28-06-2018","objectID":"/posts/2018/comun/007/:4:3","tags":["n9+","comun"],"title":"El Arte del dise√±o","uri":"/posts/2018/comun/007/"},{"categories":["comun"],"content":"Enfoque . Es √∫til cuando se necesita que el usuario se concentre en una pieza especifica de informaci√≥n e ignore al resto, ya que moment√°neamente el resto es irrelevante. Un ejemplo de utilizaci√≥n podr√≠a ser un juego de futbol, donde al establecer la t√°ctica del equipo, solamente se muestra un campo y los jugadores. ","date":"28-06-2018","objectID":"/posts/2018/comun/007/:4:4","tags":["n9+","comun"],"title":"El Arte del dise√±o","uri":"/posts/2018/comun/007/"},{"categories":["comun"],"content":"Requerimientos t√©cnicos y trucos Atlas: Mediante t√©cnicas de localizaci√≥n, se pueden crear concentraciones de im√°genes, creando atlas. Dimensi√≥n de las im√°genes: Las im√°genes pueden ser dimensionadas. Limitaciones de Ram: Dependiendo de la ram, se puede optar por diferentes t√©cnicas, ya que los gr√°ficos son almacenados en ram. Tiempo de carga: Los tiempos de carga van ligados al hardware y carga en memoria. Tilling Textures: Se pueden tilear las im√°genes para reducir su tama√±o. Siguiente - Introducci√≥n(Dev)\r. ","date":"28-06-2018","objectID":"/posts/2018/comun/007/:5:0","tags":["n9+","comun"],"title":"El Arte del dise√±o","uri":"/posts/2018/comun/007/"},{"categories":["comun"],"content":"Tras el anuncio previo de la versi√≥n norteamericana del cierre de Terra Battle 2, hoy (28 de junio), Mistwalker anunci√≥ que la versi√≥n japonesa de Terra Battle 2 tambi√©n cerrar√° en septiembre de este a√±o. . Mistwalker es un estudio dise√±ador de videojuegos japon√©s fundado por Hironobu Sakaguchi, creador de la popular serie Final Fantasy. Sakaguchi asumi√≥ el rol de presidente en el nuevo estudio, y Kensuke Tanaka, creador del sistema PlayOnline, es el vicepresidente. Tambi√©n, se ha confirmado que Yoshitaka Amano, dise√±ador de personajes de Final Fantasy, Nobuo Uematsu, compositor de Final Fantasy, y Takehiko Inoue, popular artista manga, trabajaran en la empresa. A diferencia del anuncio en ingl√©s, el anuncio japon√©s ofreci√≥ m√°s detalles sobre por qu√© el servicio del juego llegar√° a su fin. Seg√∫n el anuncio oficial, debido a que Silicon Studio reduce su trabajo en la industria del juego, ser√° dif√≠cil ofrecer un servicio satisfactorio a los jugadores en el futuro, por lo que el servicio del juego llegar√° a su fin. . A partir de hoy, los jugadores ya no podr√°n comprar ning√∫n Super Energy desde la tienda del juego. Los jugadores a√∫n podr√°n usar cualquier S√∫per Energ√≠a restante en su posesi√≥n desde ahora hasta el 28 de septiembre cuando el servicio del juego llegue a su fin oficialmente. . Terra Battle 2 est√° dirigido por el creador de Final Fantasy, Hironobu Sakaguchi(ÂùÇÂè£Âçö‰ø°). Hereda la configuraci√≥n del primer juego y la trama sigue directamente la trama de la primera. Para obtener m√°s detalles, consulte el anuncio oficial a continuaci√≥n. Sitio Oficial\r. ","date":"28-06-2018","objectID":"/posts/2018/comun/006/:0:0","tags":["n9+","comun"],"title":"Terra Battle 2!?","uri":"/posts/2018/comun/006/"},{"categories":["comun"],"content":"Steam es una plataforma de distribuci√≥n digital de videojuegos desarrollada por Valve. A trav√©s de ella los usuarios pueden comprar y descargar una gran cantidad de juegos de diferentes desarrolladoras, no solo de Valve, que se encuentran actualmente en su cat√°logo. Aparte de todo eso ofrece varios servicios m√°s que van desde logros o listas de amigos para jugar hasta actualizaciones autom√°ticas e instant√°neas. ","date":"28-06-2018","objectID":"/posts/2018/comun/005/:0:0","tags":["n9+","comun"],"title":"Steam en 2018","uri":"/posts/2018/comun/005/"},{"categories":["comun"],"content":"¬øQue ofrece Steam? Como ya se dijo antes Steam no solo es una plataforma para comprar nuestros juegos, tambi√©n ofrece otros servicios y una comunidad enorme que ayuda a mejorar la experiencia, como por ejemplo: Ofertas: Casi todos los d√≠as hay ofertas nuevas y brutales en Steam que pueden ir desde el 10, 20 o 30 % de descuento hasta el 80 o 90%, tanto de juegos nuevos como m√°s viejos, solo tienes que entrar en tu cuenta y ellos mismos te avisar√°n de las que tengas disponibles. Adem√°s de las que hay todos los a√±os en √©pocas especiales como Navidades, Verano o Acci√≥n de Gracias, donde encontrar√°s las mejores ofertas del a√±o. Actualizaciones: Los juegos se actualizar√°n autom√°ticamente en cuanto salgan sus respectivos parches. Siempre que no est√©s jugando (mientras juegas Steam te deja libre todo el ancho de banda), tengas el programa abierto y conectado a internet el mismo se encargar√° de descargarlos e instalarlos. Tu no tendr√°s que hacer nada. Sistema de Logros: Para todos los amantes de los logros y los trofeos casi todos los juegos comprados a trav√©s de Steam traen una serie de objetivos por cumplir. Unas lista de logros que podr√°s comparar con tus amigos y otra lista de logros mundiales entre todos los usuarios que tengan el juego. Amigos y Comunidad: Podr√°s unirte a cientos de grupos distintos, desde los grupos oficiales de juegos a los creados por los usuarios donde se organizan partidas multijugador y muchas cosas m√°s. Adem√°s podr√°s crear una lista de amigos para invitarlos a tus partidas r√°pidamente, comparar logros o chatear a trav√©s del chat de Steam. Servicio de mensajer√≠a instant√°nea o chat: Podr√°s hablar en cualquier momento, mientras juegues o est√©s conectado con tus amigos u otros jugadores a trav√©s del chat propio de Steam. No necesitas abandonar la partida en ning√∫n momento. Sistema antitrampas de Valve: Para evitar que los cheaters participen en la partida. Estos malignos usuarios ser√°n baneados en cuanto sean detectados, lo que hace que las partidas on-line est√©n mas limpias de esta escoria. Steam Cloud: Las partidas guardadas se guardar√°n tambi√©n en servidores on-line. Podr√°s acceder a ellas y continuar jugando tus partidas desde cualquier ordenador conectado a la red en que tengas instalado el juego. Grabaci√≥n de juegos en formato f√≠sico: Una vez descargado un juego podremos copiarlo en DVDs o CDs de forma que si no tenemos una buena conexi√≥n y tardamos mucho en descargarlos podamos instalarlos de forma m√°s r√°pida la pr√≥xima vez. Por supuesto despu√©s de instalarlos de esta manera no ser√° necesario ning√∫n tipo de crack o parche para poder jugar. Subir capturas y videos: Ahora puedes tambi√©n hacer capturas de forma instant√°nea con el capturador de Steam (por defecto F12) mientras est√°s jugando y en cuesti√≥n de segundos subirlas a t√∫ perfil para que todos puedan verlas en cualquier momento. Tambi√©n puedes linkear tus gameplays o videos de cualquier tipo desde tu cuenta de YouTube a tu perfil. Regalos a amigos: Puedes comprar juegos para regalar a tus amigos y envi√°rselos por correo o a su cuenta de Steam. Ellos solo tendr√°n que bajarlos e instalarlos. Un sistema r√°pido y para enviar regalos a cualquier parte del mundo. Juegos gratuitos: De m√°s o menos calidad hay siempre disponibles o salen al cat√°logo algunos juegos gratuitos para cualquier persona que tenga una cuenta de Steam activada. ","date":"28-06-2018","objectID":"/posts/2018/comun/005/:1:0","tags":["n9+","comun"],"title":"Steam en 2018","uri":"/posts/2018/comun/005/"},{"categories":["comun"],"content":"Lo nuevo de Steam La nueva lista de amigos y el sistema de chat facilita la creaci√≥n de grupos con la gente con la que charlas y juegas. ","date":"28-06-2018","objectID":"/posts/2018/comun/005/:2:0","tags":["n9+","comun"],"title":"Steam en 2018","uri":"/posts/2018/comun/005/"},{"categories":["comun"],"content":"Actualizaciones de la Lista de amigos La lista de amigos tiene ahora al principio una secci√≥n de favoritos personalizada, as√≠ tienes acceso r√°pido a la gente, los grupos y los chats que m√°s te interesan. Tambi√©n podr√°s ver al principio de tu lista a los amigos que est√©n jugando en ese momento, ordenados por juego o por grupo, lo cual simplifica unirse a ellos o simplemente ver cu√°les son los juegos m√°s populares entre tus amigos. ","date":"28-06-2018","objectID":"/posts/2018/comun/005/:2:1","tags":["n9+","comun"],"title":"Steam en 2018","uri":"/posts/2018/comun/005/"},{"categories":["comun"],"content":"Chats de Grupo La lista de amigos ahora tiene un √°rea dedicada en los chats de grupo, que pueden incluir desde conversaciones casuales con un par de amigos hasta comunidades m√°s grandes. Comenzar un chat de grupo es tan f√°cil como arrastrar un amigo adicional a la ventana del chat. Tambi√©n puedes guardar tus chats de grupo con un nombre y avatar para volver f√°cilmente a la conversaci√≥n m√°s tarde o para jugar juegos con esos mismos amigos. Dentro de un grupo de chat tienes la opci√≥n de a√±adir canales de texto, canales de voz y permisos para miembros. Adem√°s, todos los chats muestran im√°genes, videos, tweets y enlaces entre l√≠neas, de una manera clara y atractiva. ","date":"28-06-2018","objectID":"/posts/2018/comun/005/:2:2","tags":["n9+","comun"],"title":"Steam en 2018","uri":"/posts/2018/comun/005/"},{"categories":["comun"],"content":"Chat de voz Todo el sistema del chat de voz ha sido redise√±ado para asegurar una experiencia impecable al jugar juegos con tus amigos en Steam. Ahora s√≥lo necesitas un clic para iniciar un chat de voz y organizar tu grupo antes de comenzar el juego. ","date":"28-06-2018","objectID":"/posts/2018/comun/005/:2:3","tags":["n9+","comun"],"title":"Steam en 2018","uri":"/posts/2018/comun/005/"},{"categories":["comun"],"content":"Adem√°s‚Ä¶ Esta actualizaci√≥n contiene muchas m√°s cosas notables, incluyendo el modo invisible, para que aparezcas desconectado, cuando a√∫n tienes acceso a tu lista de amigos y a tus chats. Y a√±adir amigos es m√°s f√°cil ahora, al poder enviar enlaces con solicitudes de amistad v√≠a email o fuera de Steam. . ","date":"28-06-2018","objectID":"/posts/2018/comun/005/:2:4","tags":["n9+","comun"],"title":"Steam en 2018","uri":"/posts/2018/comun/005/"},{"categories":["comun"],"content":"‚ÄúLos test no son opcionales‚Äù. Esto que parece a muchos una verdad, sigue siendo uno de los temas pendientes en el mundo del desarrollo de aplicaciones de software actual. S√≠, incre√≠blemente a√∫n hay muchos compa√±eros ‚Äúdel metal‚Äù que no son conscientes que programar sin pruebas no solo es como hacer acrobacias en el trapecio sin red de seguridad, sino adem√°s una fuente de errores, malas pr√°cticas y ansiedad. Y por ello quiero repasar los fundamentos b√°sicos de las pruebas que debi√©ramos aplicar, cada uno en su necesidad, a nuestros desarrollos. . ","date":"05-06-2018","objectID":"/posts/2018/comun/004/:0:0","tags":["n9+","comun"],"title":"¬øQu√© pruebas debemos hacerle a nuestro videojuego?","uri":"/posts/2018/comun/004/"},{"categories":["comun"],"content":"¬øPor qu√© hacer pruebas? Para que lo entienda hasta el m√°s novel de los lectores, hacer pruebas es la forma de asegurarse que lo que queremos que haga nuestro programa, lo haga, y lo haga sin errores. La construcci√≥n de software implica conocimiento, experiencia, talento, capacidad intelectual y un punto de arte. Es decir, es una labor muy dif√≠cil, y falta a√∫n mucho para que eso cambie a mejor. De hecho, la complejidad est√° tendiendo al crecimiento de una forma absoluta. Habiendo superado, hace ya d√©cadas, la capacidad humana de aprensi√≥n y memorizaci√≥n; lo que implica necesariamente que los fallos y errores son inevitables si los intentamos evitar con solo nuestras capacidades humanas. Las pruebas no son opcionales. Un software sin pruebas es una bomba a punto de estallar ¬øA quien no le ha pasado que ha dejado su c√≥digo medio a√±o en un caj√≥n, y a la vuelta de ponerse a toquetearlo tener la sensaci√≥n de que lo ha escrito otra persona? No reconocemos a nuestra propia criatura.Y no hablemos cuando estamos integrados en un equipo, o recibimos el ‚Äúregalito‚Äù de soportar o evolucionar un c√≥digo heredado. Por ello las pruebas son imprescindibles, ya que nos permiten garantizar que las aplicaciones cumplen las funcionalidades que se esperan de ellas y las expectativas de calidad (no solo de c√≥digo); ayudando a encontrar esos errores o defectos que a√∫n no se han descubierto; reduciendo el costo del desarrollo, el de propiedad para los usuarios; y desarrollar confianza en los clientes al evitar los molestos errores de regresi√≥n. Eso sin hablar de la sensaci√≥n de seguridad incremental que se obtiene cuanto m√°s cerca estamos de un despliegue, ya que a m√°s c√≥digo que tenemos, m√°s pruebas nos aseguran (en forma de una tupida malla) que todo funciona correctamente. ","date":"05-06-2018","objectID":"/posts/2018/comun/004/:1:0","tags":["n9+","comun"],"title":"¬øQu√© pruebas debemos hacerle a nuestro videojuego?","uri":"/posts/2018/comun/004/"},{"categories":["comun"],"content":"DevOps y la herencia de la automatizaci√≥n . La llegada de las metodolog√≠as Agiles, desde los a√±os 90 del siglo pasado, fue un revulsivo en la organizaci√≥n y ejecuci√≥n de pruebas dentro de procesos Waterfall. En estos √∫ltimos, se podr√≠a generalizar, las pruebas principalmente eran manuales; definidas meticulosamente en voluminosos documentos de planes de pruebas; y que se realizaban solamente una vez acabada la codificaci√≥n del software. Xtreme Programming, en cambio, hizo mucho hincapi√© en la automatizaci√≥n y en el concepto de pruebas orientadas a la prevenci√≥n de los finales de los a√±os 80; marcando de esta forma, la futura filosof√≠a Agile. Por ello, actualmente utilizamos frameworks de pruebas que permiten realizar autom√°ticamente la mayor√≠a de los test en todos los √°mbitos de la aplicaci√≥n. Y m√°s cuando se pretende adoptar el concepto de Integraci√≥n Continua, como parte imprescindible de DevOps, donde la propia construcci√≥n y validaci√≥n de la Build por medio de todo tipo de pruebas autom√°ticas es parte inherente del proceso. Siendo esto a√∫n m√°s cr√≠tico en niveles altos de madurez en donde llegar√≠amos a aplicar despliegue automatizado o, incluso, continuo. La importancia que han ido ganando las pruebas ha sido tal que la propia forma de codificar el software tambi√©n ha sufrido cambios profundos. El nacimiento de TDD (desarrollo orientado a las pruebas) y su forma de supeditar el c√≥digo a los test, implica que hacer software testeable es un requisito imprescindible en el c√≥digo de calidad. Y, aunque no lleguemos a utilizar esta avanzada t√©cnica de desarrollo (que no es nada f√°cil), el objetivo de poder probar de forma autom√°tica nuestro c√≥digo, ha reforzado pr√°cticas tan importantes en la programaci√≥n orientada a objetos como es SOLID. ","date":"05-06-2018","objectID":"/posts/2018/comun/004/:2:0","tags":["n9+","comun"],"title":"¬øQu√© pruebas debemos hacerle a nuestro videojuego?","uri":"/posts/2018/comun/004/"},{"categories":["comun"],"content":"Un universo de tipos de pruebas Siguiendo los pasos de la complejidad inherente de nuestra industria, las pruebas tambi√©n sufren de una mir√≠ada inacabable de tipos, versiones, evoluciones y clases. Pero centr√©monos en las m√°s importantes e imprescindibles, seg√∫n cada caso y contexto. Prueba unitaria: las pruebas unitarias son pruebas automatizadas que verifican la funcionalidad en el componente, clase, m√©todo o nivel de propiedad. El objetivo principal de las pruebas unitarias es tomar la pieza m√°s peque√±a de software comprobable en la aplicaci√≥n, aislarla del resto del c√≥digo y determinar si se comporta exactamente como esperamos. Cada unidad se prueba por separado antes de integrarlas en los componentes para probar las interfaces entre las unidades. Las pruebas unitarias deben escribirse antes (o muy poco despu√©s) de escribir un m√©todo; siendo los desarrolladores que crean la clase o el m√©todo, quienes dise√±an la prueba. As√≠, conseguimos mantener el foco en lo que debe hacer el c√≥digo, y se convierte en una poderosa herramienta para aplicar KISS, JIT, y mantener el foco en lo que tiene que hacer en vez de en el c√≥mo, evitando introducir complejidad sin valor. Pruebas de integraci√≥n: desde una perspectiva de prueba, las unidades individuales se integran juntas para formar componentes m√°s grandes. En su forma m√°s simple, dos unidades que ya han sido probadas se combinan en un componente integrado y se prueba la interfaz entre ellas. Las pruebas de integraci√≥n ‚Äì o de componentes - identifican problemas que ocurren cuando las unidades se combinan. Los nuevos errores que surgen probablemente est√©n relacionados con la interfaz entre las unidades en lugar de dentro de las propias unidades; simplificando la tarea de encontrar y corregir los defectos. Pruebas de regresi√≥n: cada vez que se realizan cambios en un proyecto, es posible que el c√≥digo existente ya no funcione correctamente o que se presenten errores no descubiertos previamente. Este tipo de error se llama regresi√≥n. Para detectar estos defectos, todo el proyecto debe someterse a una regresi√≥n: una nueva prueba completa de un programa modificado, en lugar de una prueba de solo las unidades modificadas, para garantizar que no se hayan introducido errores con las modificaciones. Como se puede deducir, este tipo de pruebas debe ser automatizado porque puede estar compuesto por decenas o miles de pruebas unitarias, de integraci√≥n o m√°s. Una versi√≥n menos costosa, podr√≠a ser construir pruebas que repliquen las acciones que provocaron la regresi√≥n, y comprueben que han sido corregidos al no volver a sucederse los errores; adem√°s de a√±adir los test unitarios que aseguren que el c√≥digo que ha corregido la regresi√≥n funciona correctamente. Pruebas de funcionalidad: pruebas automatizadas o manuales que prueban las funcionalidades de la aplicaci√≥n o m√≥dulo construidos desde el punto de vista del usuario final, con sus diferentes roles, para validar que el software hace lo que debe y, sobre todo, lo que se ha especificado. En su versi√≥n autom√°tica son pruebas que se automatizan para ‚Äúahorrar tiempo de pruebas‚Äù. A partir de los casos de prueba de las pruebas manuales, se automatizan los casos de prueba para que se repitan en las ejecuciones. Esos casos suelen ser los m√°s importantes (happy flow) de los m√≥dulos o procesos de negocio ‚Äúvitales‚Äù de la aplicaci√≥n. Es decir, los procesos que siempre tienen que funcionar y que bajo ning√∫n concepto pueden fallar. El objetivo de las pruebas funcionales autom√°ticas es comprobar que no haya regresiones. Pruebas de estr√©s: las pruebas a peque√±a escala, como un usuario √∫nico que ejecuta una aplicaci√≥n web o una base de datos con solo un pu√±ado de registros, pueden no revelar problemas que suceden cuando la aplicaci√≥n se usa en condiciones ‚Äúreales‚Äù. La prueba de estr√©s empuja los l√≠mites funcionales de un sistema. Se realiza sometiendo el sistema a condiciones extremas, como vol√∫menes de datos m√°ximos o una gran cantidad de usuarios simult√°neos. Tamb","date":"05-06-2018","objectID":"/posts/2018/comun/004/:3:0","tags":["n9+","comun"],"title":"¬øQu√© pruebas debemos hacerle a nuestro videojuego?","uri":"/posts/2018/comun/004/"},{"categories":["comun"],"content":"Como casi todas las noticias bomba, el rumor de que Microsoft estaba interesada en la adquisici√≥n del principal repositorio de c√≥digo libre del mundo, GitHub, me llego a trav√©s de las redes sociales cargado de incertidumbre y desconfianza. Lo que no ha sido sorprendente ha sido la sobre reacci√≥n de la comunidad de desarrolladores, en donde se encendieron las viejas antorchas de la inagotable guerra entre los fanboys (pro) y los talibanes (anti) Microsoft. Y por ello, quiero aportar al extenso debate y a los cientos de art√≠culos que recorren las redes sociales, el punto de vista de un desarrollador sobre la pol√©mica compra. ","date":"05-06-2018","objectID":"/posts/2018/comun/003/:0:0","tags":["n9+","comun"],"title":"Microsoft compra Github: Perspectiva de un desarrollador","uri":"/posts/2018/comun/003/"},{"categories":["comun"],"content":"¬øQu√© es GitHub? . En abril del 2005 Linus Torvalds, el padre del sistema operativo Linux, dise√±√≥ un motor de control de c√≥digo llamado Git con el prop√≥sito de tener un sistema descentralizado que le permitiera trabajar de la forma que las herramientas del momento no le permit√≠an. Su √©xito fue inmediato y r√°pidamente creci√≥ su adopci√≥n por la comunidad de desarrolladores hasta convertirse en el gestor de c√≥digo m√°s utilizado en todo el mundo. Usando este repositorio como piedra angular, en 2008 Chris Wanstrath, PJ Hyett, y Tom Preston-Werner, fundan GitHub con el prop√≥sito √∫ltimo de construir herramientas para la comunidad de desarrollo, sentando las bases de la plataforma que acoge m√°s de 28 millones de usuarios y supera los 85 millones de repositorios. Aun cuando ofrece un servicio de repositorios privados y empresariales, el √©xito de GitHub viene por su adopci√≥n como est√°ndar de facto para la publicaci√≥n de proyectos open source, y un funcionamiento principalmente basado en Pull Request; t√©cnica de construcci√≥n colaborativa ampliamente aplicada en el desarrollo de c√≥digo abierto. Es tal su √©xito, que es casi de obligado cumplimiento el tener un repositorio en GitHub para poder ponerse el t√≠tulo de ‚Äúdesarrollador‚Äù; incluso llegando a ser parte fundamental del curr√≠culum profesional, como pueden ser tambi√©n el perfil de Linkedin o la presencia en las redes sociales y eventos de comunidad. Y, a√∫n m√°s all√° del almacenamiento del c√≥digo fuente, se utiliza para distribuir documentaci√≥n, blogs, informaci√≥n, p√°ginas web est√°ticas, etc. ","date":"05-06-2018","objectID":"/posts/2018/comun/003/:1:0","tags":["n9+","comun"],"title":"Microsoft compra Github: Perspectiva de un desarrollador","uri":"/posts/2018/comun/003/"},{"categories":["comun"],"content":"¬øPor qu√© su destino era la Bolsa o la compra? . Como un buen ejemplo de start-up, GitHub no rinde beneficios en comparaci√≥n con el volumen de inversi√≥n que ha ido recibiendo. Al principio, cuando el dinero proven√≠a de sus tres fundadores, el resultado anual era positivo en relaci√≥n con la importante tasa de crecimiento que consiguieron. Pero las alarmas empezaron a saltar cuando el reputado medio Bloomberg public√≥ un informe en d√≥nde se mostraba que el ritmo de gasto de GitHub, para seguir creciendo y protegerse de sus competidores, hab√≠a llegado a los 66 millones de d√≥lares en 9 meses. 7.500.000.000 de razones, son muchas para decir que no. La cosa se tuvo que empezar a poner de color hormiga (no hay acceso a las cifras) cuando en agosto del 2017 Chris Wanstrath, fundador y CEO de la compa√±√≠a, pon√≠a pies en polvorosa (o le obligaban) y no hab√≠a forma de encontrar una nueva cabeza que dirigiera los pasos de la empresa. Todos los analistas ve√≠an √∫nicamente tres soluciones, la cual una de ellas (el cierre) hubiera significado un desastre tanto econ√≥mico para los inversores, como un problema de enormes repercusiones para la comunidad del desarrollo de software. Otra opci√≥n era preparar una salida a Bolsa basada en la confianza de una plataforma robusta, que ha vencido a competidores del calibre de Google Code, Sourceforge y CodePlex, y que tiene millones y millones de clientes que respaldan el servicio. Pero con el inconveniente de ser un poco ‚Äúpeque√±a‚Äù a√∫n para entrar en el juego de la especulaci√≥n financiera; habiendo un riesgo cierto de que saliera mal, y perdiera lo poco que le pod√≠a quedar de cr√©dito. La √∫ltima opci√≥n, y que es la que ha resultado ganadora, es conseguir vender la plataforma a una de las grandes del sector como podr√≠a ser Google, Microsoft, Oracle, IBM, o similar. Eliminando de un plumazo todos los problemas financieros y obteniendo unos m√°s que suculentos beneficios. Y les ha salido muy bien. En el momento de la venta, GitHub estaba sobre estimada en unos dos mil millones de d√≥lares, y Microsoft ha puesto encima de la mesa m√°s del triple de dinero: 7.500 millones. ","date":"05-06-2018","objectID":"/posts/2018/comun/003/:2:0","tags":["n9+","comun"],"title":"Microsoft compra Github: Perspectiva de un desarrollador","uri":"/posts/2018/comun/003/"},{"categories":["comun"],"content":"¬øPor qu√© la ha comprado Microsoft? . CodePlex fue el repositorio de c√≥digo p√∫blico creado y sostenido por Microsoft desde el 2006 hasta finales del 2017, en donde cerraron ante el auge imparable y la adopci√≥n de GitHub como plataforma principal para publicar el c√≥digo fuente de los proyectos Open Source de la compa√±√≠a. Una compra estrat√©gica para protegerse del competidor Esta adopci√≥n tambi√©n se mostr√≥ en las herramientas de desarrollo, desde las cuales puedo conectar mis proyectos con el motor Team Foundation Version Control, Git o GitHub, indistintamente. Adem√°s, cada vez se publica m√°s y m√°s informaci√≥n, documentos y material de formaci√≥n en GitHub. Siendo la plataforma elegida por Azure para sus repositorios de plantillas de despliegue de Infraestructura como C√≥digo. Es decir, Microsoft reconoci√≥ y se rindi√≥ ante la realidad de que la combinaci√≥n de Git + GitHub era imbatible y hab√≠a sido la elegida por la comunidad para gestionar el c√≥digo. Y ahora, aprovechando las vicisitudes financieras por las que pasaba GitHub, tiene sentido que se propusiera una adquisici√≥n preventiva estrat√©gica de una plataforma que se ha vuelto cr√≠tica y troncal en el negocio del desarrollo, para evitar que pudiera ser adquirida por competidores de la talla de Google u Oracle, lo cual podr√≠a traerle serios inconvenientes funcionales. Recordemos la reciente pol√≠tica anti Microsoft de Google, que tantas molestias ha causado a los usuarios. ","date":"05-06-2018","objectID":"/posts/2018/comun/003/:3:0","tags":["n9+","comun"],"title":"Microsoft compra Github: Perspectiva de un desarrollador","uri":"/posts/2018/comun/003/"},{"categories":["comun"],"content":"Valoraci√≥n Buenas La primera ventaja de esta adquisici√≥n es que se han evaporado los negros nubarrones financieros sobre el futuro de GitHub. No se puede negar que Microsoft tiene m√°s que suficientes recursos como para sostener los costes de operaci√≥n a largo plazo sin pesta√±ear. Para los desarrolladores que utilizan el stack de Microsoft, estamos de enhorabuena porque se espera una integraci√≥n en todo el ciclo de desarrollo mucho m√°s cercano, y el resultado de la integraci√≥n de GitHub con Visual Studio Team Services puede ser muy interesante. De hecho, uno de los puntos que m√°s ilusi√≥n me hacen de la nota de prensa de Satya Natedella, es cuando habla como se va a potenciar el desarrollo en cada etapa del ciclo de vida, manteniendo la absoluta libertad de elecci√≥n del lenguaje, herramientas, sistemas operativos y nube que se tiene ahora. Para la mayor√≠a que no utilizan herramientas de Microsoft m√°s all√° de VS Code, los cambios deber√≠an ser menos evidentes, ya que se supone que se va a aplicar un modelo de funcionamiento similar al de Linkedin. Es decir, GitHub seguir√° funcionando igual que ahora, con su marca, sus cifras y su modelo de negocio; pero bajo las √≥rdenes de gente tan buena como Nat Friedman y Scott Gurnie. Malas Las causas del rechazo a esta compra parecen ser m√°s bien emocionales. Basadas en la desconfianza a una compa√±√≠a que durante muchos a√±os ha sido un enemigo declarado del Open Source, y que ha sido condenada por pr√°cticas monopol√≠sticas y por manipulaci√≥n del mercado. Aun habiendo pasado m√°s de 20 a√±os, a√∫n muchos recuerdan las palabras de Ballmer demonizando el software libre. Pero m√°s recientemente los grandes fiascos de Windows Phone o Windows RT, con cientos o miles de proyectos tirados a la basura por un cambio de rumbo empresarial, producen reticencia en muchos desarrolladores. . ","date":"05-06-2018","objectID":"/posts/2018/comun/003/:4:0","tags":["n9+","comun"],"title":"Microsoft compra Github: Perspectiva de un desarrollador","uri":"/posts/2018/comun/003/"},{"categories":["comun"],"content":"Despu√©s de ver la evoluci√≥n que esta sufriendo hugo con su tecnolog√≠a de paginas est√°ticas, me he puesto a investigar un poco sobre su lenguaje en especifico y como funciona internamente. Mi conclusi√≥n: Un lenguaje de subcapas, bastante lioso y dificil de llevar. Esta escrito en go, pero hablando de base, despu√©s tiene unas subcapas de un mini-lenguaje que lo hacen un poco tedioso, a mi gusto. Aunque no puedo decir nada de su rapidez, ya que se ha puesto entre los primeros en muy poco tiempo y su comunidad a crecido numerosamente. En si, una buena tecnolog√≠a, pero tediosa de desarrollar. ","date":"30-05-2018","objectID":"/posts/2018/comun/001/:0:0","tags":["n9+","comun"],"title":"Mejora del blog","uri":"/posts/2018/comun/001/"},{"categories":["comun"],"content":"Mejoras realizadas Despu√©s de investigar, pude realizar unas mejoras a la base. Estas son: Implementaci√≥n de ¬†Font Awesome en los t√≠tulos de la pagina principal. Mejora sistema de traking (anteriormente trakeaba grupalmente). Implementaci√≥n de avatar en los t√≠tulos de la pagina principal. Por parte del tema: Agregado nuevos tipos de par√°metros sociales. ","date":"30-05-2018","objectID":"/posts/2018/comun/001/:0:1","tags":["n9+","comun"],"title":"Mejora del blog","uri":"/posts/2018/comun/001/"},{"categories":["comun"],"content":"Sobre el autor del tema El tema principal lo dise√±o ¬†Rohan Chandra, luego fue portado por ¬†Digitalcraftsman, que junto con varios desarrolladores y yo generamos un tema de lo mas sencillo y editable, por ultimo el autor del port abandono el tema y ahora ¬†Andy Grunwald sigue el desarrollo en una ¬†rama de su repositorio, para los que quieran seguir con el proyecto. ","date":"30-05-2018","objectID":"/posts/2018/comun/001/:0:2","tags":["n9+","comun"],"title":"Mejora del blog","uri":"/posts/2018/comun/001/"},{"categories":["comun"],"content":"¬øQue significan estas mejoras? Icono Significado El post contiene informaci√≥n de investigaci√≥n o estudio. El post contiene informaci√≥n de desarrollo y c√≥digo. El post contiene informaci√≥n audiovisual. El post contiene informaci√≥n de archivos y documentos. El post contiene informaci√≥n de arte o ilustraciones. El post contiene informaci√≥n de texto plano. El post contiene informaci√≥n de audio. Los avatares, son simplemente ilustraciones de gente. . ","date":"30-05-2018","objectID":"/posts/2018/comun/001/:0:3","tags":["n9+","comun"],"title":"Mejora del blog","uri":"/posts/2018/comun/001/"},{"categories":["dev"],"content":"A continuaci√≥n, veremos qu√© es Markdown exactamente, c√≥mo funciona, qu√© es necesario para usarlo, en que entornos resulta pr√°ctico y, por supuesto, repasaremos brevemente algunas de las muchas herramientas que existen para poder utilizarlo, tanto en local como en la web. ","date":"29-05-2018","objectID":"/posts/2018/dev/005/:0:0","tags":["n9+","dev"],"title":"Markdown - Lenguaje de marcado principal","uri":"/posts/2018/dev/005/"},{"categories":["dev"],"content":"Introducci√≥n Markdown es un lenguaje de marcado que facilita la aplicaci√≥n de formato a un texto empleando una serie de caracteres de una forma especial. En principio, fue pensado para elaborar textos cuyo destino iba a ser la web con m√°s rapidez y sencillez que si estuvi√©semos empleando directamente HTML. Y si bien ese suele ser el mejor uso que podemos darle, tambi√©n podemos emplearlo para cualquier tipo de texto, independientemente de cual vaya a ser su destino. Se podr√≠a decir que es la evoluci√≥n de html, en casos de etiquetaci√≥n claro, ya que Markdown unicamente vale para el formato de texto plano (con HTML se puede crear la estructura de una web). . ","date":"29-05-2018","objectID":"/posts/2018/dev/005/:1:0","tags":["n9+","dev"],"title":"Markdown - Lenguaje de marcado principal","uri":"/posts/2018/dev/005/"},{"categories":["dev"],"content":"Markdown y su funcionamiento Markdown funciona como cualquier otro lenguaje de procesado de texto, a diferencia de que este, tiene la mayor rapidez de todos. Al colocar las etiquetas, markdown procesa de marca en marca, es decir, si usamos el marcado para encabezado (#), markdown determina que es un encabeza y por lo tanto pasa toda la frase a encabezado. Html Markdown \u003ch2\u003eTexto\u003c/h2\u003e # Texto Como vemos, es mucho mas simple y r√°pido de escribir el lenguaje markdown, pero aun con eso, markdown es mas r√°pido, ya que html funciona de tal manera, de que primero lee la etiqueta h2, luego sigue hasta encontrar el cierre de /h2 y entonces procesa el texto. En cambio markdown lee la marca # y autom√°ticamente lo siguiente lo procesa en su formato correspondiente. ","date":"29-05-2018","objectID":"/posts/2018/dev/005/:2:0","tags":["n9+","dev"],"title":"Markdown - Lenguaje de marcado principal","uri":"/posts/2018/dev/005/"},{"categories":["dev"],"content":"Que se necesita Unicamente se necesita un archivo markdown (.md) como los que se usan en github para el README o cualquier archivo .txt cambiarle la extension a md. Tan f√°cil como eso. Pero aqu√≠ unicamente podremos ver la parte interna. Para ver la conversion, tendr√≠as que crearte una app para crear los procesados o simplemente usar una de las miles de apps online. . ","date":"29-05-2018","objectID":"/posts/2018/dev/005/:3:0","tags":["n9+","dev"],"title":"Markdown - Lenguaje de marcado principal","uri":"/posts/2018/dev/005/"},{"categories":["dev"],"content":"¬øEs practico? Yo llevo ya 4 a√±os us√°ndolo y puedo decir, que no escribo ni texto plano ni html para escribir online. Claro esta si no quiero hacer nada muy complicado, si quiero crear una estructura en vez de un formato, intercalo entre html y markdown. ","date":"29-05-2018","objectID":"/posts/2018/dev/005/:4:0","tags":["n9+","dev"],"title":"Markdown - Lenguaje de marcado principal","uri":"/posts/2018/dev/005/"},{"categories":["dev"],"content":"Comandos Sitio Oficial del creador\r","date":"29-05-2018","objectID":"/posts/2018/dev/005/:5:0","tags":["n9+","dev"],"title":"Markdown - Lenguaje de marcado principal","uri":"/posts/2018/dev/005/"},{"categories":["dev"],"content":"Aplicacion Online StackEdit\r. ","date":"29-05-2018","objectID":"/posts/2018/dev/005/:6:0","tags":["n9+","dev"],"title":"Markdown - Lenguaje de marcado principal","uri":"/posts/2018/dev/005/"},{"categories":["dev"],"content":"¬øQue es un lenguaje de programaci√≥n? Un lenguaje de programaci√≥n, es un lenguaje que puede ser utilizado para controlar el comportamiento de una maquina. Consiste en un conjunto de reglas sint√°cticas y sem√°nticas que definen su estructura y el significado de sus elementos, respectivamente. El ordenador solo entiende un lenguaje conocido como c√≥digo binario o c√≥digo maquina, consistente en ceros y unos. Es decir, solo utiliza 0 y 1 para codificar cualquier acci√≥n. Introducci√≥n Los lenguajes mas pr√≥ximos a la arquitectura hardware se denominan lenguajes de bajo nivel y los que se encuentran **‚Äìmas cercanos a los programadores y usuarios se denominan lenguajes de alto nivel. . ","date":"26-05-2018","objectID":"/posts/2018/dev/004/:0:0","tags":["n9+","dev"],"title":"Tipos de lenguajes de programaci√≥n {Bajo y Alto nivel}","uri":"/posts/2018/dev/004/"},{"categories":["dev"],"content":"Lenguajes de alto nivel Son aquellos que se encuentran mas cercanos al lenguaje natural que al lenguaje maquina. Est√°n dirigidos a solucionar problemas mediante el uso de Estructuras Din√°micas de Datos. Se tratan de lenguajes independientes de la arquitectura del ordenador. Por lo que, en principio, un programa escrito en un lenguaje de alto nivel, lo puedes migrar de una maquina a otra sin ning√∫n tipo de problema. Estos lenguajes permiten al programador olvidarse por completo del funcionamiento interno de la maquina/s para la que est√°n dise√±ando el programa. Tan solo necesitan un traductor que entiendan el c√≥digo fuente como las caracter√≠sticas de la maquina. Suelen usar tipos de datos para la programaci√≥n y hay lenguajes de prop√≥sito general (cualquier tipo de aplicaci√≥n) y de prop√≥sito especifico (como FORTRAN para trabajos cient√≠ficos). Los t√≠picos lenguajes mas usados son : Java, C#, Python, JavaScript. ","date":"26-05-2018","objectID":"/posts/2018/dev/004/:1:0","tags":["n9+","dev"],"title":"Tipos de lenguajes de programaci√≥n {Bajo y Alto nivel}","uri":"/posts/2018/dev/004/"},{"categories":["dev"],"content":"Lenguajes de medio nivel Lenguaje de medio nivel es un lenguaje de programaci√≥n como el lenguaje C, que se encuentran entre los lenguajes de alto nivel y los lenguajes de bajo nivel. Suelen ser clasificados muchas veces de bajo nivel, pero permiten ciertos manejos de alto nivel. Son precisos para ciertas aplicaciones como la creaci√≥n de sistemas operativos, ya que permiten un manejo abstracto (independiente de la maquina, a diferencia del ensamblador), pero sin perder mucho del poder y eficiencia que tienen los lenguajes de bajo nivel. Una caracter√≠stica distintiva, por ejemplo, que convierte a C en un lenguaje de medio nivel y al Pascal en un lenguaje de alto nivel es que en el primero es posible manejar las letras como si fueran n√∫meros (en Pascal no), y por el contrario en Pascal es posible concatenar las cadenas de caracteres con el operador suma y copiarlas con la asignaci√≥n (en C es el usuario el responsable de llamar a las funciones correspondientes). Una de las caracter√≠sticas mas peculiares del lenguaje de programaci√≥n C; es el uso de ‚Äúapuntadores‚Äù, los cuales son muy √∫tiles en la implementaci√≥n de algoritmos como Listas ligadas, Tablas Hash y algoritmos de b√∫squeda y ordenamiento que para otros lenguajes de programaci√≥n (como Java por ejemplo) les suele ser un poco mas complicado implementar. Los t√≠picos lenguajes mas usados son : C, C++. ","date":"26-05-2018","objectID":"/posts/2018/dev/004/:2:0","tags":["n9+","dev"],"title":"Tipos de lenguajes de programaci√≥n {Bajo y Alto nivel}","uri":"/posts/2018/dev/004/"},{"categories":["dev"],"content":"Lenguajes de bajo nivel Son lenguajes totalmente dependientes de la maquina, es decir que el programa que se realiza con este tipo de lenguajes no se pueden migrar o utilizar en otras maquinas. Al estar pr√°cticamente dise√±ados a medida del hardware, aprovechan al m√°ximo las caracter√≠sticas del mismo. Dentro de este grupo se encuentran: El lenguaje maquina: este lenguaje ordena a la maquina las operaciones fundamentales para su funcionamiento. Consiste en la combinaci√≥n de 0‚Äôs y 1‚Äôs para formar las ordenes entendibles por el hardware de la maquina. Este lenguaje es mucho mas r√°pido que los lenguajes de alto nivel. El lenguaje ensamblador es un derivado del lenguaje maquina y esta formado por abreviaturas de letras y n√∫meros llamadas. Con la aparici√≥n de este lenguaje se crearon los programas traductores para poder pasar los programas escritos en lenguaje ensamblador a lenguaje maquina. Como ventaja con respecto al c√≥digo maquina es que los c√≥digos fuentes eran mas cortos y los programas creados ocupaban menos memoria. ","date":"26-05-2018","objectID":"/posts/2018/dev/004/:3:0","tags":["n9+","dev"],"title":"Tipos de lenguajes de programaci√≥n {Bajo y Alto nivel}","uri":"/posts/2018/dev/004/"},{"categories":["dev"],"content":"Generaciones Primera generaci√≥n: lenguaje maquina. Segunda generaci√≥n: se crearon los primeros lenguajes ensambladores. Tercera generaci√≥n: se crean los primeros lenguajes de alto nivel. Ej. C#, Pascal, Cobol Cuarta generaci√≥n: son los lenguajes capaces de generar c√≥digo por si solos, son los llamados RAD. Quinta generaci√≥n: aqu√≠ se encuentran los lenguajes orientados a la inteligencia artificial. ","date":"26-05-2018","objectID":"/posts/2018/dev/004/:4:0","tags":["n9+","dev"],"title":"Tipos de lenguajes de programaci√≥n {Bajo y Alto nivel}","uri":"/posts/2018/dev/004/"},{"categories":["dev"],"content":"Aclaraciones En la actualidad, se suele omitir los lenguajes de medio nivel, quedando asi los grupos: Alto Nivel -\u003e Java, C#, Python, JavaScript Bajo Nivel -\u003e C, C++ . ","date":"26-05-2018","objectID":"/posts/2018/dev/004/:5:0","tags":["n9+","dev"],"title":"Tipos de lenguajes de programaci√≥n {Bajo y Alto nivel}","uri":"/posts/2018/dev/004/"},{"categories":["dev"],"content":"Hoy decid√≠ compartir, algo que creo que no es un ‚Äúconocimiento com√∫n‚Äù y no hay muchos recursos sobre ese tema en Internet, despu√©s de que varios colegas que est√°n empezando en este mundo, me preguntasen como poder usar APIs en otros lenguajes en Unity3D, como por ejemplo el SKD de Steam que esta en C++ o las librerias .JAR de Android, decid√≠ crear una entrada nueva. Mostrare como crear bibliotecas simples de C/C++ para Unity3D. ","date":"26-05-2018","objectID":"/posts/2018/dev/003/:0:0","tags":["n9+","dev"],"title":"Unity3D Plugins ¬øQue son?","uri":"/posts/2018/dev/003/"},{"categories":["dev"],"content":"Introducci√≥n Alguna vez te has preguntado, ¬øComo los modders crean funcionalidad para los juegos?, pues la respuesta es esta, crean plugins que interfieren con la API publica de los juegos (Variables, m√©todos, funciones p√∫blicas) y luego con lenguaje pegamento crean la llamada si es que no se puede llamar desde el mismo core. Puede preguntar, ¬øpor que deber√≠a molestarme en escribir C o C++ cuando Unity admite C#? La respuesta es simple. Es mucho m√°s r√°pido, trabajar a ¬†bajo nivel cambia mucho las cosas. Decid√≠ preparar algunos ejemplos solo para mostrar como C++ supera a C# basado en Mono. Ejemplos: Prueba de Estr√©s Unity C# Biblioteca C/C++ Array de enteros de 10000 x 10000 1.0258 segundos 0.2346 segundos Array de enteros de 500 x 500 3.794 milisegundos 0.35 milisegundos Array de enteros de 10000 x 10000 con n√∫meros aleatorios 4.26 segundos 0.995 segundos Pros y contras de C/C++ y Unity3D ","date":"26-05-2018","objectID":"/posts/2018/dev/003/:1:0","tags":["n9+","dev"],"title":"Unity3D Plugins ¬øQue son?","uri":"/posts/2018/dev/003/"},{"categories":["dev"],"content":"Pros Triplica (en algunos casos) la velocidad de calculo. Las dlls no afectan al rendimiento de unity. ","date":"26-05-2018","objectID":"/posts/2018/dev/003/:1:1","tags":["n9+","dev"],"title":"Unity3D Plugins ¬øQue son?","uri":"/posts/2018/dev/003/"},{"categories":["dev"],"content":"Contras Unity no admite directamente C++. La velocidad que se ahorra en runtime, se pierde realizando las dlls. ","date":"26-05-2018","objectID":"/posts/2018/dev/003/:1:2","tags":["n9+","dev"],"title":"Unity3D Plugins ¬øQue son?","uri":"/posts/2018/dev/003/"},{"categories":["dev"],"content":"Crear biblioteca C++ En este caso, yo usare ¬†Code::Blocks, pero pod√©is usar cualquier IDE que quer√°is. Voy a crear un proyecto de librer√≠a din√°mica (.dll) llamado LowLevelPlugin. Ya que vamos a trabajar a bajo nivel. Nos iremos al encabezado main.h y eliminaremos todo el contenido que se ha generado autom√°ticamente. #ifndef __MAIN_H__ #define __MAIN_H__ #include \u003cwindows.h\u003e #ifdef BUILD_DLL #define DLL_EXPORT __declspec(dllexport) #else #define DLL_EXPORT __declspec(dllimport) #endif #ifdef __cplusplus extern \"C\" { #endif void DLL_EXPORT SomeFunction(const LPCSTR sometext); #ifdef __cplusplus } #endif #endif // __MAIN_H__ En su caso colocaremos esto otro -\u003e #pragma once #if UNITY_METRO #define EXPORT_API __declspec(dllexport) __stdcall #elif UNITY_WIN #define EXPORT_API __declspec(dllexport) #else #define EXPORT_API #endif El prop√≥sito de este encabezado completo es comportarse de manera diferente bas√°ndose en qu√© plataforma est√° compilando actualmente su c√≥digo. Significa que puede compilarlo f√°cilmente en Visual Studio. #pragma once #pragma once es una directiva espec√≠fica C/C++ dise√±ada para hacer que el archivo fuente actual se incluya solo una vez en una sola compilaci√≥n. #if UNITY_METRO Esto le dice al compilador que ejecute este bloque si solo estamos corriendo en Windows basado en Metro, por ejemplo, 8.1. Esto os sonara de Unity si hab√©is usado las ¬†directivas de compilaci√≥n de plataforma. #define EXPORT_API __declspec(dllexport) __stdcall La palabra clave ‚Äúdefine‚Äù funciona de manera similar a la funci√≥n replace, su sintaxis se puede definir de la siguiente manera: define ‚ÄòEsto‚Äô ‚ÄòPor esto‚Äô. En nuestro caso, cada vez que el compilador ve la secuencia de caracteres EXPORT_API en el c√≥digo, la reemplaza con la segunda parte. Del mismo modo, el compilador se comportar√° en caso de que compile su c√≥digo en ventanas antiguas, reemplace EXPORT_API con __declspec(dllexport) y simplemente elimine EXPORT_API en cualquier otro caso. Eso es todo cuando se trata de encabezado. Ahora pasemos a algo que sea m√°s interesante, el c√≥digo fuente real. En el archivo main.cpp pegue el siguiente c√≥digo: #include \u003cstdlib.h\u003e #include \u003cmath.h\u003e #include \"main.h\" extern \"C\" int ** EXPORT_API fillArray(int size) { int i = 0, j = 0; int ** array = (int**) calloc(size, sizeof(int*)); for(i = 0; i \u003c size; i++) { array[i] = (int*) calloc(size, sizeof(int)); for(j = 0; j \u003c size; j++) { array[i][j] = i * size + j; } } return array; } Las primeras tres l√≠neas son en mi humilde opini√≥n autoexplicativas. Simplemente estamos agregando algunas bibliotecas est√°ndar y nuestro archivo de encabezado reci√©n creado. El siguiente es: extern \"C\" int ** EXPORT_API fillArray(int size) { Esta es nuestra declaraci√≥n de funci√≥n. Nuestra funci√≥n se llama ‚ÄúfillArray‚Äù, toma un argumento int y devuelve una matriz de enteros bidimensional. (S√≠, ** significa dos dimensiones) ‚Äúextern‚Äù extiende la visibilidad a todo el programa, las funciones se pueden usar en cualquier de los archivos de todo el programa y fuera de nuestra biblioteca/plugin. Tambi√©n tenemos nuestra palabra clave EXPORT_API. La siguiente linea es: int ** array = (int**) calloc(size, sizeof(int*)); Aqu√≠ estoy definiendo int-array bidimensional y luego estoy asignando memoria para ello. Como estoy escribiendo c√≥digo en C++, no puedo simplemente crear una matriz y asignar valores. Tengo que reservar algo de espacio en memoria para eso y luego hacer cualquier operaci√≥n. En este caso particular, estoy asignando las siguientes ‚Äúceldas‚Äù de memoria de N tama√±o de int* y lo convierto al tipo bidimensional int array. Lo mismo que estoy haciendo aqu√≠: array[i] = (int*) calloc(size, sizeof(int)); La √∫nica diferencia es que ahora estoy asignando memoria para cada fila ‚Äúi‚Äôt‚Äù de una matriz. Y al final estoy devolviendo un conjunto lleno. Espero que para los bucles y la asignaci√≥n de valores sea obvio, as√≠ que no lo explicar√©. Ahora solo compilamos y se creara la dll. . ","date":"26-05-2018","objectID":"/posts/2018/dev/003/:2:0","tags":["n9+","dev"],"title":"Unity3D Plugins ¬øQue son?","uri":"/posts/2018/dev/003/"},{"categories":["dev"],"content":"Implementar puente en Unity3D Copia la dll en un Proyecto Unity3D dentro de la carpeta plugins en /Assets/Plugins. Tambi√©n debe crear un script C# en el directorio base para que la estructura de su proyecto tenga este aspecto: . En la parte superior de tu script C# agrega ‚ÄúUsing System.Runtime.InteropServices;‚Äù, luego la declaraci√≥n de la funci√≥n de la dll, crea una matriz y por ultimo asigna a la variable la llamada. public int size = 512; [DllImport(\"LowLevelPlugin\")] private static extern int[,] fillArray(int size); private void Start() { ArrayFillTest(); } private void ArrayFillTest() { var start = Time.realtimeSinceStartup; int[,] tab = fillArray(size); Debug.Log((Time.realtimeSinceStartup - start).ToString(\"f6\") + \" secs\"); start = Time.realtimeSinceStartup; int[,] array = new int[size, size]; for (int i = 0; i \u003c size; i++) { for (int j = 0; j \u003c size; j++) { array[i, j] = i * size + j; } } Debug.Log((Time.realtimeSinceStartup - start).ToString(\"f6\") + \" secs\"); } Conclusiones Siempre que ejecutes c√≥digo de bajo nivel, tendr√°s mejores resultados. GitHub\r. ","date":"26-05-2018","objectID":"/posts/2018/dev/003/:3:0","tags":["n9+","dev"],"title":"Unity3D Plugins ¬øQue son?","uri":"/posts/2018/dev/003/"},{"categories":["dev"],"content":"Los Objetos Scriptables son un tipo especial de objeto de datos en Unity. Tienen varios beneficios importantes, pero es posible que no funcionen de manera ideal para cada situaci√≥n. ","date":"17-04-2018","objectID":"/posts/2018/dev/002/:0:0","tags":["n9+","dev"],"title":"ScriptableObjects","uri":"/posts/2018/dev/002/"},{"categories":["dev"],"content":"Introducci√≥n a los Objetos Scriptables Puede pensar en un objeto programable como un objeto destinado solo a contener datos. Si ha estado utilizando clases o estructuras tradicionales de C# para objetos simples solo de datos, podr√≠a utilizarlas en su lugar. Por supuesto, usted se estar√° preguntando ‚Äúpor qu√©‚Äù le gustar√≠a usar un Objeto Scriptable. Aqu√≠ hay algunos pros y contras: ","date":"17-04-2018","objectID":"/posts/2018/dev/002/:1:0","tags":["n9+","dev"],"title":"ScriptableObjects","uri":"/posts/2018/dev/002/"},{"categories":["dev"],"content":"Pros Pueden sobrevivir a una carga (como cuando construyes tus scripts o cuando ingresas y sales del modo de reproducci√≥n). Se guardan por referencia, mientras que las clases y estructuras normales se serializan como copias completas. Esto puede ayudarlo a evitar la duplicaci√≥n de datos. Pueden manejar el polimorfismo, mientras que las clases normales terminan siendo tratadas como la clase base. Se pueden guardar como un activo del proyecto. No necesitan estar adjuntos a GameObjects. ","date":"17-04-2018","objectID":"/posts/2018/dev/002/:1:1","tags":["n9+","dev"],"title":"ScriptableObjects","uri":"/posts/2018/dev/002/"},{"categories":["dev"],"content":"Contras Debe heredar de ScriptableObject, lo que puede romper muchas de sus opciones arquitect√≥nicas o de dise√±o. No puede crearlos usando constructores normales, sino que debe usar ‚ÄúCreateInstance‚Äù en su lugar. Los beneficios de serializaci√≥n no son igualmente aplicables al tiempo de ejecuci√≥n. He creado varias mini demos para aclarar estos puntos. Las dos primeras demostraciones muestran c√≥mo podr√≠a encontrarse con problemas si no estuviera usando ScriptableObjects. Las dos demos siguientes muestran c√≥mo ScriptableObjects supera esos mismos problemas. ","date":"17-04-2018","objectID":"/posts/2018/dev/002/:1:2","tags":["n9+","dev"],"title":"ScriptableObjects","uri":"/posts/2018/dev/002/"},{"categories":["dev"],"content":"Demo 1 P√©rdida de referencias de objeto en la serializaci√≥n Comencemos con algunos ejemplos de serializaci√≥n. Comience por crear un nuevo script llamado ‚ÄúDemo1‚Äù y otro llamado ‚ÄúDemo1Data‚Äù, tambi√©n agregue un script de editor llamado ‚ÄúDemo1Inspector‚Äù: using UnityEngine; public class Demo1 : MonoBehaviour { public Demo1Data dataA; public Demo1Data dataB; } Este script tendr√° dos copias de la misma instancia de ‚ÄúDemo1Data‚Äù. Usaremos un script editor para crear y asignar sus valores. using UnityEngine; [System.Serializable] public class Demo1Data { public int value; } Este script muestra una clase C# est√°ndar muy simple. Se puede serializar, gracias a la etiqueta ‚Äú[System.Serializable]‚Äù, pero Unity no lo manejar√° perfectamente, lo que se demostrar√° pronto. using UnityEngine; using UnityEditor; [CustomEditor(typeof(Demo1))] public class Demo1Inspector : Editor { public override void OnInspectorGUI() { DrawDefaultInspector (); Demo1 myTarget = (Demo1)target; if (GUILayout.Button (\"Create Shared Data\")) { myTarget.dataA = new Demo1Data (); myTarget.dataB = myTarget.dataA; } } } Este script proporcionar√° un bot√≥n en el inspector de nuestro componente que crear√° una nueva instancia de ‚ÄúDemo1Data‚Äù y la asignar√° a ambos campos en el script ‚ÄúDemo1‚Äù. IMPORTANTE El script del editor debe agregarse a una carpeta llamada ‚ÄúEditor‚Äù o no funcionar√° correctamente Crea una nueva escena. Agregue ‚ÄúDemo1‚Äù como componente a cualquier objeto de juego, como crear un nuevo objeto de juego vac√≠o o incluso adjuntarlo a la c√°mara. Luego mira en el inspector. Unity crear√° autom√°ticamente nuevas instancias de ‚ÄúDemo1Data‚Äù para ambos campos simplemente mirando el objeto en el inspector. Puede asignar cualquier valor que desee a cada uno de los campos ‚ÄúValue‚Äù. Si ingresa y sale del modo de reproducci√≥n, los valores incluso persistir√°n, hasta ahora todo bien. Salga del modo de reproducci√≥n (si a√∫n no lo hizo), luego use el bot√≥n ‚ÄúCrear Data‚Äù en el inspector. El valor para ambos campos deber√≠a volver a ‚Äò0‚Äô porque ambos campos ahora se refieren a la misma instancia nueva. Si modifica el campo de valor de ‚ÄúdataB‚Äù, deber√≠a ver el campo de valor de la actualizaci√≥n ‚ÄúdataA‚Äù. Sigue luciendo bien ‚Ä¶ al menos hasta que ingrese y salga del modo de reproducci√≥n. Pru√©balo, luego modifica el valor de ‚ÄúdataB‚Äù una vez m√°s. Uh oh, ¬°los dos ya no est√°n haciendo referencia al mismo objeto! Unity ha creado una copia completa del objeto original para ambos campos. ","date":"17-04-2018","objectID":"/posts/2018/dev/002/:2:0","tags":["n9+","dev"],"title":"ScriptableObjects","uri":"/posts/2018/dev/002/"},{"categories":["dev"],"content":"Demo 2 P√©rdida de tipo de objeto en la serializaci√≥n Esta demostraci√≥n mostrar√° c√≥mo Unity no puede serializar correctamente el tipo de un objeto. Puede encontrar este problema con una lista polim√≥rfica de objetos. Crea lo siguiente: using UnityEngine; public class Demo2 : MonoBehaviour { public Demo2Data[] dataArray; } Este script tendr√° una matriz de objetos. Cada objeto compartir√° una clase base - ‚ÄúDemo2Data‚Äù, pero en realidad se instanciar√° como una subclase. using UnityEngine; [System.Serializable] public class Demo2Data { public string name; public override string ToString () { return string.Format (\"[{0}]\", name); } } [System.Serializable] public class Demo2NumberData : Demo2Data { public int number; public override string ToString () { return string.Format (\"[{0}, {1}]\", name, number); } } [System.Serializable] public class Demo2BoolData : Demo2Data { public bool toggle; public override string ToString () { return string.Format (\"[{0}, {1}]\", name, toggle); } } Aqu√≠ hay tres clases, una clase base llamada ‚ÄúDemo2Data‚Äù y dos subclases de la misma. Tenga en cuenta que nunca instanciaremos una copia de la clase base directamente. using UnityEngine; using UnityEditor; [CustomEditor(typeof(Demo2))] public class Demo2Inspector : Editor { public override void OnInspectorGUI() { DrawDefaultInspector (); Demo2 myTarget = (Demo2)target; if (GUILayout.Button (\"Crear Datos\")) { var dataA = new Demo2NumberData (); dataA.name = \"Demo2NumberData\"; dataA.number = UnityEngine.Random.Range (1, 100); var dataB = new Demo2BoolData (); dataB.name = \"Demo2BoolData\"; dataB.toggle = UnityEngine.Random.value \u003e 0.5; myTarget.dataArray = new Demo2Data[] { dataA, dataB }; } if (GUILayout.Button (\"Imprimir Valores\")) { foreach (var data in myTarget.dataArray) { Debug.Log (data.ToString()); } } } } Este script proporcionar√° algunos botones en el inspector de nuestro componente. El primero est√° etiquetado como ‚ÄúCrear Datos‚Äù e instanciar√° cada una de nuestras subclases de datos y las asignar√° a la matriz de datos de nuestro script. El segundo bot√≥n est√° etiquetado como ‚ÄúImprimir Valores‚Äù y har√° que cada objeto en la matriz imprima sus valores en la consola. IMPORTANTE: el script del editor debe agregarse a una carpeta ‚ÄúEditor‚Äù o no funcionar√° correctamente. Crea una nueva escena. Agregue la ‚ÄúDemo2‚Äù como un componente a cualquier objeto del juego, como crear un nuevo objeto de juego vac√≠o o incluso adjuntarlo a la c√°mara. Luego mira en el inspector. Unity crear√° autom√°ticamente una matriz vac√≠a de datos simplemente mirando el objeto en el inspector. Llenemos nuestro objeto con datos haciendo clic en el bot√≥n ‚ÄúCrear Datos‚Äù. Deber√≠a ver que la matriz contiene ahora dos objetos. Aunque la clase de datos base y sus subclases tienen la etiqueta ‚Äú[System.Serializable]‚Äù, no ver√° los campos agregados para los campos ‚Äún√∫mero‚Äù o ‚Äúalternar‚Äù de las instancias reales. Esto se debe a que Unity los trata como a la clase base, que solo conoce el ‚Äúnombre‚Äù del objeto. Sin embargo, los datos todav√≠a est√°n all√≠ (al menos por el momento). Haga clic en el bot√≥n ‚ÄúImprimir Valores‚Äù y deber√≠a ver la descripci√≥n completa. En una de mis propias ejecuciones vi salidas como las siguientes: [Demo2NumberData, 84] [Demo2BoolData, False] Se ve bien hasta ahora, ¬øverdad? Bueno, veamos si puede sobrevivir a una carga. Adelante, ingrese y salga del modo de reproducci√≥n. Ahora presione el bot√≥n ‚ÄúImprimir Valores‚Äù una vez m√°s. Deber√≠a ver un resultado como este: [Demo2NumberData] [Demo2BoolData] Al igual que Unity no sab√≠a c√≥mo mostrar los objetos correctamente, ¬°tampoco sab√≠a c√≥mo serializarlos correctamente! ¬°Ambos objetos ahora son instancias de la clase base y se pierden sus datos de subclase! ","date":"17-04-2018","objectID":"/posts/2018/dev/002/:3:0","tags":["n9+","dev"],"title":"ScriptableObjects","uri":"/posts/2018/dev/002/"},{"categories":["dev"],"content":"Demo 3 Las referencias a objetos Scriptable sobreviven a la serializaci√≥n Esta vez recrearemos la Demo 1, excepto que usaremos un Objeto Scriptable para nuestros datos serializados en lugar de una clase C# est√°ndar. Crea lo siguiente: using UnityEngine; public class Demo3 : MonoBehaviour { public Demo3Data dataA; public Demo3Data dataB; } using UnityEngine; [System.Serializable] public class Demo3Data : ScriptableObject { public int value; } using UnityEngine; using UnityEditor; [CustomEditor(typeof(Demo3))] public class Demo3Inspector : Editor { public override void OnInspectorGUI() { DrawDefaultInspector (); Demo3 myTarget = (Demo3)target; if (GUILayout.Button (\"Crear Datos\")) { myTarget.dataA = ScriptableObject.CreateInstance\u003cDemo3Data\u003e (); myTarget.dataB = myTarget.dataA; } } } Crea una nueva escena y adjunta el script Demo3 a un objeto. A diferencia de Demo1, el script Demo3 no crear√° autom√°ticamente nuevas instancias del objeto Scriptable con solo mirar el script en el inspector. Para comenzar a jugar con datos, haga clic en el bot√≥n ‚ÄúCrear datos compartidos‚Äù. Ahora, ambos campos muestran el objeto de datos en si mismo. Podr√≠amos personalizar a√∫n m√°s el script del editor para que se vea similar a Demo1 si as√≠ lo desea, pero por ahora no es necesario. Para editar el valor del objeto compartido, haga doble clic en el objeto de datos en cualquier campo. La ventana del inspector se actualizar√° mostrando solo el objeto que est√° editando. Ahora, para la gran prueba, ¬øpuede esta versi√≥n sobrevivir a una recarga de ensamblaje? Contin√∫a e ingresa y luego sal del modo de reproducci√≥n. Intente editar el valor de cualquier objeto de datos. Luego regrese y abra el objeto a trav√©s del otro campo. ¬°Deber√≠a ver que la referencia se serializ√≥ correctamente, porque tendr√° el mismo valor! Unity pudo retener la referencia compartida en lugar de tener que serializar una copia completa del objeto para cada campo. ","date":"17-04-2018","objectID":"/posts/2018/dev/002/:4:0","tags":["n9+","dev"],"title":"ScriptableObjects","uri":"/posts/2018/dev/002/"},{"categories":["dev"],"content":"Objetos Scriptables en tiempo de ejecuci√≥n He mostrado los objetos de script utilizados tanto en el modo de edici√≥n como durante el modo de reproducci√≥n. Sin embargo, vale la pena se√±alar que algunos de los mayores beneficios de los objetos programables, en particular su f√°cil serializaci√≥n, no es algo que pueda utilizar en tiempo de ejecuci√≥n. A√∫n puede guardar datos, como mediante el uso de JsonUtility para convertir sus objetos programables en JSON. El resultado podr√≠a guardarse de varias maneras, por ejemplo, escribiendo el valor en PlayerPrefs o escribiendo un archivo en el disco. Desafortunadamente, es probable que termine con los mismos desaf√≠os de serializaci√≥n demostrados en mis dos primeras demos. No tendr√° una manera f√°cil de conservar referencias de objeto, ni tendr√° una manera f√°cil de volver a crear matrices de objetos polim√≥rficos. Los Objetos Scriptables son excelentes peque√±os contenedores de datos. Se pueden usar en tiempo de ejecuci√≥n o editar e incluso se pueden guardar como recursos del proyecto. Ofrecen varios beneficios que los objetos est√°ndar y las clases se pierden, como la correcta serializaci√≥n, pero no son perfectos. Creo que su interfaz podr√≠a ser m√°s intuitiva, y personalmente no me gusta la restricci√≥n de tener que heredar de ScriptableObject o de no poder usar un constructor est√°ndar. En general, vale la pena dedicarles un poco de tiempo porque pueden proporcionar algunos flujos de trabajo convenientes y pueden ayudarlo a proyectar r√°pidamente su contenido. GitHub\r. ","date":"17-04-2018","objectID":"/posts/2018/dev/002/:5:0","tags":["n9+","dev"],"title":"ScriptableObjects","uri":"/posts/2018/dev/002/"},{"categories":["dev"],"content":"Unity puede estar desperdiciando mucho rendimiento de la CPU simplemente llamando a sus funciones MonoBehaviour. Realmente no importa lo que est√©n haciendo tus scripts. Si tiene cientos o miles de ellos, hay que tener en cuenta que hay un nuevo campo de optimizaci√≥n. ","date":"10-03-2018","objectID":"/posts/2018/dev/001/:0:0","tags":["n9+","dev"],"title":"MonoBehavior de Unity","uri":"/posts/2018/dev/001/"},{"categories":["dev"],"content":"M√©todos m√°gicos Las llamadas a funciones MonoBehaviour son lentas. Estoy hablando de funciones como Update() , LateUpdate(), OnRender(), etc. Son los llamados m√©todos m√°gicos, y si estas familiarizado con los lenguajes de programaci√≥n orientados a objetos, este concepto parece llamar a un m√©todo usando mecanismo de reflexi√≥n (la reflexi√≥n habilita llamadas de m√©todos incluso si no conoce la interfaz). Las llamadas de reflexi√≥n son costosas, por lo que Unity hace todo lo posible para almacenar en cach√© cualquier operaci√≥n, por lo que el conjunto de instrucciones de la CPU necesarias para llamar a un m√©todo m√°gico cada fotograma podr√≠a ser m√≠nimo. Pero a√∫n puede ser lento, muy lento ‚Ä¶ ","date":"10-03-2018","objectID":"/posts/2018/dev/001/:1:0","tags":["n9+","dev"],"title":"MonoBehavior de Unity","uri":"/posts/2018/dev/001/"},{"categories":["dev"],"content":"¬øPor qu√© es tan lento? No voy a hablar sobre los detalles (pero si realmente quieres leer sobre los detalles, mira el final de este art√≠culo para ver los enlaces), as√≠ que imagina que Unity intenta ser lo m√°s flexible y f√°cil de usar. Hacer algo cuesta operaciones de CPU porque el motor no puede hacer suposiciones sobre su juego y necesita hacer un mont√≥n de comprobaciones para llamar a sus funciones m√°gicas en los objetos correctos, en el orden correcto, y no chocar mientras tanto. ","date":"10-03-2018","objectID":"/posts/2018/dev/001/:2:0","tags":["n9+","dev"],"title":"MonoBehavior de Unity","uri":"/posts/2018/dev/001/"},{"categories":["dev"],"content":"¬øSe puede volver m√°s r√°pido? ¬°S√≠!, ¬°Puede!, ¬øC√≥mo?, Debe asumir la responsabilidad de llamar a la funci√≥n Update() definiendo su propia funci√≥n y llam√°ndola desde un administrador. De esta forma, asumes la responsabilidad de actualizar tus objetos. ¬øCu√°nto m√°s r√°pido puede llegar a ser? Bueno, depende de la plataforma. Mostrare las medidas hechas por ‚ÄâValentin Simonov en el blog oficial de Unity: . Aqu√≠ puedes ver que la diferencia puede valer la pena. Esta es una medida de la llamada Update(), 10000 veces. ","date":"10-03-2018","objectID":"/posts/2018/dev/001/:3:0","tags":["n9+","dev"],"title":"MonoBehavior de Unity","uri":"/posts/2018/dev/001/"},{"categories":["dev"],"content":"Creando un Manager Presentar√© un simple ejemplo de un administrador llamado BoxManager que est√° administrando scripts de BoxManaged. El manager tiene dos responsabilidades: Mantener actualizada la lista de objetos administrados. Llamar a funciones de tipo update en objetos administrados cuando se llama al administrador Update(). El c√≥digo puede verse as√≠: using UnityEngine; using System.Collections; using System.Collections.Generic; public class BoxManager : MonoBehaviour { public static BoxManager Instance { get; private set; } public List\u003cBoxManaged\u003e _managedBoxes = new List\u003cBoxManaged\u003e(); void Awake() { Instance = this; } void Update() { // Actualizar los objetos aqu√≠ } public void Register(BoxManaged box) { _managedBoxes.Add(box); } public void Unregister(BoxManaged box) { _managedBoxes.Remove(box); } } Como puedes ver, es realmente simple. Antes de implementar la funci√≥n Update(), echemos un vistazo a BoxManaged.cs. using UnityEngine; public class BoxManaged : MonoBehaviour { private Vector3 _position; private Transform _transform; void OnEnable() { BoxManager.Instance.Register(this); } void OnDisable() { BoxManager.Instance.Unregister(this); } public void ManagedUpdate() { // El update que usariamos } } Se registra a s√≠ mismo cuando est√° habilitado y se anula el registro cuando est√° deshabilitado. La funci√≥n ManagedUpdate() es una funci√≥n que reemplazar√° la funci√≥n m√°gica Update(). Implementa BoxManager.Update() , por lo que podras llamar a todos los BoxManaged.ManagedUpdate() de una vez. void Update() { for (int i = 0; i \u003c _managedBoxes.Count; ++i) { _managedBoxes[i].ManagedUpdate(); } } Ahora en ManagedUpdate() puedes hacer todo lo que normalmente har√≠as en la funci√≥n Update(). No usar foreach para iteraciones. En primer lugar, porque est√° generando una peque√±a cantidad de basura de la versi√≥n de Unity de Mono. En segundo lugar, porque simplemente parece ser m√°s lento. ","date":"10-03-2018","objectID":"/posts/2018/dev/001/:4:0","tags":["n9+","dev"],"title":"MonoBehavior de Unity","uri":"/posts/2018/dev/001/"},{"categories":["dev"],"content":"¬øDeber√≠a importarme? Depende del tipo de juego que crees y de la plataforma objetivo. H√°gase una pregunta: ¬øtiene muchos objetos MonoBehaviour con llamadas a Update()? No necesariamente tiene que ser Update(), puede ser cualquier cosa que se invoque con cada fotograma. ¬°Entonces, si te diriges a m√≥viles, definitivamente vale la pena intentarlo! ¬øDirigi√©ndose a standalones? Todav√≠a es algo que puedes considerar, especialmente si est√°s planeando tener una gran cantidad de objetos. A veces puede necesitar un administrador, incluso si tiene una cantidad relativamente peque√±a de objetos. En iOS hubo un problema con la funci√≥n OnRender(). Tenerlo en 30-40 objetos podr√≠a disminuir el rendimiento del juego dos veces. ¬øLa soluci√≥n? Un administrador como el presentado anteriormente, pero en lugar de llamar a Update() deber√≠a estar llamando al c√≥digo OnRender(). Tenga en cuenta que esta es una de las muchas estrategias de optimizaci√≥n que puede usar. Sin embargo, este est√° bastante oculto, a menos que lo sepa, le ser√° dif√≠cil encontrarlo. Esa es la raz√≥n por la cual este art√≠culo ha cobrado vida. ","date":"10-03-2018","objectID":"/posts/2018/dev/001/:5:0","tags":["n9+","dev"],"title":"MonoBehavior de Unity","uri":"/posts/2018/dev/001/"},{"categories":["dev"],"content":"Referencias Ref\r. ","date":"10-03-2018","objectID":"/posts/2018/dev/001/:6:0","tags":["n9+","dev"],"title":"MonoBehavior de Unity","uri":"/posts/2018/dev/001/"},{"categories":["dev"],"content":"El uso de clases abstractas y herencia para organizar la l√≥gica de nuestras aplicaciones se puede sustituir o complementar con interfaces y m√©todos de extensi√≥n usando C#. En este art√≠culo veremos un ejemplo de ambas aproximaciones as√≠ como sus ventajas e inconvenientes. Clases Abstractas Las clases abstractas nos permiten tener una clase base con cierta funcionalidad com√∫n ya implementada, sobre la que podemos heredar y especificar algunos m√©todos. Para este ejemplo, la clase Transporte implementa el m√©todo Mover, y las clases Coche y Bicicleta especifican el n√∫mero de ruedas. public abstract class Transporte { public sealed void Mover() { Console.WriteLine(\"Moviendo {0} ruedas\", Ruedas); } public abstract int Ruedas { get; } } public class Coche : Transporte { public override int Ruedas { get { return 4; } } } public class Bicicleta : Transporte { public override int Ruedas { get { return 2; } } } En el caso de que el** m√©todo no pudiera ser implementado por clases hijas, debemos usar el indicador sealed** como se muestra. De esta manera las clases hijas no podr√°n sobrescribir esta funcionalidad. Lo que tenemos aqu√≠ es un sistema ‚ÄúES-UN‚Äù, es decir, una bicicleta es un transporte, y un coche es un transporte. Esta relaci√≥n se basa en la herencia, y solo se permite heredar de una √∫nica clase en C#. El hecho de poder heredar de solamente una clase nos puede generar acoplamiento y la necesidad de otro tipo de alternativas cuando la √∫nica opci√≥n que tenemos es heredar de una clase espec√≠fica. Una alternativa al uso de clases abstractas viene dado por las interfaces y los m√©todos de extensi√≥n: Interfaces A diferencia de las clases abstractas, una interfaz por s√≠ sola no aporta funcionalidad, sino que fija un contrato que pueden implementar de manera distinta otras clases. Por otra parte, un m√©todo de extensi√≥n nos permite agregar funcionalidad a una clase, y es en lo que se basan componentes como Linq. Si combinamos ambas caracter√≠sticas, podemos obtener un comportamiento similar como se muestra a continuaci√≥n: static class ITRansporteExtensions { public static void Mover(this ITransporte transporte) { Console.WriteLine(\"Moviendo {0} ruedas\", transporte.Ruedas); } } public interface ITransporte { public abstract int Ruedas { get; } } public class Coche : ITransporte { public override int Ruedas { get { return 4; } } } public class Bicicleta : ITransporte { public override int Ruedas { get { return 2; } } } Cuando combinamos una interfaz con un m√©todo de extensi√≥n, dotamos de m√©todos a clases e interfaces que originalmente no ten√≠an. Como ventaja adicional est√° el hecho de que podemos implementar varias interfaces al mismo tiempo, con lo cual podr√≠amos acceder a los m√©todos de extensi√≥n de todos ellos. La desventaja de usar m√©todos de extensi√≥n es que como no estamos accediendo a los campos internos de la clase, solamente vamos a tener acceso a la interfaz que se defina para nosotros. Conclusiones Ambas caracter√≠sticas nos permiten llegar a un resultado com√∫n, si bien el uso de clases abstractas nos permite un diagrama de herencia mas claro, en ocasiones podemos optar a una alternativa m√°s abierta. Los m√©todos extensores no son mas que, como dicen los anglosajones ‚Äúsyntactic sugar‚Äù, es decir, una manera mas c√≥moda de llamara a un m√©todo est√°tico que procesa una interfaz. . ","date":"16-02-2018","objectID":"/posts/2017/dev/025/:0:0","tags":["n9+","dev"],"title":"Clase Abstracta VS Interfaces","uri":"/posts/2017/dev/025/"},{"categories":["comun"],"content":"Empezamos el a√±o con nuevas noticias De primeras, feliz a√±o 2018 a los lectores, ^^. Quer√≠a traer estas noticias a principios de a√±o, asi que aqu√≠ las dejo. Unity dejara de dar soporte para MonoDevelop-Unity a partir de la Unity 2018.1, esto quiere decir que en Unity 2018.1 no vendr√° con el IDE de MonoDevelop, ya que no admite muchas de las caracter√≠sticas a las que esta migrando Unity con .NET 6.0 C#. ","date":"09-01-2018","objectID":"/posts/2017/comun/024/:0:0","tags":["n9+","comun"],"title":"Feliz 2018 y nuevas noticias con el","uri":"/posts/2017/comun/024/"},{"categories":["comun"],"content":"Pero entonces ¬øQue IDE coger√° Unity? Unity ha dado estas dos opciones: Eliminaci√≥n de MonoDevelop-Unity 5.9.6 del instalador de Unity 2018.1 en macOS, Windows y ya no es compatible con el desarrollo de Unity a partir de Unity 2018.1. Incluyendo Visual Studio para Mac como el √∫nico IDE de C # en macOS en Unity 2018.1. En Windows continuara incluyendo Visual Studio 2017 Community y ya no incluiremos MonoDevelop-Unity como alternativa. ","date":"09-01-2018","objectID":"/posts/2017/comun/024/:0:1","tags":["n9+","comun"],"title":"Feliz 2018 y nuevas noticias con el","uri":"/posts/2017/comun/024/"},{"categories":["comun"],"content":"C# IDE Alternativas Visual Studio Code (Windows, macOS, Linux) Unity admite la apertura en scripts en Visual Studio Code cuando se selecciona como un editor de scripts externo en las preferencias. (Con algunas extensiones necesarias) JetBrains Rider (Windows, macOS, Linux) Unity admite la apertura en scripts en JetBrains Rider cuando se selecciona como un editor de scripts externo en las preferencias. Bueno, era algo ya deseado por la comunidad, que quitaran MonoDevelop, que aunque sea un buen IDE, no puede competir con otros IDEs. Aun encima han visto que el 80% de los desarrolladores de Unity3D usan VS como IDE favorito, por ello y por problemas con la compatibilidad del antiguo IDE, han optado por cambiarlo. . ","date":"09-01-2018","objectID":"/posts/2017/comun/024/:0:2","tags":["n9+","comun"],"title":"Feliz 2018 y nuevas noticias con el","uri":"/posts/2017/comun/024/"},{"categories":["comun"],"content":"C√≥mo escribir una buena sinopsis El primer factor en la compra de una novela o juego es el g√©nero. El segundo es el nombre de su autor o compa√±√≠a. El tercero es la sinopsis. ¬øc√≥mo escribir sinopsis atractivas y que cumplan el objetivo de vender? Vamos a intentar explicarlo en 9 pasos. Paso 1 S√© breve Una buena sinopsis no deber√≠a tener m√°s de doscientas cincuenta palabras, as√≠ que es importante que conozcas los puntos principales de tu historia, aquellos que llevan el peso de la acci√≥n y, por lo tanto, la hacen atractiva para poder present√°rsela a los usuarios de forma concisa. Paso 2 C√©ntrate en la trama principal de tu historia Est√° muy relacionado con el punto anterior. Si empiezas a hablar de tramas secundarias, tu sinopsis ser√° muy larga. C√©ntrate en lo verdaderamente importante de tu narraci√≥n: personaje principal + trama principal. Paso 3 Muestra claramente el conflicto principal de tu historia El conflicto es la cuesti√≥n a resolver en tu historia, el enfrentamiento entre protagonista y antagonista; cuanto m√°s interesante sea este, m√°s atrapar√°s al usuario. Debes mostrarlo en la sinopsis precisamente para enganchar al jugador; provocarle inter√©s por saber qu√© est√° ocurriendo en ese libro. Paso 4 Empieza con una frase impactante Olv√≠date de empezar de este modo: ‚ÄúA√±o 1095, el Papa Urbano env√≠a la petici√≥n de iniciar la guerra santa.‚Äù As√≠ creas el marco, s√≠, pero no enganchas al usuario. F√≠jate en la diferencia: ‚ÄúAlfonso es obligado a ver c√≥mo unos soldados sarracenos saquean su casa y fuerzan a su mujer. Tras lograr sobrevivir de forma milagrosa, decide unirse a la Primera Cruzada‚Äù. Has establecido el marco, pero has planteado una situaci√≥n interesante, algo que puede enlazar al usuario con el personaje. Una regla de oro: La sinopsis debe enganchar desde la primera frase. Paso 5 Evita perderte en generalidades Muestra puntos clave de tu trama. Presenta el personaje principal en situaciones dif√≠ciles. ¬°Pero ten cuidado de no desvelar m√°s de la cuenta! En una sinopsis est√°n terminantemente prohibidos los spoilers. Paso 6 Apela a los sentimientos El fin de toda historia es crear emociones en el usuario. Ese trabajo debe empezar en la sinopsis. Consigue que el usuario sufra, o se enamore, o se indigne, o cualquier otra cosa, desde la sinopsis. Paso 7 Usa un lenguaje directo En la sinopsis no tienes que enamorar al usuario con recursos literarios. Tienes que enamorarlo de la historia. Cuanto m√°s directo seas, mejor llegar√° el mensaje al jugador. Paso 8 No olvides el objetivo de la sinopsis Lo que pretendes con la sinopsis es que el usuario quiera leer m√°s. No cuentes toda tu historia en la sinopsis. Lo que quieres hacer en ella es abrir expectativas para que el usuario desee leer la historia o vivirla. Por tanto, plantea cuestiones a resolver, (no tiene por qu√© ser directamente por medio de preguntas), pero no ofrezcas las respuestas. Paso 9 Reescribe Como con cualquier otra cosa que escribas, la primera versi√≥n no ser√° la definitiva. Lee y edita varias veces tu sinopsis; ac√©rcate a ella con ojo cr√≠tico. Plant√©ate si t√∫ jugar√≠as esa historia tras leerla y, cuando est√©s satisfecho, p√°sasela a gente de confianza, alguien que tenga buen criterio y pueda ser cr√≠tico con ella para resaltar los puntos fuertes y poner en evidencia los puntos d√©biles. - Ejemplo de sinopsis - He robado princesas a reyes ag√≥nicos. Incendi√© la ciudad de Trebon. He pasado la noche con Felurian y he despertado vivo y cuerdo. Me expulsaron de la Universidad a una edad a la que a la mayor√≠a todav√≠a no los dejan entrar. He recorrido de noche caminos de los que otros no se atreven a hablar ni siquiera de d√≠a. He hablado con dioses, he amado a mujeres y escrito canciones que hacen llorar a los bardos. ¬´Me llamo Kvothe. Quiz√°s hayas o√≠do hablar de m√≠¬ª. ‚ÄâPatrick Rothfuss, El nombre del viento. . ","date":"15-11-2017","objectID":"/posts/2017/comun/023/:0:0","tags":["n9+","comun"],"title":"C√≥mo escribir una buena sinopsis y para que","uri":"/posts/2017/comun/023/"},{"categories":["dev"],"content":"Los programadores principiantes generalmente comienzan a aprender el oficio con el Hello World. A partir de ah√≠, sin un patr√≥n de dise√±o, se suele aumentar sin ninguna metodolog√≠a los proyectos y terminan siendo un caos. Cada nuevo desaf√≠o lleva a casa una lecci√≥n importante: Cuanto m√°s grande es el proyecto, m√°s grande es el espagueti. Snake Es f√°cil ver que en equipos grandes o peque√±os, uno no puede hacer imprudentemente lo que le plazca. El c√≥digo debe mantenerse y puede durar mucho tiempo. Las empresas para las que ha trabajado no pueden simplemente buscar su informaci√≥n de contacto y preguntarle cada vez que quieren corregir o mejorar la base de c√≥digo (y tampoco desean que lo hagan). Es por eso que existen patrones de dise√±o de software, imponen reglas simples para dictar la estructura general de un proyecto de software. Ayudan a uno o m√°s programadores a separar las piezas principales de un proyecto grande y organizarlas de manera estandarizada, eliminando la confusi√≥n cuando se encuentra una parte desconocida de la base de c√≥digo. . Estas reglas, cuando son seguidas por todos, permiten que el c√≥digo heredado se mantenga y navegue mejor y que el c√≥digo nuevo se agregue m√°s r√°pidamente. Se gasta menos tiempo planificando la metodolog√≠a de desarrollo. Uno debe considerar cuidadosamente los puntos fuertes y d√©biles de cada patr√≥n, y encontrar la mejor opci√≥n para el desaf√≠o en cuesti√≥n. Relatar√© mi experiencia con el desarrollo de juegos Unity y el patr√≥n Model-View-Controller (MVC) para el desarrollo de juegos. En mis siete a√±os de desarrollo, habiendo luchado con mi parte justa de espagueti de desarrollo de juegos, he logrado una gran estructura de c√≥digo y velocidad de desarrollo usando este patr√≥n de dise√±o. Empezar√© explicando un poco de la arquitectura base de Unity, el patr√≥n Entity-Component. Luego continuar√© explicando c√≥mo se ajusta MVC en la capa superior de la misma, y ‚Äã‚Äãusar√© un peque√±o proyecto simulado como ejemplo. Motivaci√≥n En la literatura del software encontraremos una gran cantidad de patrones de dise√±o. A pesar de que tienen un conjunto de reglas, los desarrolladores usualmente har√°n un poco de flexi√≥n de reglas para adaptar mejor el patr√≥n a su problema espec√≠fico. Esta ‚Äúlibertad de programaci√≥n‚Äù es una prueba de que a√∫n no hemos encontrado un m√©todo √∫nico y definitivo para dise√±ar software. Por lo tanto, este art√≠culo no pretende ser la soluci√≥n definitiva para su problema, sino m√°s bien, para mostrar los beneficios y las posibilidades de dos patrones bien conocidos: Entity-Component y Model-View-Controller. El patr√≥n de Entity-Component(Entidad-Componente) Entity-Component (EC) es un patr√≥n de dise√±o donde primero definimos la jerarqu√≠a de los elementos que componen la aplicaci√≥n (Entidades), y luego, definimos las caracter√≠sticas y los datos que cada uno contendr√° (Componentes). En t√©rminos m√°s de ‚Äúprogramadores‚Äù, una entidad puede ser un objeto con una matriz de 0 o m√°s componentes. Vamos a representar una entidad como esta: Aqu√≠ hay un ejemplo simple de un √°rbol EC. - app [Aplicacion] - game [Game] - player [KeyboardInput, Renderer] - enemigos - ara√±a [Ara√±aAI, Renderer] - ogro [OgreAI, Renderer] - ui [UI] - hud [HUD, MouseInput, Renderer] - pause-menu [PauseMenu, MouseInput, Renderer] - victory-modal [VictoryModal, MouseInput, Renderer] - defeat-modal [DefeatModal, MouseInput, Renderer] EC es un buen patr√≥n para aliviar los problemas de herencia m√∫ltiple, donde una estructura de clase compleja puede introducir problemas como el problema de diamante donde una clase D, heredando dos clases, B y C, con la misma clase base A, puede introducir conflictos porque B y C modifican las caracter√≠sticas de A de manera diferente. . Este tipo de problemas pueden ser comunes en el desarrollo de juegos donde la herencia se usa a menudo extensivamente. Al desglosar las caracter√≠sticas y los manejadores de datos en componentes m√°s peque√±os, se pueden adjuntar y reutilizar en diferentes entidades sin depender de","date":"07-11-2017","objectID":"/posts/2017/dev/014/:0:0","tags":["n9+","dev"],"title":"MVC simplificado","uri":"/posts/2017/dev/014/"},{"categories":["dev"],"content":"Donde el componente de la entidad se queda corto Viendo un nivel por encima de POO, EC ayuda a desfragmentar y organizar mejor la arquitectura de su c√≥digo. Sin embargo, en proyectos grandes todav√≠a somos ‚Äúdemasiado libres‚Äù y podemos encontrarnos en un ‚Äúoc√©ano de caracter√≠sticas‚Äù, teniendo dificultades para encontrar las Entidades y Componentes correctos, o averiguando c√≥mo deben interactuar. Hay infinitas formas de ensamblar entidades y componentes para una tarea determinada. . Una forma de evitar un desastre es imponer algunas pautas adicionales sobre Entity-Component. Por ejemplo, una forma en que me gusta pensar sobre el software es dividirlo en tres categor√≠as diferentes: Algunos manejan los datos brutos, lo que permite su creaci√≥n, lectura, actualizaci√≥n, eliminaci√≥n o b√∫squeda (es decir, el concepto CRUD ). Otros implementan la interfaz para que interact√∫en otros elementos, detectando eventos relacionados con su alcance y disparando notificaciones cuando ocurren. Finalmente, algunos elementos son responsables de recibir estas notificaciones, tomar decisiones de l√≥gica y decidir c√≥mo se deben manipular los datos. Afortunadamente, ya tenemos un patr√≥n que se comporta de esta manera exacta. El patr√≥n Model-View-Controller (Modelo-Vista-Controlador) (MVC) El patr√≥n Model-View-Controller (MVC) divide el software en tres componentes principales: Modelos (CRUD de datos), Vistas (Interfaz / Detecci√≥n) y Controladores (Decisi√≥n / Acci√≥n). MVC es lo suficientemente flexible como para implementarse incluso en ECS o POO. El desarrollo del juego y la interfaz de usuario tiene el flujo de trabajo habitual de esperar la entrada de un usuario u otra condici√≥n desencadenante, el env√≠o de notificaciones de esos eventos en alg√∫n lugar, decidir qu√© hacer en respuesta y actualizar los datos en consecuencia. Estas acciones muestran claramente la compatibilidad de estas aplicaciones con MVC. Esta metodolog√≠a introduce otra capa de abstracci√≥n que ayudar√° con la planificaci√≥n del software, y tambi√©n permitir√° a los nuevos programadores navegar incluso en una base de c√≥digo m√°s grande. Al dividir el proceso de pensamiento en datos, interfaz y decisiones, los desarrolladores pueden reducir el n√∫mero de archivos fuente que se deben buscar para agregar o corregir la funcionalidad. ","date":"07-11-2017","objectID":"/posts/2017/dev/014/:0:1","tags":["n9+","dev"],"title":"MVC simplificado","uri":"/posts/2017/dev/014/"},{"categories":["dev"],"content":"Unity y EC Primero veamos de cerca lo que Unity nos da por adelantado. Unity es una plataforma de desarrollo basada en CE, donde todas las entidades son instancias GameObject y las caracter√≠sticas que las hacen ser ‚Äúvisibles‚Äù, ‚Äúmovibles‚Äù, ‚Äúinteractivas‚Äù, etc., son proporcionadas por las clases que se extienden \u003cComponent\u003e. El panel de jerarqu√≠a y el panel Inspector del editor de Unity proporcionan una forma poderosa de ensamblar su aplicaci√≥n, adjuntar componentes, configurar su estado inicial y arrancar su juego con mucho menos c√≥digo fuente de lo que lo har√≠a normalmente. A√∫n as√≠, como hemos discutido, podemos abordar el problema de las ‚Äúdemasiadas caracter√≠sticas‚Äù y nos encontramos en una jerarqu√≠a gigantesca, con caracter√≠sticas diseminadas por todas partes, lo que hace que la vida de un desarrollador sea mucho m√°s dif√≠cil. Pensando de la manera MVC, podemos, en cambio, comenzar dividiendo las cosas seg√∫n su funci√≥n, estructurando nuestra aplicaci√≥n. ","date":"07-11-2017","objectID":"/posts/2017/dev/014/:0:2","tags":["n9+","dev"],"title":"MVC simplificado","uri":"/posts/2017/dev/014/"},{"categories":["dev"],"content":"Adaptaci√≥n de MVC a un entorno de desarrollo de juegos Ahora, me gustar√≠a introducir dos peque√±as modificaciones en el patr√≥n MVC gen√©rico, que ayudan a adaptarlo a las situaciones √∫nicas en las que me he encontrado construyendo proyectos de Unity con MVC: 1- Las referencias de la clase MVC se dispersan f√°cilmente por todo el c√≥digo. Dentro de Unity, los desarrolladores generalmente deben arrastrar y soltar instancias para hacer que sean accesibles, o bien llegar a ellos a trav√©s de sentencias como find, GetComponent( ‚Ä¶ ). El infierno de referencia perdida se producir√° si la Unidad se bloquea o alg√∫n error hace desaparecer todas las referencias arrastradas. Esto hace que sea necesario tener un √∫nico objeto de referencia ra√≠z, a trav√©s del cual se puede llegar y recuperar a todas las instancias en la Aplicaci√≥n . 2- Algunos elementos encapsulan funcionalidades generales que deber√≠an ser altamente reutilizables, y que naturalmente no entran en una de las tres categor√≠as principales de Modelo, Vista o Controlador. A estos me gusta llamarlos simplemente Componentes . Tambi√©n son ‚ÄúComponentes‚Äù en el sentido Entidad-Componente, pero simplemente act√∫an como ayudantes en el marco MVC. Por ejemplo, un Rotator Componente, que solo rota cosas con una velocidad angular determinada y no notifica, almacena ni decide nada. Para ayudar a aliviar estos dos problemas, se me ocurri√≥ un patr√≥n modificado que llamo AMVCC , o Application-Model-View-Controller-Component. . Aplicaci√≥n : punto de entrada √∫nico para su aplicaci√≥n y contenedor de todas las instancias cr√≠ticas y datos relacionados con la aplicaci√≥n. MVC : ya deber√≠as saber esto. :) Componente : scripts peque√±os y bien contenidos que pueden reutilizarse. Estas dos modificaciones han satisfecho mis necesidades para todos los proyectos en los que los he usado. ","date":"07-11-2017","objectID":"/posts/2017/dev/014/:0:3","tags":["n9+","dev"],"title":"MVC simplificado","uri":"/posts/2017/dev/014/"},{"categories":["dev"],"content":"Ejemplo: 10 Bounces Como un simple ejemplo, veamos un peque√±o juego llamado 10 Bounces , donde usar√© los elementos centrales del patr√≥n AMVCC. La configuraci√≥n del juego es simple: Un Ball con un SphereCollider y un Rigidbody(que comenzar√° a caer despu√©s de ‚ÄúJugar‚Äù), un Cube como suelo y 5 scripts para componer el AMVCC. ","date":"07-11-2017","objectID":"/posts/2017/dev/014/:1:0","tags":["n9+","dev"],"title":"MVC simplificado","uri":"/posts/2017/dev/014/"},{"categories":["dev"],"content":"Jerarqu√≠a Antes de crear scripts, generalmente comienzo en la jerarqu√≠a y creo un esquema de mi clase y mis recursos. Siempre siguiendo este nuevo estilo AMVCC. . Como podemos ver, view GameObject contiene todos los elementos visuales y tambi√©n los que tienen otros View scripts. El model y controller GameObjects, para proyectos peque√±os, por lo general contienen solo sus respectivos scripts. Para proyectos m√°s grandes, contendr√°n GameObjects con scripts m√°s espec√≠ficos. Cuando alguien que navega por tu proyecto quiere acceder: Datos: ir a application \u003e model \u003e ‚Ä¶ L√≥gica/Workflow: ir a application \u003e controller \u003e ‚Ä¶ Representaci√≥n/Interfaz/Detecci√≥n: ir a application \u003e view \u003e ‚Ä¶ Si todos los equipos siguen estas simples reglas, los proyectos heredados no deber√≠an convertirse en un problema. Tenga en cuenta que no hay componentes contenedores, como ya hemos comentado, son m√°s flexibles y se pueden unir a diferentes elementos en el ocio del desarrollador. ","date":"07-11-2017","objectID":"/posts/2017/dev/014/:1:1","tags":["n9+","dev"],"title":"MVC simplificado","uri":"/posts/2017/dev/014/"},{"categories":["dev"],"content":"Scripting Nota Los scripts que se muestran a continuaci√≥n son versiones abstractas de implementaciones del mundo real. Una implementaci√≥n detallada no beneficiar√≠a mucho al lector. Echemos un vistazo a la estructura de los scripts para el ejemplo. Antes de comenzar, para aquellos que no est√©n familiarizados con el flujo de trabajo de Unity, aclaremos brevemente c√≥mo funcionan los scripts y GameObjects juntos. En Unity, los ‚ÄúComponentes‚Äù, en el sentido Entidad-Componente, est√°n representados por la clase MonoBehaviour. Para que uno exista durante el tiempo de ejecuci√≥n, el desarrollador debe arrastrar y soltar su archivo fuente en un GameObject (que es la ‚ÄúEntidad‚Äù del patr√≥n Entidad-Componente) o usar el comando AddComponent\u003cTuMonobehaviour\u003e(). Despu√©s de esto, el script ser√° instanciado y listo para usar durante la ejecuci√≥n. Para comenzar, definimos la clase de aplicaci√≥n (la ‚ÄúA‚Äù en AMVCC), que ser√° la clase principal que contiene referencias a todos los elementos del juego instanciados. Tambi√©n crearemos una clase base auxiliar llamada Element, que nos da acceso a la instancia de la Aplicaci√≥n y a sus instancias MVC hijos. Con esto en mente, definamos la clase Application (la ‚ÄúA‚Äù en AMVCC), que tendr√° una instancia √∫nica. En su interior, tres variables, model, view, y controller, nos dar√°n puntos de acceso para todas las instancias de MVC en tiempo de ejecuci√≥n. Estas variables deben ser MonoBehaviours con public referencias a los scripts deseados. Luego, tambi√©n crearemos una clase base auxiliar llamada Element, que nos da acceso a la instancia de la Aplicaci√≥n. Este acceso permitir√° que cada clase MVC llegue a todos los dem√°s. Tenga en cuenta que ambas clases extienden MonoBehaviour. Son ‚ÄúComponentes‚Äù que se adjuntar√°n a ‚ÄúEntidades‚Äù de GameObject. // BounceApplication.cs // Clase base para todos los elementos en esta aplicaci√≥n. public class BounceElement : MonoBehaviour { // Da acceso a la aplicaci√≥n y a todas las instancias. public BounceApplication app { get { return GameObject.FindObjectOfType\u003cBounceApplication\u003e(); }} } // 10 Bounces Punto de Entrada. public class BounceApplication : MonoBehaviour { // Referencia a las instancias de ra√≠z del MVC. public BounceModel model; public BounceView view; public BounceController controller; // Init void Start() { } } Desde BounceElement podemos crear las clases principales de MVC. Las BounceModel, BounceView y BounceController, los scripts suelen actuar como contenedores para los casos m√°s especializados, pero ya que este es un ejemplo sencillo s√≥lo la vista tendr√° una estructura anidada. El Modelo y el Controlador se pueden hacer en un script para cada uno: // BounceModel.cs // Contiene todos los datos relacionados con la aplicaci√≥n. public class BounceModel : BounceElement { // Data public int bounces; public int winCondition; } // BounceView .cs // Contiene todas las vistas relacionadas con la aplicaci√≥n. public class BounceView : BounceElement { // Referencia a la pelota public BallView ball; } // BallView.cs // Describe la vista Bola y sus caracter√≠sticas. public class BallView : BounceElement { // Solo esto es necesario. La f√≠sica hace el resto del trabajo. // Callback colision void OnCollisionEnter() { app.controller.OnBallGroundHit(); } } // BounceController.cs // Controla el flujo de trabajo de la aplicaci√≥n. public class BounceController : BounceElement { // Handles el evento de pelota golpeada public void OnBallGroundHit() { app.model.bounces++; Debug.Log(‚ÄúBounce ‚Äù + app.model.bounce); if(app.model.bounces \u003e= app.model.winCondition) { app.view.ball.enabled = false; app.view.ball.GetComponent\u003cRigidBody\u003e().isKinematic=true; // stops the ball OnGameComplete(); } } // Handles la condici√≥n de victoria public void OnGameComplete() { Debug.Log(‚ÄúVictoria!!‚Äù); } } Con todos los scripts creados, podemos proceder a adjuntarlos y configurarlos. El dise√±o de la jerarqu√≠a deber√≠a ser as√≠: - application [BounceApplication]\r- model [BounceModel]\r- controller [BounceController]\r- vie","date":"07-11-2017","objectID":"/posts/2017/dev/014/:1:2","tags":["n9+","dev"],"title":"MVC simplificado","uri":"/posts/2017/dev/014/"},{"categories":["dev"],"content":"Notificaciones Como se muestra en el ejemplo anterior, cuando la pelota toca el suelo se ejecuta su vista, app.controller.OnBallGroundHit() que es un m√©todo. No es, de ninguna manera, ‚Äúincorrecto‚Äù hacer eso para todas las notificaciones en la aplicaci√≥n. Sin embargo, en mi experiencia, he logrado mejores resultados utilizando un sistema de notificaci√≥n simple implementado en la clase de aplicaci√≥n AMVCC. Para implementar eso, actualicemos el dise√±o del BounceApplication: // BounceApplication.cs class BounceApplication { // Itera todos los Controladores y delega los datos de notificaci√≥n // Este m√©todo se puede encontrar f√°cilmente porque cada clase es \"BounceElement\" y // tiene una instancia de \"aplicaci√≥n\". public void Notify(string p_event_path, Object p_target, params object[] p_data) { BounceController[] controller_list = GetAllControllers(); foreach(BounceController c in controller_list) { c.OnNotification(p_event_path,p_target,p_data); } } // Obtiene todos los controladores de escena. public BounceController[] GetAllControllers() { /* ... */ } } A continuaci√≥n, necesitamos un nuevo script donde todos los desarrolladores agregar√°n los nombres del evento de notificaci√≥n, que se pueden enviar durante la ejecuci√≥n. // BounceNotifications.cs // Esta clase dar√° acceso est√°tico a las cadenas de eventos. class BounceNotification { static public string BallHitGround = ‚Äúball.hit.ground‚Äù; static public string GameComplete = ‚Äúgame.complete‚Äù; /* ... */ static public string GameStart = ‚Äúgame.start‚Äù; static public string SceneLoad = ‚Äúscene.load‚Äù; /* ... */ } Es f√°cil ver que, de esta forma, se mejora la legibilidad del c√≥digo porque los desarrolladores no necesitan buscar en todo el c√≥digo fuente los m√©todos controller.OnSomethingComplexName para comprender qu√© tipo de acciones pueden ocurrir durante la ejecuci√≥n. Al solo verificar un archivo, es posible comprender el comportamiento general de la aplicaci√≥n. Ahora, solo tenemos que adaptar el BallView y BounceController para manejar este nuevo sistema. // BallView.cs public class BallView : BounceElement { void OnCollisionEnter() { app.Notify(BounceNotification.BallHitGround,this); } } // BounceController.cs public class BounceController : BounceElement { public void OnNotification(string p_event_path,Object p_target,params object[] p_data) { switch(p_event_path) { case BounceNotification.BallHitGround: app.model.bounces++; Debug.Log(‚ÄúBounce ‚Äù+app.model.bounce); if(app.model.bounces \u003e= app.model.winCondition) { app.view.ball.enabled = false; app.view.ball.GetComponent\u003cRigidBody\u003e().isKinematic=true; app.Notify(BounceNotification.GameComplete,this); } break; case BounceNotification.GameComplete: Debug.Log(‚ÄúVictoria!!‚Äù); break; } } } Los proyectos m√°s grandes tendr√°n muchas notificaciones. Por lo tanto, para evitar tener una gran estructura de switch-case, es aconsejable crear diferentes controladores y hacer que manejen diferentes √°mbitos de notificaci√≥n. ","date":"07-11-2017","objectID":"/posts/2017/dev/014/:1:3","tags":["n9+","dev"],"title":"MVC simplificado","uri":"/posts/2017/dev/014/"},{"categories":["dev"],"content":"Reglas de oro No hay ninguna ‚ÄúGu√≠a universal para la clasificaci√≥n de MVC‚Äù en ninguna parte. Pero hay algunas reglas simples que normalmente sigo para ayudarme a determinar si se debe definir algo como Modelo, Vista o Controlador, y tambi√©n cu√°ndo dividir una clase determinada en partes m√°s peque√±as. Por lo general, esto sucede de forma org√°nica mientras pienso en la arquitectura del software o durante la creaci√≥n de scripts. y vuelvo a decir, es mi opinion, no algo universal. ","date":"07-11-2017","objectID":"/posts/2017/dev/014/:2:0","tags":["n9+","dev"],"title":"MVC simplificado","uri":"/posts/2017/dev/014/"},{"categories":["dev"],"content":"Clasificaci√≥n de clase Modelos Mantenga los datos b√°sicos y el estado de la aplicaci√≥n, como jugador vida arma ‚Ä¶ Serializar, deserializar y/o convertir entre tipos. Cargar/guardar datos (localmente o en la web). Notificar a los controladores el progreso de las operaciones. Almacene el estado del juego para la m√°quina de estados finitos del juego. Nunca acceda a Vistas. Vista Puede obtener datos de los Modelos para representar el estado del juego actualizado para el usuario. Por ejemplo, un m√©todo de Vista player.Run()puede usar internamente model.speed para manifestar las habilidades del jugador. Nunca deber√≠a mutilar los modelos. Implementa estrictamente las funcionalidades de su clase. Controladores No almacene datos b√°sicos. A veces puede filtrar las notificaciones de Vistas no deseadas. Actualice y use los datos del Modelo. Gestiona el flujo de trabajo de escena de Unity. Conclusi√≥n Hay toneladas de patrones de software por ah√≠. En este post intent√© mostrar el que m√°s me ayud√≥ en proyectos anteriores. Los desarrolladores siempre deben absorber el conocimiento nuevo, pero siempre deberan cuestionarlo tambi√©n. Espero que sirva como un trampol√≠n a medida que desarrolles tu propio estilo. Adem√°s, realmente te animo a buscar otros patrones y encontrar el que m√°s te convenga. Un buen punto de partida es [este art√≠culo de Wikipedia][1] , con su excelente lista de patrones y sus caracter√≠sticas. Habilidad Especial Dsbloqueada Juegos de Unity con el patr√≥n MVC. GitHub\r. ","date":"07-11-2017","objectID":"/posts/2017/dev/014/:3:0","tags":["n9+","dev"],"title":"MVC simplificado","uri":"/posts/2017/dev/014/"},{"categories":["comun"],"content":"En 2008 un ciudadano de jap√≥n, que se hacia llamar ‚ÄúSatoshi Nakamoto‚Äù , comparti√≥ una idea que llamo la atenci√≥n de todos los usuarios. Satoshi propuso una idea para crear una moneda digital. Una moneda basada en bits. En la actualidad, cada persona necesita ingresar un dinero en una entidad bancaria, un dinero f√≠sico, el cual es depositado digitalmente en nuestra cuenta. Por ese motivo dependemos de los bancos 100%, otro caso es la privacidad y la inflaci√≥n, son problemas que actualmente tenemos en la sociedad actual con el sistema monetario. Pero la moneda digital soluciona estos problemas, al desvincularse de cualquier entidad bancaria o gubernamental. Las transacciones son totalmente an√≥nimas y no hay necesidad de contactar con una entidad externa. Satoshi creo el software y al poco desapareci√≥ creando el ¬†bitcoin. A dia de hoy es un misterio, su nombre real o su paradero. ","date":"24-10-2017","objectID":"/posts/2017/comun/022/:0:0","tags":["n9+","comun"],"title":"Criptomonedas","uri":"/posts/2017/comun/022/"},{"categories":["comun"],"content":"¬øComo funciona? El sistema bitcoin funciona con Peer To Peer(P2P), como el sistema de torrent, los datos van de una persona a otra. Hay un libro maestro donde se registran todas las transacciones de todo el mundo, siendo todas ellas anonimas. Este libro maestro se conoce como Blockchain o Cadena de bloques. Para ver el blockchain de hoy, mira aqu√≠. El blockchain es una secuencia de datos encadenados, cada bloque hace referencia al anterior y la gran ventaja es que se encuentra distribuido a nivel global. Seguro y publico. Las personas son las encargadas de incorporar todos los datos (transacciones) al registro global (bloques). Estas personas se conocen como mineros. Transacci√≥n. Antonio env√≠a dinero a Juan. El minero realiza la transacci√≥n incorpor√°ndola al bloque. Juan recibe el dinero de Antonio. Cada bloque puede albergar 2000 transacciones aproximadamente. ","date":"24-10-2017","objectID":"/posts/2017/comun/022/:1:0","tags":["n9+","comun"],"title":"Criptomonedas","uri":"/posts/2017/comun/022/"},{"categories":["comun"],"content":"Reglas El sistema esta basado en una serie de reglas. Los bloques est√°n en formato texto. Cada bloque tiene 1MB aprox de tama√±o. Cada 10 minutos se generara un bloque nuevo. El minero que genere el bloque, recibida una recompensa. El minero deber√° enviar el bloque a los dem√°s mineros y ser aprobado por mayor√≠a. De cada bloque se generara un Hash. ","date":"24-10-2017","objectID":"/posts/2017/comun/022/:2:0","tags":["n9+","comun"],"title":"Criptomonedas","uri":"/posts/2017/comun/022/"},{"categories":["comun"],"content":"Seguridad Una transacci√≥n falsa o malintencionada no podr√° hacerse, ya que al necesitar el bloque la autorizaci√≥n mayoritaria del grupo de mineros (Cada uno separados sin saber quienes son los dem√°s), la transacci√≥n seria rechazada. Teniendo la mayor√≠a de mineros del grupo en poder, se podr√≠a saltar esa barrera, pero satoshi pens√≥ en eso, y hizo que las transacciones llevaran un hash que empezara con unos ceros espec√≠ficos. Ese numero determinado es cambiado cada 2016 bloques. Esto hace dificilisimo obtener un hash valido, sin hacer millones de c√°lculos y sin tener bastante tiempo para esos c√°lculos. Aun asi, cada 10 minutos se cambia el hash, por el hecho de que estad√≠sticamente la dificultad para obtener un hash en menos tiempo es mucha. Todas las transacciones son an√≥nimas, solo se sabe que un dinero a entrado en alg√∫n sitio, nada mas. Conclusiones El sistema de moneda digital, al principio es fiable y viable, esta estable actualmente, pero no se sabe en el futuro lo que pueda pasar. El problema que tiene actualmente, es la falta de inversi√≥n por parte de mineros, que dependiendo de tu zona es mucho mas barato generar ¬†bitcoins que en otros. . ","date":"24-10-2017","objectID":"/posts/2017/comun/022/:3:0","tags":["n9+","comun"],"title":"Criptomonedas","uri":"/posts/2017/comun/022/"},{"categories":["comun"],"content":"Estoy seguro de que si te dedicas a programar, conoces a Robert ‚ÄúUncle‚Äù Martin. Su libro Clean Code es uno de los m√°s recomendados en la lista de libros que todo desarrollador deber√≠a leer. Martin, con sus cosas buenas y malas, es uno de los desarrolladores m√°s influyentes del panorama ingenieril. Fuerte defensor de TDD, de la cobertura de tests y otras buenas pr√°cticas, y adem√°s cuenta con muchas personas que siguen sus ense√±anzas a rajatabla. Recientemente, Bob Martin, ha publicado un nuevo libro llamado Clean Architecture. ¬øPero qu√© se entiende por arquitectura limpia? Clean Code Como comentaba antes, Clean Code es un libro muy recomendable, que desgrana algunas ideas importantes para poder escribir c√≥digo limpio. El c√≥digo limpio es aquel c√≥digo que est√° estructurado de forma compresible, que es claro en sus intenciones, f√°cil de leer, que es f√°cilmente mantenible y que est√° testeado. En el libro se van dando algunas ideas para conseguir escribir c√≥digo limpio, hablando de principios SOLID, de la importancia de dar nombres a variables y clases etc. En GenbetaDev ya hemos hablado del libro y de sus ideas en alguna ocasi√≥n Principios de una arquitectura limpia Aunque seamos capaces de escribir c√≥digo limpio, podemos encontrarnos que al crecer nuestro sistema, la arquitectura del mismo sea un lastre. Y es que no es lo mismo escribir c√≥digo limpio para un proyecto sencillo, que para un proyecto complejo compuesto de varios componentes obligados a cooperar. A veces las arquitecturas son demasiado complejas, nos obligan a repetir c√≥digo, o nos hacen tener demasiadas dependencias entre componentes, caus√°ndonos muchos problemas. Los conceptos de cohesi√≥n y acoplamiento, tambi√©n pueden aplicarse a nivel de arquitectura. Si utiliz√°is programaci√≥n orientada a objetos, seguro que conoc√©is los conceptos de cohesi√≥n y acoplamiento. Esos conceptos tambi√©n pueden aplicarse de forma parecida a los componentes de un sistema, ya sean dlls o archivos jar, estos tienen que cooperar unos con otros. Y la manera en la que cooperen, pueden hacer un sistema fracasar. Pero si seguimos una serie de principios para controlar estas dos variables, nuestra arquitectura ser√° m√°s limpia y manejable. ","date":"16-10-2017","objectID":"/posts/2017/comun/021/:0:0","tags":["n9+","comun"],"title":"Buenas Practicas de programaci√≥n","uri":"/posts/2017/comun/021/"},{"categories":["comun"],"content":"Cohesi√≥n The Reuse/Release Equivalence Principle: que nos dice que los componentes deben poder ser desplegados de forma independiente sin afectar a los dem√°s. Las clases, o c√≥digo que van en ese componente, deben tener una relaci√≥n, y por tanto deben poderse desplegar de forma conjunta. The common closure principle: se podr√≠a decir que hablamos del principio de responsabilidad √∫nica (SRP) aplicado a componentes. La idea es agrupar clases que puedan cambiar por la misma raz√≥n en un solo componente. Si tenemos que hacer un cambio, y hay que tocar varios componentes, esto supondr√° tener que desplegarlos todos, en lugar de s√≥lo uno. The common reuse principle: este principio nos habla de evitar a aquellos que utilizan un componente depender de cosas que no necesitan. Si un componente depende de otro, hay que intentar que sea porque necesita todas las clases que lo componen. Lo contrario nos obligar√° a trabajar m√°s cuando nos toque hacer el despliegue. De esta manera ser√° m√°s f√°cil reutilizar componentes. Conseguir cumplir estos tres principios a la vez es algo bastante dif√≠cil, por lo que a veces hay que aceptar compromisos. Por ejemplo es com√∫n sacrificar un poco la reusabilidad, para conseguir que los componentes sean f√°ciles de desplegar. ","date":"16-10-2017","objectID":"/posts/2017/comun/021/:1:0","tags":["n9+","comun"],"title":"Buenas Practicas de programaci√≥n","uri":"/posts/2017/comun/021/"},{"categories":["comun"],"content":"Acoplamiento The Acyclic Dependencies Principle: si trazamos l√≠neas entre los componentes para representar las dependencias entre ellos, tenemos que intentar que no existan ciclos. Es decir, que el cambio en un componente, no acabe desencadenando en la necesidad de hacer cambios en cadena en los dem√°s componentes, que obliguen a volver a modificar el componente inicial. Cuando eso sucede, es dif√≠cil conseguir una versi√≥n estable del sistema, ya que hay que hacer multitud de cambios en los distintos componentes hasta que todo vuelve a funcionar. The stable dependencies Principle: todo sistema tiende a cambiar y evolucionar, pero no todos los componentes cambian con la misma frecuencia, ni es igual de f√°cil modificarlos. Este principio nos dice que un componente que cambia a menudo no deber√≠a depender de otro que es dif√≠cil modificar, ya que entonces ser√° tambi√©n dif√≠cil de modificar. The stable Abstractions Principle: este principio nos dice que si un componente de nuestro sistema va a cambiar poco ya que es dif√≠cil modificarlo, debe estar compuesto mayoritariamente por interfaces y clases abstractas. De esta manera el componente ser√° f√°cilmente extensible, y no afectar√° tanto al resto de la arquitectura. Caracter√≠sticas de una arquitectura limpia Adem√°s de cumplir los principios anteriormente descritos, una arquitectura limpia se caracteriza por: Independiente de los frameworks. Los frameworks deber√≠an ser herramientas, y no obligarnos a actuar de una determinada manera debido a sus restricciones. Testable. Debemos poder probar nuestras reglas de negocio sin pensar en base de datos, interface gr√°fica u otros componentes no esenciales de nuestro sistema. Independiente de la UI. Si la UI cambia a menudo esto no puede afectar al resto de nuestro sistema, que tiene que ser independiente. Independiente de la base de datos. Deber√≠amos poder cambiar de Oracle, a SQL Server, a MongoDB, a Casandra o a cualquier otra base de datos sin que afectara demasiado a nuestro sistema. Independiente de cualquier entidad externa. No deber√≠amos saber nada de entidades externas, por lo que no deberemos depender de ellas. Partes de una arquitectura limpia ","date":"16-10-2017","objectID":"/posts/2017/comun/021/:2:0","tags":["n9+","comun"],"title":"Buenas Practicas de programaci√≥n","uri":"/posts/2017/comun/021/"},{"categories":["comun"],"content":"Entidades Las entidades son las que incluyen las reglas de negocio cr√≠ticas para el sistema. Estas entidades pueden ser utilizadas por distintos componentes de la arquitectura, por lo que son independientes, y no deben cambiar a consecuencia de otros elementos externos. Una entidad deber√° englobar un concepto cr√≠tico para el negocio, y nosotros tendremos que separarlo lo m√°s posible del resto de conceptos. Esa entidad recibir√° los datos necesarios, y realizar√° operaciones sobre ellos para conseguir el objetivo deseado. ","date":"16-10-2017","objectID":"/posts/2017/comun/021/:3:0","tags":["n9+","comun"],"title":"Buenas Practicas de programaci√≥n","uri":"/posts/2017/comun/021/"},{"categories":["comun"],"content":"Casos de uso En este caso nos encontramos con las reglas de negocio aplicables a una aplicaci√≥n concreta. Estos casos de uso siguen un flujo para conseguir que las reglas definidas por las entidades se cumplan. Los casos de uso, solo definen como se comporta nuestro sistema, definiendo los datos de entrada necesarios, y cual ser√° su salida. Los cambios en esta capa no deber√≠an afectar a las entidades, al igual que los cambios en otras capas externas no deber√≠an afectar a los casos de uso. Es importante que no pensemos en como los datos que genera un caso de uso ser√°n presentados al usuario. No deberemos pensar en HTML, o en SQL. Un caso de uso recibe datos estructurados y devuelve m√°s datos estructurados. ","date":"16-10-2017","objectID":"/posts/2017/comun/021/:4:0","tags":["n9+","comun"],"title":"Buenas Practicas de programaci√≥n","uri":"/posts/2017/comun/021/"},{"categories":["comun"],"content":"Adaptadores de interfaz Los datos generados por los casos de uso y las entidades, tienen que transformarse en algo entendible por la siguiente capa que los va a utilizar y de eso se encarga esta capa. Pensando en MVC por ejemplo, los controladores y las vistas, pertenecer√≠an a esta capa, y el modelo, ser√≠an los datos que se pasan entre los casos de uso y los controladores para luego poder presentar las vistas. Lo mismo aplicar√≠a para por ejemplo, presentar informaci√≥n a un servicio externo, ya que en esta capa definir√≠amos la manera en la que los datos de las capas internas se presenta al exterior. ","date":"16-10-2017","objectID":"/posts/2017/comun/021/:5:0","tags":["n9+","comun"],"title":"Buenas Practicas de programaci√≥n","uri":"/posts/2017/comun/021/"},{"categories":["comun"],"content":"Frameworks y drivers En la capa m√°s externa es, como dice Bob Martin, donde van los detalles. Y la base de datos es un detalle, nuestro framework web, es un detalle etc. Fronteras o l√≠mites Una frontera (o como dicen los aglosajones, boundaries) es una separaci√≥n que definimos en nuestra arquitectura para dividir componentes y definir dependencias. Estas fronteras tenemos que decidir d√≥nde ponerlas, y cu√°ndo ponerlas. Esta decisi√≥n es importante ya que puede condicionar el buen desempe√±o del proyecto. Una mala decisi√≥n sobre los l√≠mites puede complicar el desarrollo de nuestra aplicaci√≥n o su mantenimiento futuro. Una mala decisi√≥n sobre los l√≠mites entre componentes puede complicar el desarrollo de nuestra aplicaci√≥n o su mantenimiento futuro Por ejemplo, podemos sentirnos tentados de pensar que las reglas de negocio deben poder guardar informaci√≥n directamente en la base de datos. Como ya hemos visto antes, la base de datos es un detalle, as√≠ que esto deber√≠amos evitarlo. En ese punto deber√≠amos trazar una frontera. Nuestras reglas de negocio, se comunicar√≠an siempre con una interface, sin saber nada sobre la base de datos. La base de datos en cambio, si sabr√° cosas sobre las reglas de negocio, ya que tiene que transformar los datos en sentencias SQL que puedan almacenar la informaci√≥n. Otra ventaja adicional de este enfoque, es que podemos retrasar ciertas decisiones. Podemos empezar a desarrollar todas nuestras reglas de negocio, sin tener en cuenta su persistencia, ya que esa parte se realiza a trav√©s de una interface. Primero podemos utilizar objetos en memoria, y seg√∫n avancemos, ir a√±adiendo sistemas m√°s sofisticados. Al final podremos elegir entre usar una base de datos relacional, NoSQL, o incluso guardar la informaci√≥n en archivos. En definitiva, debemos pensar en nuestro sistema, como un sistema de plugins, de forma que los componentes est√©n aislados y podamos sustituir unos por otros sin demasiados problemas. Las fronteras de una arquitectura limpia En el esquema de arquitectura limpia que hemos visto anteriormente, podemos ver d√≥nde se han trazado las fronteras o l√≠mites. Entre entidades y casos de uso, hay una frontera. Lo mismo con los adaptadores de interface, o los frameworks y drivers. Las fronteras son importantes, porque a√±adirlas cuando no las necesitamos pude crearnos muchos problemas, pero no a√±adirlas cuando las necesitamos pude generar otros tantos (a√±adirlas despu√©s, es siempre es mucho m√°s costoso). La separaci√≥n en fronteras es importante, pero mucho m√°s importante es la gesti√≥n que hagamos de las dependencias entre estas capas. Para ello siempre hay que seguir la regla de las dependencias. ","date":"16-10-2017","objectID":"/posts/2017/comun/021/:6:0","tags":["n9+","comun"],"title":"Buenas Practicas de programaci√≥n","uri":"/posts/2017/comun/021/"},{"categories":["comun"],"content":"La regla de las dependencias Esta regla es muy importante, ya que sin ella, nuestra arquitectura no ser√≠a m√°s que un bonito diagrama. Las capas interiores de una arquitectura limpia, no deben saber nada de las capas exteriores. Por ejemplo la capa de entidades, no puede saber de la existencia de los casos de uso, y los casos de uso no deben saber nada de la existencia de los adaptadores de interface. As√≠ las dependencias est√°n controladas y van siempre en un solo sentido. ","date":"16-10-2017","objectID":"/posts/2017/comun/021/:7:0","tags":["n9+","comun"],"title":"Buenas Practicas de programaci√≥n","uri":"/posts/2017/comun/021/"},{"categories":["comun"],"content":"Estructuras de datos simples A la hora de traspasar una frontera, deberemos utilizar estructuras de datos simples, evitando utilizar conceptos como DatabaseRows o similares. Pensando en los casos de uso, estos deben recibir estructuras de datos como datos de entradas, y deben devolver estructuras de datos como salida. Como dec√≠a antes, no nos interesa que un caso de uso tenga conocimientos sobre HTML o SQL. Lo contrario nos lleva a una falta de independencia, con todo lo que eso conlleva (despliegue, actualizaci√≥n, tests etc.) . ","date":"16-10-2017","objectID":"/posts/2017/comun/021/:8:0","tags":["n9+","comun"],"title":"Buenas Practicas de programaci√≥n","uri":"/posts/2017/comun/021/"},{"categories":["dev"],"content":"El sistema gambit, es un sistema que controla el comportamiento o acciones de un agente. Este agente tiene unas listas de prioridades en las que tiene comportamientos o acciones. El agente siempre accionara iteradamente su acci√≥n, siempre y cuando cumpla la condici√≥n, sino, pasara a la siguiente acci√≥n en la lista. ","date":"03-10-2017","objectID":"/posts/2017/dev/013/:0:0","tags":["n9+","dev"],"title":"Sistema Gambits","uri":"/posts/2017/dev/013/"},{"categories":["dev"],"content":"¬øD√≥nde y por qu√© se necesit√≥ crear el sistema gambit? En 1991, Square Soft, una desarrolladora de videojuegos famosa por sus sagas jrpg, necesitaba generar una serie de patrones para sus enemigos en su juego FF IV. Al tener muchos enemigos, necesitaban tener una manera central de distribuir todos sus patrones con ciertas condiciones en sus enemigos, con fluidez. Por lo que implementaron el sistema gambit en sus enemigos, generando as√≠ una f√°cil modificaci√≥n de estos. En 2007 desarrollaron FF 12, optaron por generar el mismo patr√≥n de los enemigos en FF IV, pero esta vez en los h√©roes que controlaba el jugador. El deseo de conseguir una transici√≥n fluida llevar√≠a a introducir lo que probablemente sea la caracter√≠stica m√°s √∫nica de Final Fantasy XII: el sistema Gambit, un sistema de combate personalizable que se parece mucho a los lenguajes de programaci√≥n. Gracias al sistema Gambit, los jugadores pueden crear una lista de √≥rdenes para cada personaje, que realizar√°n autom√°ticamente si se cumplen ciertas condiciones. Establecer estas √≥rdenes y darles prioridad de manera creativa es la clave para ganar varios de los combates del juego. Hiroaki Kato: Como ya coment√©, nuestra idea era que los combates de Final Fantasy XII deb√≠an progresar de manera fluida en tiempo real. Tem√≠amos que, si solo a√±ad√≠amos la caracter√≠stica del tiempo real al sistema de combate basado en √≥rdenes que ten√≠an otros juegos de Final Fantasy, resultar√≠a demasiado ca√≥tico y dif√≠cil controlar todo, as√≠ que, para resolver este problema, adoptamos el sistema Gambit. De hecho, el sistema de combate de Final Fantasy IV tambi√©n ten√≠a un sistema Gambit (como la mec√°nica que controlaba la IA del monstruo), as√≠ que lo desarrollamos con un enfoque diferente que result√≥ en el sistema Gambit de Final Fantasy XII. ","date":"03-10-2017","objectID":"/posts/2017/dev/013/:1:0","tags":["n9+","dev"],"title":"Sistema Gambits","uri":"/posts/2017/dev/013/"},{"categories":["dev"],"content":"¬øPor qu√© se considera una funci√≥n de IA? Se considera IA, el hecho de que es un agente en s√≠. Un agente inteligente, es una entidad capaz de percibir su entorno, procesar tales percepciones y responder o actuar en su entorno de manera racional, es decir, de manera correcta y tendiendo a maximizar un resultado esperado. Es capaz de percibir su medioambiente con la ayuda de sensores y actuar en ese medio utilizando actuadores (elementos que reaccionan a un est√≠mulo realizando una acci√≥n). El sistema gambit tiene 3 puntos clave: Prioridad Condici√≥n Acci√≥n/Comportamiento Sin esos tres puntos, no se puede realizar un sistema gambit. Una explicaci√≥n b√°sica de este ejemplo, seria: Un Agente tiene una lista con 2 acciones. La primera acci√≥n, seria atacar al enemigo, si su vida es \u003e 30%. La segunda acci√≥n, seria curarse a el mismo, si su vida es \u003c 30%. Como se ve, la primera acci√≥n, tiene prioridad 0, por lo que ser√≠a la primera acci√≥n a comprobar. Su acci√≥n seria atacar al enemigo. Su condici√≥n seria si el enemigo tiene su vida mayor al 30%. ","date":"03-10-2017","objectID":"/posts/2017/dev/013/:2:0","tags":["n9+","dev"],"title":"Sistema Gambits","uri":"/posts/2017/dev/013/"},{"categories":["dev"],"content":"Videojuegos que tienen este aspecto incorporado En FF IV , se utilizo el sistema para el comportamiento del enemigo En FF XII, se utilizo el sistema para el control automatico de las unidades aliadas no controladas . ","date":"03-10-2017","objectID":"/posts/2017/dev/013/:3:0","tags":["n9+","dev"],"title":"Sistema Gambits","uri":"/posts/2017/dev/013/"},{"categories":["comun"],"content":"Cuando gestionamos a un grupo en el g√©nero RPG, solemos darle prioridad a los personajes m√°s fuertes o que m√°s nos gustan para formar un equipo s√≥lido que pueda afrentar los t√≠picos combates del camino y las grandes batallas contra los jefes. Sin embargo, muchos t√≠tulos juegan con un factor puntual que rompe un poco nuestros esquemas: el de ofrecernos personajes que no se quedar√°n permanentemente con nosotros. Seguramente se os vendr√° a la mente alg√∫n RPG donde cierto personaje que os gustaba acababa march√°ndose del grupo, traicion√°ndonos o incluso muriendo a lo largo de la historia del juego, lo que suele doler doblemente porque no s√≥lo perdemos a un aliado, es que era uno que us√°bamos y al que, encima, le hab√≠amos dedicado recursos como objetos de mejora de estad√≠sticas, el equipo m√°s caro o, simplemente, horas de entrenamiento que ya no nos serv√≠an para nada porque ese personaje no sigue con nosotros. Es por ello por lo que muchos t√≠tulos optan por dejarnos claro que cierto personaje no se va a quedar permanentemente con nosotros, como una especie de punto de decencia con el jugador, avisando de que no nos debemos acostumbrar demasiado a que ese aliado vaya a quedarse ah√≠ para siempre. Esta clase de personajes normalmente se puede dividir en tres grupos. El primero ser√≠a el de aliado puntual totalmente controlable y equipable como si fuese permanente. Ciertamente, son los m√°s dif√≠ciles de reconocer como puntuales, salvo que la propia historia del t√≠tulo ya nos vaya avisando que normalmente esos aliados no se van a quedar ah√≠ para siempre (como pasa con Kingdom Hearts), aunque en muchos casos depender√° m√°s de la intuici√≥n del jugador que otra cosa. Al darnos el control absoluto de un personaje en un RPG nos resulta muy complicado detectarlo como mero invitado temporal, ya que muchos t√≠tulos ofrecen alg√∫n tipo de indicativo que nos puede poner sobre aviso. Equipo imposible de cambiar, bloqueo de ciertas caracter√≠sticas, estad√≠sticas o nivel muy superior al del resto‚Ä¶ Hay muchas formas de dejar, aunque sea, unas migas de pan para que el jugador pueda decidir no usar ese personaje porque sabe que no lo va a mantener permanentemente, al igual que tambi√©n habr√°n otros que prefieran tenerlo en su grupo por tem√°tica, por aprovechar su fortaleza o, simplemente, porque quieren saber qu√© es lo que puede ofrecer en ese tiempo limitado (¬øqui√©n no recuerda manejar a ciertos villanos de la serie Final Fantasy en determinados combates, cuando son todav√≠a aliados del grupo?). El segundo grupo de aliados puntuales ser√≠a el de los que resultan claramente marcados como tal, como sucede con ejemplos del tipo Final Fantasy XII o algunos otros RPGs donde te dejan una frase del tipo ‚Äúeste personaje se une de forma temporal a tu grupo‚Äù, en cuyo caso la mayor√≠a ni decidiremos usarlo‚Ä¶ Salvo que nos lo coloquen de forma obligatoria, lo que resulta, de facto, una especie de misi√≥n de protecci√≥n donde dicho aliado, por lo menos, podr√° defenderse en combate‚Ä¶ O, si da igual que muera, lo tendremos como una mosca cojonera para que moleste a los enemigos, pero tampoco nos preocuparemos por defenderlo, salvo que ocupe una de las plazas del grupo y nos deje en una situaci√≥n de desventaja. Como normalmente las misiones de protecci√≥n suelen apestar bastante, bien porque el protegido se mueve a velocidad de tortuga o bien porque no parece tener el m√°s m√≠nimo inter√©s por sobrevivir y se mete en medio del combate como si estuviese buscando ser aniquilado, ofrecer la posibilidad de controlar, aunque sea mediante ciertas √≥rdenes simples, a ese personaje suele ser una soluci√≥n bastante interesante, aunque en la mayor√≠a de los casos lo que har√°n los jugadores es quitarse a la molestia del medio mientras se encargan de todos los peligros existentes en la zona. El caso de Banon en Final Fantasy VI es especialmente recordado porque aunque nos dejaban el control del mismo no pod√≠amos protegerlo demasiado, ya que en combates por turnos no hay una forma evidente de hacerlo ","date":"27-09-2017","objectID":"/posts/2017/comun/020/:0:0","tags":["n9+","comun"],"title":"RPG y Personajes de apoyo","uri":"/posts/2017/comun/020/"},{"categories":["dev"],"content":"Generaci√≥n de contenido procedural - B√°sico ","date":"25-08-2017","objectID":"/posts/2017/dev/012/:0:0","tags":["n9+","dev"],"title":"Investigaci√≥n Generaci√≥n","uri":"/posts/2017/dev/012/"},{"categories":["dev"],"content":"¬øQu√© es el PCG? Aqu√≠ debo comenzar diciendo que en realidad una definici√≥n certera y aceptada por toda la academia no existe, es por eso que voy a mencionar diversas definiciones que obtuve de las referencias en las que me base: El PCG es la creaci√≥n algor√≠tmica de contenido de un juego, con entrada de informaci√≥n limitada o indirecta por parte del usuario. El PCG es la generaci√≥n program√°tica de contenido de un juego, utilizando un proceso aleatorio o pseudo aleatorio que da como resultado un rango impredecible de posibles espacios de juego. El PCG es el concepto o paradigma por el cual todas las piezas de contenido de un juego pueden ser creadas solo mediante la utilizaci√≥n de la programaci√≥n. En otras palabras, el PCG es la creaci√≥n de contenido de un juego mediante la programaci√≥n. Y para comprender mejor esto, debo explicar su nombre. La palabra clave Procedural, viene de procedimiento, que en la programaci√≥n es simplemente una instrucci√≥n que debe ser ejecutada. Por supuesto los procedimientos (tambi√©n conocidos como funciones y m√©todos) son el principal paradigma en la programaci√≥n. Por otra parte el Content o contenido es todo lo que se presenta ante el usuario, es decir, niveles, modelos, texturas, m√∫sica, sonidos, historias, inteligencia artificial, entre otras tantas. A la izquierda se puede observar una textura hecha a mano, y a la derecha una textura generada de manera procedimental ","date":"25-08-2017","objectID":"/posts/2017/dev/012/:0:1","tags":["n9+","dev"],"title":"Investigaci√≥n Generaci√≥n","uri":"/posts/2017/dev/012/"},{"categories":["dev"],"content":"¬øPor qu√© deber√≠amos utilizar el PCG? Tal vez la respuesta a esta pregunta sea obvia, pero de igual manera es importante analizarla. Por supuesto la raz√≥n primordial para utilizar PCG es que nos quita la necesidad (casi en su totalidad) de contar con un dise√±ador o artista humano que genere contenido para el juego. Sabemos que los humanos somos lentos y costosos y por lo general se necesita cada vez m√°s de ellos para crear contenido de alta calidad para los videojuegos de la industria. Pero si utilizamos el PCG como la roca fundamental sobre la que edificamos el videojuego, nos estaremos ahorrando varios hombres, que podr√≠an haber dise√±ado o creado contenido de manera manual y no autom√°tica y eficiente como lo hacen los algoritmos. Se dice que las ventajas de utilizar el PCG son la unicidad, la robustez, la flexibilidad, la adaptabilidad que aportan al videojuego. Sobre todo ya que podr√≠amos hacer un juego rejugable casi de manera infinita (como veremos m√°s adelante al implementar algoritmos). Un claro ejemplo de esto es el sistema de generaci√≥n de armas del famoso videojuego Borderlands que se puede apreciar en la imagen. Generaci√≥n procedimental de armas en Bordelands de Gearbox Software ","date":"25-08-2017","objectID":"/posts/2017/dev/012/:0:2","tags":["n9+","dev"],"title":"Investigaci√≥n Generaci√≥n","uri":"/posts/2017/dev/012/"},{"categories":["dev"],"content":"Teor√≠a Fundamental ","date":"25-08-2017","objectID":"/posts/2017/dev/012/:1:0","tags":["n9+","dev"],"title":"Investigaci√≥n Generaci√≥n","uri":"/posts/2017/dev/012/"},{"categories":["dev"],"content":"N√∫meros Pseudo Aleatorios Los n√∫meros aleatorios han sido utilizados en una gran cantidad de juegos desde hace mucho tiempo, desde juegos tradicionales como lo son los juegos de cartas hasta los juegos de mesa con dados. Los n√∫meros aleatorios entregan al juego un factor que los hace impredecibles. Y sabemos que las cosas impredecibles son emocionantes, desafiantes y ofrecen una experiencia √∫nica, por lo tanto entregan un valor √∫nico a un universo. En las ciencias de la computaci√≥n el estudio de los n√∫meros aleatorios se ha enfocado por lo general en su uso en la criptograf√≠a y la ciber seguridad, por supuesto mediante complejos algoritmos y f√≥rmulas matem√°ticas, que aqu√≠ no ser√°n estudiadas para su alivio. Unity de hecho ya provee una clase llamada Random, la que permite generar n√∫meros aleatorios, como veremos m√°s adelante. ","date":"25-08-2017","objectID":"/posts/2017/dev/012/:1:1","tags":["n9+","dev"],"title":"Investigaci√≥n Generaci√≥n","uri":"/posts/2017/dev/012/"},{"categories":["dev"],"content":"N√∫meros Aleatorios VS N√∫meros Pseudo Aleatorios Y aqu√≠ viene la cruda realidad nuevamente a recordarnos porque somos imperfectos. Han de saber queridos lectores que los n√∫meros pseudo aleatorios tal como su nombre lo predicen, no son n√∫meros aleatorios. Un evento realmente aleatorio ser√≠a por ejemplo lanzar un dado. Pero por otra parte los n√∫meros pseudo aleatorios son preferidos en la programaci√≥n de juegos ya que son mucho m√°s sencillos de generar y por supuesto tambi√©n de reproducir los mismos resultados una y otra vez (ya les explico por qu√©). Imaginen si lanzamos un dado de 6 caras y nos sale 1 en la cara, luego si lo lanzamos nuevamente y queremos reproducir el mismo resultado tenemos una probabilidad de 1/6 que el dado nos entregue el mismo resultado, ahora piensen en un dado de 1 mill√≥n de caras, si lanzamos y nos sale el n√∫mero 424.342 en la cara del dado, entonces para poder reproducir el mismo resultado tendr√≠amos 1/1.000.000 como probabilidad de que nos salga el mismo resultado, lo que significar√≠a para nosotros gran inversi√≥n de tiempo seguramente, ¬øya ven por qu√© utilizar n√∫meros pseudo aleatorios nos conviene m√°s? En los n√∫meros pseudo aleatorios existe algo conocido como Seed o Semilla que no es m√°s que la representaci√≥n (en n√∫mero, o string) de la aleatoriedad que usara nuestro generador de n√∫meros pseudo aleatorios y la cual nos ser√° de vital importancia a la hora de replicar un resultado o secuencia de acciones. Por ejemplo si generamos un nivel basados en un seed con el n√∫mero 5 con X algoritmo, luego podemos replicarlo f√°cilmente al hacer que el seed simplemente tenga el mismo valor que antes. Pero por otra parte la desventaja que esto entrega es que puede darse el caso en que las combinaciones de reglas posibles de nuestro algoritmo se acaben y luego de un tiempo nuestra seed replique los mismos resultados antes vistos, pero en la mayor√≠a de los casos eso ser√° controlado f√°cilmente. ","date":"25-08-2017","objectID":"/posts/2017/dev/012/:1:2","tags":["n9+","dev"],"title":"Investigaci√≥n Generaci√≥n","uri":"/posts/2017/dev/012/"},{"categories":["dev"],"content":"Programando A continuaci√≥n voy a presentar al lector 2 ejemplos que creo son indicados para poder comenzar a entender de manera pr√°ctica esta tem√°tica tan apasionante. El primero de ellos se trata de un programa que genera el t√≠pico ‚ÄúHola Mundo‚Äù, pero esta vez ordenado de manera procedimental, si bien es cierto este es un ejercicio muy peque√±o y sencillo, nos servir√° para afirmar los conceptos anteriormente estudiados y aprendidos. Luego en un segundo ejemplo mucho m√°s desafiante que el primero, explicar√© paso a paso como crear la estructura de una cueva utilizando el PCG, por supuesto este algoritmo ser√° mucho m√°s complejo (aunque no imposible de entender) que el primero. ","date":"25-08-2017","objectID":"/posts/2017/dev/012/:2:0","tags":["n9+","dev"],"title":"Investigaci√≥n Generaci√≥n","uri":"/posts/2017/dev/012/"},{"categories":["dev"],"content":"Unity3D Bien conocido es el t√≠pico programa que la mayor√≠a de nosotros, cuando d√°bamos nuestros primeros pasos en la programaci√≥n, creamos en nuestra primera aventura con una IDE, y con la que logramos un resultado que a pesar de ser sencillo, nos permiti√≥ vislumbrar todo el potencial que tienen los computadores para seguir instrucciones de manera ordenada. Bueno tomando esto en cuenta quise esta vez llevarlo al plano de los algoritmos procedimentales, aunque no lo considero precisamente 100% apegado a la definici√≥n que vimos antes, pero si nos dar√° una primera impresi√≥n de lo que les ven√≠a hablando sobre los universos que pueden ser creados por un computador. Lo que se deseamos lograr como objetivo principal con este peque√±o ejemplo, es que podamos generar todas las combinaciones posibles de las letras de las palabras ‚ÄúPROCEDURAL‚Äù, por supuesto cada vez que el seed tome un valor determinado, la combinaci√≥n de letras deber√≠a ser distinta, considerando claro que tenemos 10 letras, entonces la cantidad total de combinaciones posibles para mezclar esas letras ser√≠a por f√≥rmula 10! que es mas de 362.880 combinaciones. Por lo tanto nuestra seed puede dar un resultado distinto 362.880 veces o mas, y luego de eso, tal y como estudiamos anteriormente se comenzar√°n a repetir los resultados. ¬†Aqui os dejo el link a GitHub con los diferentes ejemplos. Sin m√°s pre√°mbulos vamos a analizar el siguiente trozo de c√≥digo que nos permite generar de manera procedural las combinaciones de letras de las palabras ‚ÄúPROCEDURAL‚Äù. // ‚îå‚à©‚îê(‚ó£_‚ó¢)‚îå‚à©‚îê // \\\\ // PruebaPCG.cs (26/09/2017) \\\\ // Autor: Antonio Mateo (Moon Antonio) antoniomt.moon@gmail.com \\\\ // Descripcion: Prueba de PCG \\\\ // Fecha Mod: 26/09/2017 \\\\ // Ultima Mod: Version Inicial \\\\ //******************************************************************************\\\\ #region Librerias using UnityEngine; using System.Collections.Generic; #endregion namespace MoonAntonio { public class PruebaPCG : MonoBehaviour { #region Variables Publicas /// \u003csummary\u003e /// \u003cpara\u003eSemilla.\u003c/para\u003e /// \u003c/summary\u003e public int seed = 1; // Semilla #endregion #region Variables Privadas /// \u003csummary\u003e /// \u003cpara\u003ePalabra procesada.\u003c/para\u003e /// \u003c/summary\u003e private string palabraFinal; // Palabra procesada /// \u003csummary\u003e /// \u003cpara\u003eLista con las letras iniciales.\u003c/para\u003e /// \u003c/summary\u003e private List\u003cstring\u003e letras = new List\u003cstring\u003e(); // Lista con las letras iniciales #endregion #region Inicializadores /// \u003csummary\u003e /// \u003cpara\u003eCargador de \u003csee cref=\"PruebaPCG\"/\u003e.\u003c/para\u003e /// \u003c/summary\u003e private void Awake()// Cargador de PruebaPCG { letras.Add(\"P\"); letras.Add(\"R\"); letras.Add(\"O\"); letras.Add(\"C\"); letras.Add(\"E\"); letras.Add(\"D\"); letras.Add(\"U\"); letras.Add(\"R\"); letras.Add(\"A\"); letras.Add(\"L\"); } /// \u003csummary\u003e /// \u003cpara\u003eInicializador de \u003csee cref=\"PruebaPCG\"/\u003e.\u003c/para\u003e /// \u003c/summary\u003e private void Start()// Inicializador de PruebaPCG { // Inicializamos la semilla Random.InitState(seed); // Obtenemos la palabra final sin procesar y la mostramos for (int n = 0; n \u003c letras.Count; n++) { palabraFinal += letras[n]; } Debug.Log(\"[NORMAL] Palabra inicial: \" + palabraFinal); // Reseteamos la palabra palabraFinal = \"\"; // Procesamos while (letras.Count \u003e 0) { int index = Random.Range(0, letras.Count); palabraFinal += letras[index]; letras.RemoveAt(index); } Debug.Log(\"[FIX] Palabra procesada: \" + palabraFinal); } #endregion } } Lo primero que debemos haber notado al mirar el c√≥digo es que tenemos una variable de tipo int que almacena nuestra seed o semilla, que es la que se encargar√° por supuesto de decidir la secuencia de n√∫meros que devuelve la clase Random. Luego se puede observar una variable de tipo string que almacena la palabra final generada por el algoritmo. Y por √∫ltimo una tercera variable que almacena todas las letras de la cadena ‚ÄúHolaMundo‚Äù de tipo List almacenando string. En el m√©todo Awake ingresamos las letras de la cadena a la lista de manera ordenada, aunque claro est√° que en este caso el orden no deber√≠a influir en lo abs","date":"25-08-2017","objectID":"/posts/2017/dev/012/:2:1","tags":["n9+","dev"],"title":"Investigaci√≥n Generaci√≥n","uri":"/posts/2017/dev/012/"},{"categories":["dev"],"content":"Generando Cuevas Pasando ahora a la parte m√°s ‚Äúcompleja‚Äù de este post, nuestro objetivo ser√° ahora generar una cueva de manera procedimental, con par√°metros que nos permitan entregarle al jugador una soluci√≥n distinta, y probablemente un mundo distinto cada vez que ejecute el programa. Pero para hacer realidad nuestro sue√±o dorado, primero debemos comprender un concepto conocido como Cellular Aut√≥mata o en su traducci√≥n al espa√±ol Aut√≥mata Celular, que no es m√°s que un modelo computacional discreto (asumo que el lector sabe el significado de discreto en t√©rminos matem√°ticos, y si no es as√≠, espero lo puedan googlear). Los aut√≥matas celulares han sido ampliamente estudiados en la inform√°tica, la f√≠sica e incluso algunas ramas de la biolog√≠a, como modelos de computaci√≥n, de crecimiento, de desarrollo, de fen√≥menos f√≠sicos, etc. Pero para su alegr√≠a sus conceptos b√°sicos son en realidad muy simples y pueden explicarse en unos pocos p√°rrafos y una imagen o dos. Un aut√≥mata celular consiste en una cuadr√≠cula de dimensiones de NxM, un conjunto de estados posibles, y un conjunto de reglas de transici√≥n. En esta cuadr√≠cula cada celda puede tomar distintos estados, pero en el caso m√°s simple, puede estar encendida o apagada (tomar un valor 1 o 0). A medida que se realizan iteraciones sobre el aut√≥mata este va evolucionando en pasos discretos y siguiendo sus propias reglas. En cada tiempo t, cada celda decide su nuevo estado basado en el estado de s√≠ misma y todas las celdas de su entorno (sus vecinas) en el momento t-1. Estos vecinos pueden ser tomados en cuenta siguiendo 2 tipos de modelos, que se pueden observar en las siguientes figuras: a) Vecinos Moore b) Vecinos von Neumann En nuestro caso utilizaremos el modelo de Moore, para capturar una celda especifica y aplicar su regla de transici√≥n tomando en cuenta los 8 vecinos de la celda actual (celda central C), como veremos m√°s adelante. Los par√°metros que utilizaremos para el control de las cuevas generadas ser√°n: X Y Seed Porcentaje de Muros Cantidad de iteraciones de suavizado Estos par√°metros nos permitir√°n m√°s o menos mantener un control sobre las cuevas que se generen, y por supuesto replicar las estructuras que encontremos interesantes. Entonces se estar√°n preguntando pero y c√≥mo realmente generamos las cuevas, y aqu√≠ viene lo entretenido, ya que aplicando un aut√≥mata celular sobre un algoritmo de randomizaci√≥n veremos como el caos se convierte en algo estructurado. F√≠jense en el siguiente c√≥digo: // ‚îå‚à©‚îê(‚ó£_‚ó¢)‚îå‚à©‚îê // \\\\ // GeneradorMazmorra.cs (26/09/2017) \\\\ // Autor: Antonio Mateo (Moon Antonio) antoniomt.moon@gmail.com \\\\ // Descripcion: Generador no logico de mazmorras \\\\ // Fecha Mod: 26/09/2017 \\\\ // Ultima Mod: Version Inicial \\\\ //******************************************************************************\\\\ #region Librerias using UnityEngine; #endregion namespace MoonAntonio { /// \u003csummary\u003e /// \u003cpara\u003eGenerador no logico de mazmorras\u003c/para\u003e /// \u003c/summary\u003e public class GeneradorMazmorra : MonoBehaviour { #region Variables Publicas /// \u003csummary\u003e /// \u003cpara\u003eLargo de la mazmorra.\u003c/para\u003e /// \u003c/summary\u003e public int x = 15; // Largo de la mazmorra /// \u003csummary\u003e /// \u003cpara\u003eAltura de la mazmorra.\u003c/para\u003e /// \u003c/summary\u003e public int y = 15; // Altura de la mazmorra /// \u003csummary\u003e /// \u003cpara\u003eSemilla.\u003c/para\u003e /// \u003c/summary\u003e public int seed = 99; // Semilla /// \u003csummary\u003e /// \u003cpara\u003eDetermina si la seed sera aleatoria.\u003c/para\u003e /// \u003c/summary\u003e public bool seedAleatoria = false; // Determina si la seed sera aleatoria /// \u003csummary\u003e /// \u003cpara\u003ePorcentaje de muros.\u003c/para\u003e /// \u003c/summary\u003e [Range(0, 100)] public int Muros = 50; // Porcentaje de muros #endregion #region Variabes privadas /// \u003csummary\u003e /// \u003cpara\u003eMapa de la mazmorra.\u003c/para\u003e /// \u003c/summary\u003e private int[,] mazmorraMapa; // Mapa de la mazmorra #endregion #region Inicializadores /// \u003csummary\u003e /// \u003cpara\u003eInicializador de \u003csee cref=\"GeneradorMazmorra\"/\u003e.\u003c/para\u003e /// \u003c/summary\u003e private void Start()// Inicializador de GeneradorMazmorra { // Creamos ","date":"25-08-2017","objectID":"/posts/2017/dev/012/:2:2","tags":["n9+","dev"],"title":"Investigaci√≥n Generaci√≥n","uri":"/posts/2017/dev/012/"},{"categories":["comun"],"content":"Atlus crea una divisi√≥n para lanzar sus propios t√≠tulos en Europa . Desde Atlus han anunciado que de ahora en adelante se encargar√°n de publicar sus propios t√≠tulos en Europa desde una nueva oficina que han fundado en Londres. Anteriormente la compa√±√≠a usaba terceras compa√±√≠as como NIS America o Deep Silver para lanzar sus t√≠tulos en territorio europeo. El nuevo equipo cuenta con Simon Inch como director comercial y en breve contar√° con su propio gestor de relaciones p√∫blicas y gerente de m√°rketing. Los tres trabajar√°n de forma independiente a las oficinas de Sega Europa en Londres. Seg√∫n Atlus, esto les permitir√° lanzar en Europa las ediciones especiales y productos que actualmente ofrecen para territorio norteamericano y otros mercados. ‚ÄúEs una muestra palpable del crecimiento que estamos experimentando como compa√±√≠a‚Äú, dec√≠a Jacob Nahin, manager senior de Atlus USA. ‚ÄúEditar en Europa es un paso natural para nosotros. La primera consecuencia para los fans ser√° la paridad de lanzamientos y ediciones premium. Desde el punto de vista empresarial, estaremos mejor posicionados para atender las necesidades de cada mercado en el que lancemos nuestros t√≠tulos‚Äú. . ","date":"24-08-2017","objectID":"/posts/2017/comun/019/:0:0","tags":["n9+","comun"],"title":"Atlus \u0026 Europa","uri":"/posts/2017/comun/019/"},{"categories":["dev"],"content":"Diferentes comandos √∫tiles y b√°sicos Cat Cat (de concatenar), es una maravillosa utilidad que nos permite visualizar el contenido de un archivo de texto sin la necesidad de un editor. Para utilizarlo solo debemos mencionarlo junto al archivo que deseamos visualizar. $ cat prueba.txt Ls Ls (de listar), permite listar el contenido de un directorio o fichero. El comando ls tiene varias opciones que permiten organizar la salida, lo que resulta particularmente √∫til cuando es muy grande. Por ejemplo, puedes usar -a para mostrar los archivos ocultos y -l para mostrar los usuarios, permisos y la fecha de los archivos. $ ls /home/directorio $ ls -la /home/directorio Cd Cd (de change directory o cambiar directorio), es como su nombre lo indica el comando que necesitar√°s para acceder a una ruta distinta de la que te encuentras. $ cd /home/ejercicios $ cd .. Touch Touch crea un archivo vac√≠o, si el archivo existe actualiza la hora de modificaci√≥n. $ touch /home/prueba1.txt Mkdir Mkdir (de make directory o crear directorio), crea un directorio nuevo tomando en cuenta la ubicaci√≥n actual. Mkdir tiene una opci√≥n bastante √∫til que permite crear un √°rbol de directorios completo que no existe con -p. $ mkdir /home/ejercicios $ mkdir -p /home/ejercicios/prueba/uno/dos/tres Cp Cp (de copy o copiar), copia un archivo o directorio origen a un archivo o directorio destino. En la sintaxis siempre se especifica primero el origen y luego el destino. Si indicamos un nombre de destino diferente, cp copiar√° el archivo o directorio con el nuevo nombre. El comando tambi√©n cuenta con la opci√≥n -r que copia no s√≥lo el directorio especificado sino todos sus directorios internos de forma recursiva. $ cp /home/prueba.txt /home/respaldo/prueba.txt $ cp -r /home/ejercicios /home/respaldos/ Mv Mv (de move o mover), mueve un archivo a una ruta espec√≠fica, y a diferencia de cp, lo elimina del origen finalizada la operaci√≥n. $ mv /home/prueba.txt /home/respaldos/prueba2.txt Rm Rm (de remove o remover), es el comando necesario para borrar un archivo o directorio. Este comando tambi√©n presenta varias opciones. La opci√≥n -r borra todos los archivos y directorios de forma recursiva. Por otra parte, -f borra todo sin pedir confirmaci√≥n. Estas opciones pueden combinarse causando un borrado recursivo y sin confirmaci√≥n del directorio que se especifique. $ rm /home/prueba.txt $ rm -fr /home/respaldos Pwd Pwd (de print working directory o imprimir directorio de trabajo), es un conveniente comando que imprime nuestra ruta o ubicaci√≥n al momento de ejecutarlo, as√≠ evitamos perdernos si estamos trabajando con m√∫ltiples directorios y carpetas. $ pwd Clear Clear (de limpiar), es un sencillo comando que limpiara nuestra terminal por completo dej√°ndola como reci√©n abierta. $ clear . ","date":"27-07-2017","objectID":"/posts/2017/dev/011/:0:0","tags":["n9+","dev"],"title":"Comandos fundamentales de Windows","uri":"/posts/2017/dev/011/"},{"categories":["imagen del dia"],"content":" La princesa con el plateado .Danmachi. Artista desconocido\r. ","date":"20-05-2017","objectID":"/posts/2017/imagen/007/:0:0","tags":["n9+","ilustracion"],"title":"Imagen del dia [20.05.2017]","uri":"/posts/2017/imagen/007/"},{"categories":["comun"],"content":"¬†Github nos permite liberar cualquier proyecto en el que hayamos estado trabajado en privado. En ocasiones, nuestra intenci√≥n es simplemente compartirlo sin m√°s pretensiones como un pet project o como ejemplo de alguna kata que hemos estado preparado. Pero cuando queremos comenzar un proyecto Open Source un poco m√°s serio, como una librer√≠a que queramos compartir con el resto de desarrolladores, quiz√°s debamos pararnos a pensar un poco m√°s antes de publicar nuestro c√≥digo en Github si cumple una serie de pasos previos. Vamos a repasar una serie de puntos interesantes para cualquier proyecto Open Source. Un peque√±o checklist de recomendaciones, desde la visi√≥n tanto de un maintainer de proyectos de software Open Source como de un desarrollador que se encuentra un proyecto en Github y quiere usarlo. Razones por las que liberar tu c√≥digo como Open Source Hay muchas razones por qu√© un desarrollador u organizaci√≥n querr√≠a hacer Open Source un proyecto. Algunos ejemplos para ilustrar la situaci√≥n ser√≠a: Pura colaboraci√≥n. Quiz√°s estemos desarrollando un proyecto por nuestra cuenta, lo hayamos mencionado en alg√∫n grupo de slack o meetup de desarrolladores, y nos lancemos a hacerlo abierto para que el resto de desarrolladores sean contributors ayud√°ndonos a avanzar. De forma individual simplemente buscar hacer p√∫blico alguno de tus pet project. De esta forma la gente ver√° c√≥mo programas y encuentres futuras colaboraciones. Transparencia: Existen muchas instituciones que ven el Open Source como la forma de hacer p√∫blico en lo que est√°n trabajando para que cualquiera pueda revisarlo sin problema. Deja claro el objetivo, las expectativas y c√≥mo utilizar/colaborar ‚ÄúRelease early, release often‚Äù es una de las frases m√°s repetidas cuando pensamos en liberar un proyecto software. Hacer p√∫blico un proyecto open source es s√≥lo el principio. Por ello, lo primero que debemos hacer es dejar claras las expectativas a cualquier desarrollador que se encuentre con √©l. Fundamentalmente necesitamos clarificar lo m√°ximo posible los siguientes puntos: El objetivo del proyecto. ¬øQu√© es? Por ejemplo: una kata, una librer√≠a, un framework en construcci√≥n, etc.. Las instrucciones y dependencias que necesita para ser ejecutado Un changelog accesible sobre los cambios de versiones y las versiones disponibles. Checklist de tareas antes de liberar un proyecto Open Source ","date":"10-05-2017","objectID":"/posts/2017/comun/018/:0:0","tags":["n9+","comun"],"title":"Open Source en Github","uri":"/posts/2017/comun/018/"},{"categories":["comun"],"content":"El cl√°sico README Es el lugar principal y donde cualquier desarrollador ir√° a buscar informaci√≥n. Debe estar localizado como un fichero de texto markdown en la ra√≠z del proyecto. Github hace especial √©nfasis de que cada proyecto cuente con su correspondiente README. Revisa el nombre Quiz√°s el nombre sea lo primero que creaste, al menos, cuando le dedicaste horas de trabajo en privado, pero ahora que va a ser p√∫blico debes asegurate que antes de lanzarlo no entra en conflicto con ninguno ya existente y ni mucho menos con alguna marca registrada. A√±ade una descripci√≥n al proyecto Debemos explicar el objetivo, las motivaciones por las que existe este proyecto. Tambi√©n debemos enumerar las caracter√≠sticas del proyecto, incluyendo sus funcionalidades. C√≥mo debo usarlo o integrarlo Si nos encontramos con un nuevo proyecto, lo m√°s razonables es poder ser capaces de instalarlo, hacerlo arrancar o integrar en nuestra aplicaci√≥n. As√≠ que es fundamental que buena parte del README se trate de explicar las dependencias y las instrucciones para poder usarlo/integrarlo. Y no te olvides de explicar los test de los que cuenta, seguro que alguien que quiera probar su integridad o colaborar le ser√° de ayuda lanzar los tests antes de crear una build desde el c√≥digo. Facilita la forma de descargar el artifact o la build Lo m√°s habitual es que hayamos usado algun gestor de dependencias o un sistema de construcci√≥n del proyecto, ya sea con node, maven, gradle, makefile, etc‚Ä¶ as√≠ como que el binario del proyecto se pueda descargar de alg√∫n lugar como maven central o con un sencillo npm. Automatiza todo lo que puedas Es fundamental que a parte de que lo expliques en el README cuentes con un sencillo script que facilite la vida a los desarrolladores que quieran construir por ellos mismos la build. Usa bash, gradle, ant, maven, npm, etc.. para tu proyecto. No te olvides del marketing Aprovecha para incluir algun logo o imagen que represente tu proyecto, nunca se sabe cuando alguien quiere hablar de √©l quiz√°s, alg√∫n blog. Incluir un imagen representativa de tu librer√≠as nunca es mala idea. Y si no lo tienes claro, piensa en los animales de la portadas de los libros de O‚ÄôReally. ","date":"10-05-2017","objectID":"/posts/2017/comun/018/:1:0","tags":["n9+","comun"],"title":"Open Source en Github","uri":"/posts/2017/comun/018/"},{"categories":["comun"],"content":"A√±ade una licencia Liberar algo al p√∫blico se debe hacer con cuidado. Revisa los componentes que utilizas y decide una liber√≠a acorde a tus intenciones y que cumpla los requisitos de tu proyecto. Entre las m√°s populares se encuentran la Apache 2, MIT o GPL. Si te l√≠as con los derechos y obligaciones que implican puedes consultar alguna recomendaciones de Github o alguna de estas webs: Choose a License o TLDR Legal. ","date":"10-05-2017","objectID":"/posts/2017/comun/018/:2:0","tags":["n9+","comun"],"title":"Open Source en Github","uri":"/posts/2017/comun/018/"},{"categories":["comun"],"content":"¬øC√≥mo contribuir? Esta secci√≥n va indicada especialmente para tus futuros colaboradores, as√≠ que se claro indicando una serie de issues abiertas para ir empezando, as√≠ como un peque√±o roadmap con las tareas a futuro del proyecto. Y es fundamental que dejes a disposici√≥n de los contributors un checkstyle del c√≥digo del proyecto y una serie de reglas para incorporar contribuciones como un codestyle o algun hook preparado. As√≠ como los pasos a realizar una Pull Request, ahora que Github permite los template eso deber√≠a ser obligatorio para que no se les escape ning√∫n apartado que explica en la PR. Es recomendable que lo expliques en un fichero CONTRIBUTING. ","date":"10-05-2017","objectID":"/posts/2017/comun/018/:3:0","tags":["n9+","comun"],"title":"Open Source en Github","uri":"/posts/2017/comun/018/"},{"categories":["comun"],"content":"Changelog A√±ade un listado con los cambios de cada versi√≥n. Es fundamental para tus usuarios conocer que se va incorporando progresivamente en cada ‚Äúsalto de versi√≥n‚Äù. Respeta el versionado est√°ndar utilizando adecuadamente la numeraci√≥n de MAJOR.MINOR.PATCH. Intenta separar cada cambio del siguiente modo: Nuevos componentes que has introducido, ya sean componentes, APIs nuevas, funcionalidades, etc.. Elementos deprecated, es decir, lo que en pr√≥ximas versiones ser√° eliminado y remplazado por otros elementos. No olvides indicar el que se deber√≠a usar o la estrategia de migraci√≥n. Elementos que han sido eliminados. Recuerda la retrocompatilidad. No borres nada en un cambio de versi√≥n que no haya sido anteriormente marcado como deprecated. Y por fin, los bugs que se han ido resolviendo en cada nueva versi√≥n. A√±ade si es posible la issue correspondiente para poder hacer un mejor seguimiento del problema que originaba. Seguro que alguien que se haya dado cabezazos con √©l se sentir√° reconfortado al ver que ya est√° solucionado. . ","date":"10-05-2017","objectID":"/posts/2017/comun/018/:4:0","tags":["n9+","comun"],"title":"Open Source en Github","uri":"/posts/2017/comun/018/"},{"categories":["imagen del dia"],"content":" Lagrimas de princesa Sakimichan\r. ","date":"04-05-2017","objectID":"/posts/2017/imagen/006/:0:0","tags":["n9+","ilustracion"],"title":"Imagen del dia [04.05.2017]","uri":"/posts/2017/imagen/006/"},{"categories":["dev"],"content":"¬øQu√© se considera combate t√°ctico? Supernova La definici√≥n de combate, es aquella situaci√≥n en la que dos o m√°s personajes interact√∫an entre s√≠ con el objetivo de reducir al otro. En s√≠ mismo un combate no tiene por qu√© ser necesariamente la representaci√≥n directa de un enfrentamiento f√≠sico, tambi√©n puede ser una batalla dial√©ctica. El concepto de turno de combate se puede definir como ‚Äúsucesi√≥n de momentos en los que los personajes act√∫an, que pueden ser calculado de antemano y no dependen de factores externos o aleatorios que no est√©n incluidos dentro del propio combate‚Äù. Un combate t√°ctico es una mezcla entre el primer y segundo p√°rrafo. ","date":"26-04-2017","objectID":"/posts/2017/dev/005/:1:0","tags":["n9+","dev"],"title":"Investigaci√≥n RPG-T√°ctico","uri":"/posts/2017/dev/005/"},{"categories":["dev"],"content":"Atributos de un personaje Los atributos de los personajes representan una parte vital en el dise√±o de un sistema de combate. Muchas veces se tiende a tomar como referencia un sistema que ya existe como base y realizar peque√±os cambios para adaptarlo a las necesidades del proyecto. Sin embargo, entender el porqu√© de esos atributos nos dar√° la posibilidad de crear un sistema √∫nico y m√°s rico. Antes de centrarse en los atributos debemos centrarnos en el sistema de combate y, concretamente, en qu√© partes del mismo van a ser invariables y cu√°les van a depender de los personajes. Por ejemplo, los turnos pueden estar fijados (primero aliados, luego enemigos) o pueden depender de la velocidad de los personajes; en el primer caso ser√° una constante, mientras que en el segundo habr√≠a un atributo que afecta al orden del turno (independientemente de si lo llamamos velocidad o no). Algunas variables que podemos tener en cuenta son: vida m√°xima, energ√≠a (man√° o equivalente), orden de turnos, da√±o infligido (posibilidad de separar seg√∫n elementos o fuente), da√±o reducido (porcentaje, logar√≠tmico, etc.), probabilidad de acierto o esquiva, probabilidad de cr√≠tico y multiplicador, resistencias elementales, etc‚Ä¶ Muchas de ellas pueden no aparecer en ciertos juegos y otras pueden fijarse en dise√±o, las que resten ser√°n probablemente atributos de los personajes. Cabe destacar que una variable como el da√±o no tiene por qu√© estar influenciada por un √∫nico atributo como pueda ser la fuerza f√≠sica del personaje, puede tambi√©n ser una combinaci√≥n de varios atributos y equipo. Es conveniente tener en cuenta esto cuando el juego permite al jugador distribuir puntos en sus atributos, ya que puede producir que el jugador especialice sus personajes en un n√∫mero reducido de atributos o haga una distribuci√≥n m√°s esparcida; aunque conocer esto requiere un estudio m√°s espec√≠fico de las f√≥rmulas implicadas. ","date":"26-04-2017","objectID":"/posts/2017/dev/005/:2:0","tags":["n9+","dev"],"title":"Investigaci√≥n RPG-T√°ctico","uri":"/posts/2017/dev/005/"},{"categories":["dev"],"content":"Representaci√≥n num√©rica La forma en la que se muestra la informaci√≥n al jugador es vital para transmitir ciertas sensaciones al jugador. Una parte vital en un combate son los indicadores de vida y/o energ√≠a que se muestran al jugador, que al ser valores num√©ricos suelen mostrarse con n√∫meros o barras. A continuaci√≥n se muestran algunas formas de representaci√≥n junto con sus ventajas y desventajas. Es conveniente destacar que no siempre se usa la misma representaci√≥n para los datos de los aliados y los enemigos, ya que en muchos juegos se limita la informaci√≥n sobre los enemigos. ","date":"26-04-2017","objectID":"/posts/2017/dev/005/:3:0","tags":["n9+","dev"],"title":"Investigaci√≥n RPG-T√°ctico","uri":"/posts/2017/dev/005/"},{"categories":["dev"],"content":"N√∫meros grandes vs n√∫meros peque√±os A la hora de dise√±ar un sistema de combate o una progresi√≥n num√©rica tenemos que tener en cuenta si vamos a usar n√∫meros m√°s grandes o m√°s peque√±os. No existe un valor espec√≠fico a partir del cual podemos considerar un n√∫mero grande o peque√±o, pero s√≠ hay ciertas condiciones que se cumplen al usar unos u otros. Flame Lance Los n√∫meros grandes suelen dar sensaci√≥n de epicidad; un ataque en el cual aparezca un n√∫mero largo va a parecer mucho m√°s potente que uno en el que aparezca un n√∫mero m√°s corto, independientemente del porcentaje del total de vida que inflija. Un jugador tendr√° muy complicado realizar c√°lculos con n√∫meros elevados y tender√° a obviar todos los d√≠gitos salvo los dos o tres primeros, lo que har√° que el combate parezca m√°s aleatorio y dif√≠cil de predecir. Por el contrario los n√∫meros peque√±os, aunque carecen de esa sensaci√≥n de poder, se usan para establecer al jugador el control de la situaci√≥n en todo momento. El uso de c√°lculos m√°s simples permite al jugador adelantarse varios turnos al resultado y, por tanto, dan un enfoque m√°s estrat√©gico al combate. Disgaea Como se ha mencionado anteriormente, no existe una l√≠nea que separe los n√∫meros grandes de los peque√±os, por lo que para cada juego debemos definir qu√© n√∫meros vamos a usar y seg√∫n las f√≥rmulas que dispongamos veremos qu√© sensaci√≥n producen y si hay que aumentar el rango o disminuirlo. ","date":"26-04-2017","objectID":"/posts/2017/dev/005/:3:1","tags":["n9+","dev"],"title":"Investigaci√≥n RPG-T√°ctico","uri":"/posts/2017/dev/005/"},{"categories":["dev"],"content":"Porcentajes Usar porcentajes permite al jugador centrarse en n√∫meros m√°s peque√±os y mantener un control m√°s directo de los eventos que ocurren en el combate. Sin embargo, al ser un n√∫mero decimal (ya est√© representado como entero o con dos d√≠gitos decimales) dificulta realizar c√°lculos al vuelo y el redondeo puede dar cierta sensaci√≥n de aleatoriedad. ","date":"26-04-2017","objectID":"/posts/2017/dev/005/:3:2","tags":["n9+","dev"],"title":"Investigaci√≥n RPG-T√°ctico","uri":"/posts/2017/dev/005/"},{"categories":["dev"],"content":"Barras En ciertos casos se puede optar por no mostrar ning√∫n n√∫mero y dejar simplemente una barra. Esta forma de representaci√≥n suele provocar que el jugador tenga que depender de su agudeza visual para realizar sus c√°lculos, lo que har√° que sea m√°s err√°tico e impredecible. En el caso de que una barra de vida necesite muchos golpes para vaciarse puede causar cierta angustia. ","date":"26-04-2017","objectID":"/posts/2017/dev/005/:3:3","tags":["n9+","dev"],"title":"Investigaci√≥n RPG-T√°ctico","uri":"/posts/2017/dev/005/"},{"categories":["dev"],"content":"Otras formas de representaci√≥n En algunos juegos se usan textos para indicar el estado vital de un personaje, por ejemplo: ‚ÄúMalherido‚Äù o ‚ÄúMoribundo‚Äù. Tambi√©n existe la posibilidad de no mostrar absolutamente ning√∫n indicativo al jugador. Estas opciones pueden aumentar la incertidumbre del jugador; esto provocar√° que juegue m√°s a la defensiva si los enemigos tienen un alto √≠ndice de supervivencia o muy ofensivo si los enemigos mueren r√°pido. ","date":"26-04-2017","objectID":"/posts/2017/dev/005/:3:4","tags":["n9+","dev"],"title":"Investigaci√≥n RPG-T√°ctico","uri":"/posts/2017/dev/005/"},{"categories":["dev"],"content":"El Aleatorio En un gran porcentaje de juegos existe una variaci√≥n aleatoria ya sea en determinar los resultados de ciertas acciones, en la generaci√≥n procedural del mundo o en el comportamiento de la inteligencia artificial. Sin embargo, los valores aleatorios no existen en computaci√≥n tradicional (esto puede quedar obsoleto con la llegada de la computaci√≥n cu√°ntica u otras tecnolog√≠as) y para generar valores arbitrarios se utilizan algoritmos de generaci√≥n de n√∫meros pseudoaleatorios. Aunque a d√≠a de hoy la mayor√≠a de generadores aleatorios realizan bastante bien su trabajo es conveniente estudiar sus propiedades y conocer cu√°l se va a usar en un juego. Entre otras propiedades podemos destacar: La velocidad del algoritmo: generar un n√∫mero aleatorio lleva un coste computacional y en juegos donde se requiera una cantidad elevada de los mismos es conveniente considerar la velocidad por encima de la calidad para asegurar un gameplay fluido. Distribuci√≥n de los n√∫meros: en un generador ideal todos los n√∫meros dentro del rango de posibilidades deben tener la misma probabilidad de ser generados. Hay algunos algoritmos donde n√∫meros como el cero pueden no aparecer en absoluto. Distribuci√≥n entre grupos: dado tres grupos (n√∫meros peque√±os, n√∫meros intermedios y n√∫meros grandes), en un caso id√≠lico tras un n√∫mero de un grupo existen las mismas posibilidades de generar un n√∫mero de cualquiera de los otros grupos. Antiguamente, algunos algoritmos tend√≠an a generar un n√∫mero grande tras un n√∫mero peque√±o y viceversa, lo que hace que el jugador pueda prever el resultado de un evento aleatorio. Cuando el algoritmo que se usa no realiza una distribuci√≥n correcta hay que estudiar bien las repercusiones que tendr√° estad√≠sticamente en el gameplay y c√≥mo podemos usarlo para mejorar la experiencia del jugador. En aplicaciones multiplataforma es com√∫n que cada una de las plataformas tenga su propio generador aleatorio implementado. ","date":"26-04-2017","objectID":"/posts/2017/dev/005/:3:5","tags":["n9+","dev"],"title":"Investigaci√≥n RPG-T√°ctico","uri":"/posts/2017/dev/005/"},{"categories":["dev"],"content":"¬øCu√°ndo y c√≥mo usarlo? A√±adir un factor variable al combate lo hace siempre m√°s err√°tico. En √∫ltima instancia cada variable aleatoria a√±ade una capa de complejidad a la estrategia que ha de usar el jugador y hace m√°s dif√≠cil adelantarse a los acontecimientos. En combates de larga duraci√≥n un factor aleatorio se ejecuta m√°s veces y por tanto tendr√° una tendencia, mientras que en combates m√°s cortos la repercusi√≥n es mucho mayor. Usos frecuentes del aleatorio son: Elegir contra qu√© grupo de enemigos se enfrenta el jugador. Realizar una variaci√≥n en el da√±o infligido, por ejemplo +/- 10%. Probabilidad de esquiva y cr√≠tico. Inteligencia artificial de los enemigos. Juego T√°ctico Cada vez que apliquemos el aleatorio debemos tener en cuenta la repercusi√≥n que tendr√°, ya que forzar al jugador a depender de √©l para ganar una batalla podr√≠a suponer mucha frustraci√≥n, mientras que no usar ning√∫n tipo de aleatorio puede derivar en combates muy previsibles y puede aburrir a un jugador que busque una experiencia menos estrat√©gica. ","date":"26-04-2017","objectID":"/posts/2017/dev/005/:4:0","tags":["n9+","dev"],"title":"Investigaci√≥n RPG-T√°ctico","uri":"/posts/2017/dev/005/"},{"categories":["dev"],"content":"Savescum como metamec√°nica Se conoce como savescum al abuso del sistema de guardar/cargar partida para alterar el siguiente valor aleatorio. Aunque muchos puedan considerar savescum como un bug o un error de dise√±o no tiene necesariamente por qu√© serlo. ¬øAlguna vez has llegado a un punto en el juego donde todo depende del resultado de una √∫nica acci√≥n? Ese momento donde si no consigues acertar tienes que reiniciar horas y horas de juego. Pues bien, ah√≠ es cuando un jugador puede dejar ese juego de lado por evitar invertir su valioso tiempo en volver a pasarse una secci√≥n concreta, a no ser que pueda salvarse cargando la partida y volviendo a intentar esa acci√≥n. Hay gente que argumentar√° que dejar una v√≠a de savescum llevar√° al jugador a guardar y cargar hasta que todos los resultados salgan como quiere. Yo opino que la mayor√≠a no perder√° el tiempo salvo en decisiones realmente vitales, pero oye, si lo hacen es porque quieren jugar as√≠ al juego, as√≠ que tampoco veo un problema. Ahora bien, es posible que la experiencia de juego busque ser m√°s dura con el jugador o que sea importante arrastrar esos fallos durante la historia para transmitir ciertas sensaciones. En ese caso deber√≠amos deshacernos del savescum. ¬øC√≥mo hacemos eso? Lo m√°s f√°cil es guardar la semilla del generador aleatorio junto con los datos del juego y cargar siempre la misma semilla. En juegos m√°s complejos guardar la semilla no siempre da los resultados que queremos. Si puedes seleccionar una acci√≥n distinta que no requiera aleatorio est√°s guardando ese valor para el siguiente, que bien podr√≠a ser el ataque de un enemigo. O en el caso de poder seleccionar qu√© personaje usar podr√≠as decidir qui√©n se queda con la ‚Äúmala tirada‚Äù. Por suerte hay alternativas: usar un generador aleatorio por personaje es la m√°s simple de ellas; el resto depende del proyecto y la creatividad que tenga el equipo. Final Fantasy Tactics Tambi√©n es importante destacar que el savescum puede afectar a cualquier resultado aleatorio, no solamente a resultados de las acciones del jugador. Algunos casos son: encuentros aleatorios, comportamientos de enemigos, objetos aleatorios de un cofre, subidas de nivel que dependan del aleatorio, ‚Ä¶ Conviene revisar qu√© savescums es necesario evitar y cu√°les se pueden dejar pasar. En casos en los que se bloquee el uso de savescums es necesario asegurarse que el jugador no puede quedar atascado y tener que reiniciar el juego desde cero o una secci√≥n larga. El uso de autoguardado en varios slots es una forma bastante buena para resolver este inconveniente. Al final, decidir qu√© savescums hay que bloquear y cu√°les se pueden (o se quieren) dejar usar va a depender del tipo de juego en cuesti√≥n y del p√∫blico al que va dirigido. Por ejemplo, un juego con permadeath por dise√±o evitar√° lo m√°ximo posible los savescums, mientras que otro en cuyo p√∫blico potencial hay speedrunners puede ser m√°s permisivo. ","date":"26-04-2017","objectID":"/posts/2017/dev/005/:5:0","tags":["n9+","dev"],"title":"Investigaci√≥n RPG-T√°ctico","uri":"/posts/2017/dev/005/"},{"categories":["dev"],"content":"Progresi√≥n del juego En la mayor√≠a de juegos de rol existe una progresi√≥n de poder en los personajes y enemigos envueltos en el combate. La forma de progresi√≥n m√°s habitual es el crecimiento de los atributos de los personajes cuando suben de nivel o cuando se alcanza cierto punto en el juego. Estas f√≥rmulas se pueden usar para aumentar los atributos o, en caso de que el jugador pudiera decidir qu√© atributos suben, el n√∫mero de puntos disponibles o el coste de cada atributo seg√∫n su valor actual. Al usar estas f√≥rmulas siempre podemos combinarlas entre s√≠ o modificarlas sumando valores o multiplicando el resultado o, en general, usando cualquier operaci√≥n que veamos apropiada. Siempre hay que recordar que el crecimiento de una funci√≥n matem√°tica viene determinado por el mayor crecimiento dentro de sus t√©rminos. Las diferentes progresiones que aparecen a continuaci√≥n son s√≥lo algunos ejemplos existentes. Es m√°s, es posible incluso combinar diferentes progresiones en el mismo juego; por ejemplo: progresi√≥n lineal al subir de nivel y unos valores prefijados cuando el personaje llega a cierto punto en la historia. ","date":"26-04-2017","objectID":"/posts/2017/dev/005/:6:0","tags":["n9+","dev"],"title":"Investigaci√≥n RPG-T√°ctico","uri":"/posts/2017/dev/005/"},{"categories":["dev"],"content":"Progresiones matem√°ticas Progresi√≥n lineal [y=x] Progresi√≥n Lineal La progresi√≥n lineal es aquella en la que en cada nivel los atributos se incrementan en un valor fijo. Es una progresi√≥n sencilla que deja entrever f√°cilmente las repercusiones de una subida de nivel. Cabe destacar que no es obligatorio usar valores enteros (por ejemplo: +2 por nivel) y el uso de decimales como +1,5 por nivel dar√≠a como resultado que en niveles impares un atributo entero suba 1 punto y en niveles pares 2 puntos. Progresi√≥n exponencial [y=x^a] Progresi√≥n Exponencial En una progresi√≥n exponencial (y=x^a) el crecimiento se va acelerando si a \u003e 1 y decelerando si 0 \u003c a \u003c 1, siendo a el exponente. En el caso de que a fuese 1 estar√≠amos hablando de una progresi√≥n lineal. En la imagen podemos observar en azul y=x¬≤, en rojo y=x^1.2 y en verde y=x^0.5 (ra√≠z cuadrada de x). En el caso de crecimiento acelerado los valores comenzar√°n siendo peque√±os d√°ndole cierto control al jugador y acabar√°n siendo bastante grandes y generando sensaci√≥n de epicidad. Una subida de nivel en una progresi√≥n exponencial acelerada supone un incremento sustancial en los atributos. Mientras tanto, con crecimiento decelerado los primeros niveles son los que suponen el mayor incremento de atributos y las subidas de nivel posteriores tienen menos importancia. Como el crecimiento es menor en niveles altos pone el foco en la estrategia en lugar de la fuerza bruta. Progresi√≥n logar√≠tmica [y=ln(x)] Progresi√≥n logar√≠tmica En las progresiones logar√≠tmicas vemos una aceleraci√≥n no uniforme en la que la mayor progresi√≥n se realiza en los primeros niveles y se estabiliza muy pronto manteniendo un crecimiento bajo. En cierto modo el jugador las percibir√° de manera similar a las exponenciales con el exponente menor que 1. El crecimiento de un logaritmo se puede personalizar cambiando la base del mismo (v√©ase diferencia entre logaritmo en base 10 y logaritmo neperiano). Series matem√°ticas Existen a su vez numerosas series matem√°ticas que podemos usar y que no siguen una f√≥rmula concreta. Un ejemplo podr√≠a ser la serie de Fibonacci, donde se suman los dos √∫ltimos n√∫meros obtenidos en la serie para calcular el siguiente dando el siguiente resultado: 1, 1, 2, 3, 5, 8, 13, 21, 34, ‚Ä¶ Otro ejemplo podr√≠a ser sumar la mitad menos 1 del n√∫mero obtenido anteriormente: 10, 14, 20, 29, 42, 62, ‚Ä¶ Hay que tener cuidado con ciertas series matem√°ticas ya que hay algunas que computacionalmente necesitan hacerse de manera recursiva y pueden llegar a suponer una sobrecarga en el procesador si se buscan n√∫meros frecuentemente. Crecimiento aleatorio Una forma de aumentar los atributos es sumar un valor aleatorio en un rango determinado por nivel. En este caso, para un n√∫mero elevado de niveles, podremos inferir un valor en alto nivel a trav√©s de una aproximaci√≥n estad√≠stica. Por ejemplo: si cada nivel un atributo sube 1, 2 o 3 puntos estad√≠sticamente en un punto infinito habr√° subido 2 ([1+2+3]/3) puntos por nivel. Sin embargo, en un n√∫mero finito y reducido podemos encontrarnos con que los jugadores pueden experimentar m√°s resultados peque√±os produciendo personajes m√°s d√©biles o una mayor concentraci√≥n de resultados altos con personajes m√°s poderosos. Es posible que el jugador experimente mala suerte en el aleatorio y un mal crecimiento irreversible de uno o varios personajes, lo cual le puede llevar a frustrarse enormemente. En el caso de que busquemos una tendencia uniforme podemos balancear el aleatorio hacia un valor central. Esto se puede hacer aumentando la probabilidad de obtener un valor aleatorio mayor cuando el valor del atributo est√© por debajo del esperado o tender hacia n√∫meros menores en el caso contrario. En ocasiones es √∫til considerar si debemos balancear s√≥lo positivamente para evitar una posible frustraci√≥n al jugador a pesar de que los personajes resultantes estad√≠sticamente ser√°n m√°s poderosos. Progresiones no-matem√°ticas Existe tambi√©n la posibilidad de usar progresiones que no se pueden tr","date":"26-04-2017","objectID":"/posts/2017/dev/005/:7:0","tags":["n9+","dev"],"title":"Investigaci√≥n RPG-T√°ctico","uri":"/posts/2017/dev/005/"},{"categories":["dev"],"content":"Curva de dificultad No es normal en un juego que s√≥lo los personajes aliados crezcan en poder, eso har√≠a que la dificultad del juego disminuyese progresivamente. Lo m√°s habitual es que la dificultad tienda a crecer conforme el jugador avanza y por ello los enemigos se hacen m√°s fuertes o aparecen enemigos m√°s poderosos. Uno de los puntos m√°s dif√≠ciles de balancear al hacer un combate por turnos. Para facilitar esto podemos calcular la curva de dificultad. El valor de la dificultad se puede obtener restando al crecimiento de los enemigos el de los personajes aliados y el crecimiento de la dificultad se calcula como la divisi√≥n entre las progresiones de los enemigos y los aliados. N√≥tese que los enemigos deben tener un crecimiento mayor para que la dificultad aumente. A continuaci√≥n un ejemplo: . Suponemos un crecimiento de m*(Log(x+1,3)+10) (en verde) para los atributos de los personajes del jugador, donde m es un multiplicador (un b√°rbaro tiene m√°s fuerza que un mago, por ejemplo). El crecimiento de los enemigos es m*(x^0.7+5) (en rojo). Con esos datos obtenemos la dificultad (en azul) y su crecimiento (en azul claro). Podemos observar en la gr√°fica que existe un punto de inflexi√≥n donde los enemigos pasan a ser m√°s poderosos que el jugador; dependiendo de la dificultad general del juego ese punto puede ser el final del tutorial o el punto a partir del cual el jugador necesita de estrategia para vencer a cada oponente. ","date":"26-04-2017","objectID":"/posts/2017/dev/005/:8:0","tags":["n9+","dev"],"title":"Investigaci√≥n RPG-T√°ctico","uri":"/posts/2017/dev/005/"},{"categories":["dev"],"content":"Progresi√≥n variable: objetos y habilidades El efecto que produce el equipo o las habilidades de los personajes en el combate puede tener un factor m√°s que determinante en la dificultad del mismo. Instancias donde un equipo de un valor o bonificador percentual concreto y est√© accesible a partir de cierto nivel o cierto punto en la historia son f√°ciles de calcular, ya que basta con agruparlos en una f√≥rmula y sumarlos a la f√≥rmula de progresi√≥n del jugador. Sin embargo, hay casos en los que determinar el impacto de una habilidad que, por ejemplo, haga da√±o seg√∫n el dinero acumulado o tenga una f√≥rmula especialmente compleja o con gran factor aleatorio hacen que los c√°lculos sean tremendamente complicados o imposibles. Tambi√©n puede ser darse la misma situaci√≥n cuando usamos estados alterados muy variopintos y con cierta frecuencia en el combate. Para simplificar el tema, debemos suponer que siempre que el jugador tenga acceso a objetos, equipos o habilidades muy dispares la progresi√≥n ser√° mayor de lo esperado y, por lo tanto, la curva dificultad se ver√° afectada. ","date":"26-04-2017","objectID":"/posts/2017/dev/005/:9:0","tags":["n9+","dev"],"title":"Investigaci√≥n RPG-T√°ctico","uri":"/posts/2017/dev/005/"},{"categories":["dev"],"content":"Efecto de la IA en la dificultad La inteligencia artificial de los personajes controlador por el ordenador tiene un gran efecto en la dificultad del juego. Determinar el factor exacto en el cual afecta es una tarea que puede requerir much√≠sima destreza matem√°tica pero podemos tomar una aproximaci√≥n. . Sabemos que en todo turno hay una acci√≥n a ejecutar por la IA que asegura la mayor posibilidad de ganar el combate (o de dejar al jugador en peores condiciones para el siguiente); a dicha acci√≥n la llamaremos acierto y al resto fallo. Con esto en mente podemos determinar el porcentaje de acierto de una IA; por ejemplo, si los enemigos usan arbitrariamente una acci√≥n de cuatro que tienen disponibles, la IA tendr√° un 25% de acierto. En casos con inteligencia artificial m√°s avanzada es conveniente aproximar un porcentaje de acierto para tenerlo en cuenta. Y, en el caso de que el combate incluya varios personajes por cada equipo, tendremos que tener en cuenta tambi√©n en el acierto si ejecuta la acci√≥n contra el objetivo apropiado. Determinar si la dificultad aumenta o disminuye una vez conocemos el porcentaje de acierto es imposible, ya que debemos compararlo con la estrategia que use el jugador. Si el porcentaje de acierto del jugador es menor que el de la IA la dificultad se ver√° aumentada y viceversa. Aunque una acci√≥n se considere como fallo sigue teniendo un efecto en el combate por lo que balancear enemigos individuales se convierte en un tema m√°s complejo. ","date":"26-04-2017","objectID":"/posts/2017/dev/005/:10:0","tags":["n9+","dev"],"title":"Investigaci√≥n RPG-T√°ctico","uri":"/posts/2017/dev/005/"},{"categories":["dev"],"content":"T√©cnicas de balance de dificultad Lo mejor para asegurar que el juego est√° balanceado es asegurarse de que partimos de una progresi√≥n como las que se han descrito anteriormente. T√©cnicamente, si un punto en un atributo vale lo mismo que un punto en otro, es decir, tienen la misma repercusi√≥n en el combate, el juego estar√° completamente balanceado. Sin embargo este no suele el caso, por lo que debemos tomar cartas en el asunto. El mejor m√©todo con diferencia es ‚Äúprueba y error‚Äù. Como su nombre indica, consiste en probar todos los casos posibles y determinar cu√°ndo un enemigo es demasiado poderoso o demasiado d√©bil y corregir los valores que se consideren oportunos. Por supuesto el problema aparece con la gran cantidad de horas humanas que se tienen que invertir, por ello se proponen otras t√©cnicas automatizadas. ","date":"26-04-2017","objectID":"/posts/2017/dev/005/:11:0","tags":["n9+","dev"],"title":"Investigaci√≥n RPG-T√°ctico","uri":"/posts/2017/dev/005/"},{"categories":["dev"],"content":"Comparaci√≥n entre enemigos Para determinar si, efectivamente, la fuerza de los enemigos es progresivamente mayor podemos recurrir a comparar cada uno de los enemigos con todos los dem√°s. Si la IA o el propio combate tienen un factor aleatorio debemos hacer varios combates para hallar una estad√≠stica para cada enemigo. En un caso id√≠lico dicha comparaci√≥n nos dar√° que para cualquier enemigo el porcentaje de victoria con enemigos de menor nivel ser√° mayor del 50% y subir√° seg√∫n la diferencia de nivel. Justo lo contrario contra enemigos de mayor nivel. Por desgracia, los casos id√≠licos y las situaciones perfectas se dar√°n en contadas ocasiones. Cualquier factor aleatorio, que un enemigo sea especialmente fuerte contra otro o que est√©s comparando un boss con un enemigo com√∫n, entre otras circunstancias, pueden provocar fuertes variaciones en el porcentaje de victorias. Como resultado de todo lo mencionado anteriormente: esta t√©cnica puede usarse para comparar enemigos comunes (excluyendo bosses, minibosses y dem√°s) y asegurarse que no hay ninguno especialmente desbalanceado. ","date":"26-04-2017","objectID":"/posts/2017/dev/005/:12:0","tags":["n9+","dev"],"title":"Investigaci√≥n RPG-T√°ctico","uri":"/posts/2017/dev/005/"},{"categories":["dev"],"content":"Autobalance gen√©tico Se trata de un m√©todo t√©cnicamente muy complejo pero que puede adaptarse para conseguir cualquier resultado que se busque. Al ser una t√©cnica que requiere el apoyo de un programador h√°bil versado en el uso de algoritmos gen√©ticos u otras t√©cnicas de inteligencia artificial avanzadas s√≥lo se dar√°n unas pautas concretas. Para cada enemigo (o grupo de ellos seg√∫n nivel) se toma un grupo de aliados (o aliado) al que se prev√© que se enfrentar√°n seg√∫n su nivel o posici√≥n en la trama. Para conseguir el mejor efecto los enemigos deben tener inicialmente unos valores exagerando sus virtudes y defectos. El algoritmo gen√©tico (u otro elegido por el programador) comenzar√° a realizar simulaciones de combate y aproximando los atributos de los enemigos hasta que la batalla contra el grupo de aliados propuesto se acerque lo m√°ximo posible a un empate. A partir de ese momento se pueden usar modificadores porcentuales para hacer a ciertos enemigos m√°s o menos poderosos (como minibosses). ","date":"26-04-2017","objectID":"/posts/2017/dev/005/:13:0","tags":["n9+","dev"],"title":"Investigaci√≥n RPG-T√°ctico","uri":"/posts/2017/dev/005/"},{"categories":["dev"],"content":"F√≥rmulas de ataque/defensa Existen multitud de f√≥rmulas que podemos usar para determinar los efectos de las habilidades o ataques y, seguramente, tendr√°n un gran impacto en el juego. Por esto es important√≠simo tener en cuenta los siguientes detalles: Cuando una habilidad puede fallar y tiene un porcentaje de acierto, estad√≠sticamente el da√±o de esa habilidad es el da√±o total multiplicado por el porcentaje de acierto. El riesgo de usar esa habilidad depende del porcentaje de fallo. El valor del da√±o puede calcularse a partir de valores de ataque y defensa de los personajes y puede tener un crecimiento distinto a la vida de los mismos. Por ejemplo, si los atributos crecen de manera lineal, la vida se calcula como el cuadrado de uno de los atributos y el da√±o como el atributo de fuerza elevado a 1.5; veremos c√≥mo el n√∫mero de ataques necesarios para acabar con un personaje aumenta conforme crece el nivel. F√≥rmulas sencillas como [da√±o=ataque-defensa] permiten al jugador prever el resultado y hace el combate m√°s estrat√©gico, mientras que f√≥rmulas que presenten variaciones aleatorias o f√≥rmulas m√°s complejas lo hacen m√°s err√°tico e imprevisible. Es interesante determinar el n√∫mero de turnos que un ataque b√°sico necesita para acabar con un personaje. Este n√∫mero nos da una idea de la longitud del combate y podremos estimar si ser√° muy tedioso y forzar√° al jugador a usar habilidades m√°s poderosas para no aburrirse o si es demasiado corto. Para un RPG por turnos cl√°sicos n√∫meros entre 2 y 10 son habituales, mientras que el n√∫mero puede ser mayor en juegos m√°s din√°micos. Si usamos una f√≥rmula como [da√±o=ataque-defensa], ataque y defensa pueden ser valores calculados a partir de muchos atributos, variables o variaciones aleatorias, no tienen por qu√© ser necesariamente un √∫nico atributo. Existe la posibilidad de usar la defensa como una reducci√≥n porcentual de da√±o. En ese caso necesitamos una f√≥rmula para calcularlo. Si la defensa base tiene un l√≠mite fijo podemos usar un logaritmo o una f√≥rmula exponencial por ejemplo, mientras que si puede crecer indefinidamente es recomendable que la propia f√≥rmula tenga un l√≠mite para evitar una reducci√≥n completa del da√±o a partir de cierto valor de defensa. Independientemente de las decisiones que se tomen es especialmente √∫til comprobar valores medios y extremos en una hoja de c√°lculo para asegurarse de que las f√≥rmulas elegidas funcionan seg√∫n lo esperado. ","date":"26-04-2017","objectID":"/posts/2017/dev/005/:14:0","tags":["n9+","dev"],"title":"Investigaci√≥n RPG-T√°ctico","uri":"/posts/2017/dev/005/"},{"categories":["dev"],"content":"Tempo La forma en la que ejecutamos los turnos es una parte vital dentro del dise√±o de un combate por turnos. Seg√∫n el m√©todo que utilicemos podremos observar un combate m√°s estrat√©gico y pausado o mucho m√°s din√°mico y ca√≥tico. ","date":"26-04-2017","objectID":"/posts/2017/dev/005/:15:0","tags":["n9+","dev"],"title":"Investigaci√≥n RPG-T√°ctico","uri":"/posts/2017/dev/005/"},{"categories":["dev"],"content":"Turnos por equipo Es la variante m√°s pausada y estrat√©gica ya que da al jugador todo el tiempo que necesite para plantearse las acciones de los personajes que controla y sus consecuencias. Existen un par de variaciones que pueden usarse en estos casos: Turnos libres: el jugador puede seleccionar unidades y realizar turnos individuales libremente en el orden que elija. Esto aumenta el factor estrat√©gico especialmente cuando las acciones de un personaje alteran las posibilidades del siguiente o existen combinaciones que favorezcan un orden concreto de habilidades. Turnos prefijados: el orden de los turnos dentro de un equipo est√° prefijado o se fija al inicio del turno. Mientras que puede dar lugar a factores estrat√©gicos interesantes hay que tener cuidado porque no poder seleccionar el orden puede frustrar al jugador. Puntos de comando: el jugador tiene a su disposici√≥n un n√∫mero de puntos de comandos cada turno y puede usarlos para usar habilidades de los personajes o activar turnos de los mismos. Esta f√≥rmula puede o no permitir turnos dobles de un personaje. ","date":"26-04-2017","objectID":"/posts/2017/dev/005/:16:0","tags":["n9+","dev"],"title":"Investigaci√≥n RPG-T√°ctico","uri":"/posts/2017/dev/005/"},{"categories":["dev"],"content":"Combate por turnos puro En un combate por turnos puro el orden de los turnos viene prefijado al inicio del combate (normalmente usando un atributo que marca la velocidad en combate) y es inalterable a lo largo del mismo. Los turnos se comportan de manera c√≠clica. Existe la posibilidad de mostrar al jugador el orden de turnos durante el combate, esto hace que tenga la posibilidad de elaborar estrategias m√°s complejas. Este sistema presenta m√°s dinamicidad que los turnos por equipo. ","date":"26-04-2017","objectID":"/posts/2017/dev/005/:17:0","tags":["n9+","dev"],"title":"Investigaci√≥n RPG-T√°ctico","uri":"/posts/2017/dev/005/"},{"categories":["dev"],"content":"Alterar el orden de turnos Podemos tomar como base un combate por turnos puro y alterar durante el combate el orden de dichos turnos. Una forma de hacerlo es a√±adir a cada habilidad un coste de tiempo o energ√≠a y hacer que cuanto mayor sea ese valor m√°s tarde recibir√° el personaje su turno. Tambi√©n es posible que el orden de los turnos cambia cuando un personaje resulta paralizado o cambia su velocidad. Uno de los problemas de alterar el orden de los turnos es que puedan existir turnos dobles para algunos personajes. Es conveniente barajar si puede existir o no esa posibilidad si se decide alterar el orden. . ","date":"26-04-2017","objectID":"/posts/2017/dev/005/:18:0","tags":["n9+","dev"],"title":"Investigaci√≥n RPG-T√°ctico","uri":"/posts/2017/dev/005/"},{"categories":["dev"],"content":"Combate por turnos activo En el combate por turnos activo existe una barra (visible o no) por cada personaje que va rellen√°ndose en funci√≥n de su velocidad (o valor calculado equivalente). Cuando dicha barra se llena el personaje puede realizar su turno. Los cambios en la velocidad afectan instant√°neamente al combate desde el momento que son aplicados y alterar√°n el orden de turnos consiguientemente. Mientras el jugador est√° seleccionando una acci√≥n las barras de turno pueden o no incrementarse. Si lo hacen puede haber turnos ‚Äúsimult√°neos‚Äù. En el caso de que dos personajes del jugador est√©n activos al mismo tiempo se puede dotar al jugador la posibilidad de seleccionar con cu√°l de ellos actuar, alterando as√≠ el orden de turnos. Cuando llega el turno de un enemigo mientras el jugador est√° seleccionando la acci√≥n de uno de sus personajes, el enemigo puede actuar instant√°neamente (modo activo) o puede esperar a que el jugador seleccione la acci√≥n y se ejecute (modo espera). El combate por turnos activo en modo activo es la variante del combate por turnos m√°s din√°mica y, para muchos jugadores, ni siquiera es considerada como combate por turnos. Mientras que en modo espera s√≠ se mantiene la sensaci√≥n del turno en su totalidad. ","date":"26-04-2017","objectID":"/posts/2017/dev/005/:19:0","tags":["n9+","dev"],"title":"Investigaci√≥n RPG-T√°ctico","uri":"/posts/2017/dev/005/"},{"categories":["dev"],"content":" . . ","date":"26-04-2017","objectID":"/posts/2017/dev/005/:20:0","tags":["n9+","dev"],"title":"Investigaci√≥n RPG-T√°ctico","uri":"/posts/2017/dev/005/"},{"categories":["dev"],"content":"A* Los algoritmos de b√∫squeda nacen por la necesidad de crear un mecanismo de navegaci√≥n aut√≥noma, bien sea de robots, coches, o ¬†personajes en un videojuego. Algunos de los m√°s conocidos son A*, LPA*, o D*. . El algoritmo de b√∫squeda A* (pronunciado ‚ÄúA asterisco‚Äù o ‚ÄúA start‚Äù) se clasifica dentro de los algoritmos de b√∫squeda. El algoritmo A encuentra, siempre y cuando se cumplan unas determinadas condiciones, el camino de menor coste* entre un nodo origen y uno objetivo. La complejidad computacional del algoritmo est√° √≠ntimamente relacionada con la calidad de la heur√≠stica que se utilice en el problema. En el caso peor, con una heur√≠stica de p√©sima calidad, la complejidad ser√° exponencial, mientras que en el caso mejor, con una buena, el algoritmo se ejecutar√° en tiempo lineal. Para que esto √∫ltimo suceda, se debe cumplir que donde h‚Äô es una heur√≠stica √≥ptima para el problema, como por ejemplo, el coste real de alcanzar el objetivo. . ","date":"23-04-2017","objectID":"/posts/2017/dev/024/:1:0","tags":["n9+","dev"],"title":"Algoritmos de b√∫squeda","uri":"/posts/2017/dev/024/"},{"categories":["dev"],"content":"Dijkstra El algoritmo de Dijkstra, tambi√©n llamado algoritmo de caminos m√≠nimos, es un algoritmo para la determinaci√≥n del camino m√°s corto dado un v√©rtice origen al resto de los v√©rtices en un grafo con pesos en cada arista. La idea subyacente en este algoritmo consiste en ir explorando todos los caminos m√°s cortos que parten del v√©rtice origen y que llevan a todos los dem√°s v√©rtices; cuando se obtiene el camino m√°s corto desde el v√©rtice origen, al resto de v√©rtices que componen el tablero, el algoritmo se detiene. El algoritmo es una especializaci√≥n de la b√∫squeda de costo uniforme, y como tal, no funciona en tableros con aristas de coste negativo (al elegir siempre el nodo con distancia menor, pueden quedar excluidos de la b√∫squeda nodos que en pr√≥ximas iteraciones bajar√≠an el costo general del camino al pasar por una arista con costo negativo). Una de sus aplicaciones m√°s importantes reside en el campo de la telem√°tica, gracias a el, podemos resolver caminos con muchos nodos, los cuales serian muy complicados de hacer sin dicho algoritmo, encontrando as√≠ las rutas m√°s cortas entre un origen y todos los destinos en una red. . . ","date":"23-04-2017","objectID":"/posts/2017/dev/024/:2:0","tags":["n9+","dev"],"title":"Algoritmos de b√∫squeda","uri":"/posts/2017/dev/024/"},{"categories":["comun"],"content":"S√≥lo escuchar las palabras ‚ÄúBackground‚Äù sin ver lo que significa es muy confuso. En resumen, hace que la muestra de ilustraciones y pantalla del perfil sea transparente, que pueda ver el fondo que ha solicitado. En realidad, no son transparentes, solo es el recorte del fondo perfectamente alineado. Aqu√≠ est√° un ejemplo de lo que se ver√° despu√©s de finalizar: . Puede parecer dif√≠cil, pero es sorprendentemente f√°cil. Este proceso no funciona bien en todos los or√≠genes, sin embargo, escoger el m√°s adecuado es el primer paso y es posiblemente el paso m√°s importante. Dado que este se centra en las vitrinas que est√°n situadas en el centro, tiene que conseguir algo con contenido localizado all√≠. A continuaci√≥n se presentan dos fondos, un fondo malo arriba y uno bueno abajo. Usted no quiere terminar con secciones completamente en negro, a veces es inevitable, pero debes minimizarlo tanto como sea posible. Nota: Para utilizar dos vitrinas a la vez se necesita estar al mismo nivel o por encima de 20, si est√° por debajo de este es posible que desee omitir la mayor parte de la gu√≠a. . . ","date":"10-04-2017","objectID":"/posts/2017/comun/017/:0:0","tags":["n9+","comun"],"title":"Crear fondos de Steam","uri":"/posts/2017/comun/017/"},{"categories":["comun"],"content":"El recorte El recorte autom√°tico gracias a ‚ÄâTrueCarry, es el proceso de obtenci√≥n de todas las herramientas necesarias para que el fondo sea automatizado. Es bastante sencillo de hacer, s√≥lo tiene que ir primero a https://steam.design/ y carga una p√°gina de perfil de steam. Para cambiar la imagen que est√° en el fondo basta con acceder a su cuenta de steam en la parte superior derecha y cargar√° todos los fondos en su inventario. El ‚ÄâThe Oddball hizo un script para Tapermokey que pone un bot√≥n en todas las p√°ginas de fondo del mercado y las previsualizaciones de inventario. Simplemente instalalo y se vincular√° directamente a ese fondo. Tambi√©n puede utilizar una URL si as√≠ lo desea, s√≥lo tiene que ir a la p√°gina de mercado o de inventario para ver el fondo y hacer clic en Ver tama√±o completo, copiar y pegar la URL en la barra de URL personalizada. Una vez que se selecciona el fondo se puede cambiar el tama√±o de las vitrinas por el acaparamiento de la parte inferior de la imagen m√°s grande o haciendo clic en el cambio de tama√±o y mediante el control deslizante. Si tambi√©n tiene otras vitrinas puede moverlos alrededor puede conseguir la posici√≥n perfecta si est√° en el sistema. Despu√©s de eso esta hecha la descarga y va a recortar el fondo, empacar en un archivo .zip y descarga a la vez. R√°pido, sencillo y eficaz. El recorte manual (Ahora utilice https://steam.design/ ) . . ","date":"10-04-2017","objectID":"/posts/2017/comun/017/:1:0","tags":["n9+","comun"],"title":"Crear fondos de Steam","uri":"/posts/2017/comun/017/"},{"categories":["comun"],"content":" . ","date":"10-04-2017","objectID":"/posts/2017/comun/016/:0:0","tags":["n9+","comun"],"title":"Subir Artworks a Steam","uri":"/posts/2017/comun/016/"},{"categories":["comun"],"content":"Para el Long Artworks https://steam.design/ puede hacer los Long Artworks ahora! Simplemente haga clic en el bot√≥n en la parte superior derecha. . ","date":"10-04-2017","objectID":"/posts/2017/comun/016/:1:0","tags":["n9+","comun"],"title":"Subir Artworks a Steam","uri":"/posts/2017/comun/016/"},{"categories":["comun"],"content":"Cuidado Cualquier obra que cargue con este m√©todo ahora se extender√° hasta que la anchura sea igual al tama√±o de la web. Lo que significa que recomendamos que no suba gifs con un ancho menor de 506px. . Abrir enlace en chrome (otros navegadores probablemente funcionar√°n si usted tiene acceso a su consola) y seleccione su gif ‚ÄòSeleccione su archivo para el artwork‚Äô. http://steamcommunity.com/sharedfiles/edititem/767/3/ . . Cuando se puede ver el gif en la p√°gina; haga clic derecho en cualquier lugar de la p√°gina y revisar o inspeccionar elemento. . . Haga clic en la consola en la parte superior del men√∫ -\u003e elemento de inspeccionar y escribir esta l√≠nea: document.getElementsByName(\"image_width\")[0].value = 1, 000; document.getElementsByName(\"IMAGE_HEIGHT\")[0].value = 1; O si lo desea cargar como captura de pantalla: document.getElementsByName(\"image_width\")[0].value = 1, 000; document.getElementsByName(\"IMAGE_HEIGHT\")[0].value = 1; document.getElementsByName(\"file_type\")[0].value = 5; Pulsa enter despu√©s de pegarlo. . . Ahora simplemente darle un t√≠tulo y una descripci√≥n, Clicar en ‚ÄúCertifico que he creado esta obra de arte‚Äù y haga ‚ÄúGuardar y continuar‚Äù . . ","date":"10-04-2017","objectID":"/posts/2017/comun/016/:2:0","tags":["n9+","comun"],"title":"Subir Artworks a Steam","uri":"/posts/2017/comun/016/"},{"categories":["comun"],"content":" . Los siguientes pasos explicar√°n c√≥mo subir archivos GIF (y PNG) como las capturas de steam. Este es tambi√©n el m√©todo m√°s r√°pido y m√°s f√°cil de subir capturas de pantalla personalizados. . Abrir este link en un navegador y hacer clic derecho - inspeccionar elemento . . Ir a la consola y pegar el siguiente c√≥digo: document.getElementsByName(\"file_type\")[0].value = 5; y pulsa enter. . . Cargar el archivo gif, darle un t√≠tulo y una descripci√≥n. . . Marque la casilla ‚ÄúCertifico que he creado esta obra de arte‚Äù y haga clic en ‚ÄúGuardar y continuar‚Äù. . Curse . ","date":"08-04-2017","objectID":"/posts/2017/comun/015/:0:0","tags":["n9+","comun"],"title":"Subir gifs al perfil de Steam","uri":"/posts/2017/comun/015/"},{"categories":["comun"],"content":" Titular Neregate cierra a medio mes Bueno pues aqu√≠ esta, neregate cierra, para los que no lo sepan, neregate a sido una web administrada por Zana, un usuario que monto desde 0 un blog que en principio estaba destinado a ser un peque√±o sitio para publicar anime, cosas sobre programaci√≥n y alg√∫n que otro log, pero que poco a poco en estos 7 a√±os se ha convertido en una referencia para ver muchas cosas. Conocer√°s los t√≠picos chart que van rondando por internet sobre las temporadas de anime pr√≥ximas, pues son sacadas de aqu√≠, el autor, Zana se creo una herramienta para crear chart desde la web, entonces cada temporada investigaba en todos los sitios de noticias de anime empezando por MyAnimeList hasta llegar a Livechart, creando un chart personal que publicaba antes de las nuevas temporadas. Tambi√©n creaba ciertas herramientas, como redireccionadores o diferentes sitios de estad√≠sticas en open source. Esta semana Zana a posteado en su blog que Neregate cierra , √∫ltimamente tiene mucho trabajo, y despu√©s de tantos a√±os no le llena mucho seguir con neregate, claro esta que lo a estado pensando mucho tiempo. Tambi√©n hay que ver que el es el √∫nico posteador (quitando el foro), por lo que tiene que mantener el contenido el mismo y pagar claramente lo que con ello viene. De momento su cierre esta previsto para el 15 de abril de 2017. A la espera de nuevas webs de referencia. . ","date":"04-04-2017","objectID":"/posts/2017/comun/014/:0:0","tags":["n9+","comun"],"title":"Neregate cierra sus puertas","uri":"/posts/2017/comun/014/"},{"categories":["dev"],"content":"De esta manera tus jugadores con tarjetas Nvidia podr√°n usar esta caracter√≠stica sin ning√∫n problema. GeForce Experience es una herramienta de las tarjetas Nvidia que permite gestionar tus juegos y optimizarlos, mantener los controladores actualizados y por supuesto la funci√≥n ‚ÄúShare‚Äù que permite a los gamers compartir sus jugadas con los dem√°s, esto es gracias a que la herramienta puede grabar nativamente una partida o bien una porci√≥n. Quiz√°s no lo hayas considerado pero esto es parte vital de la experiencia que tu juego deber√≠a brindarle a sus jugadores, y es posible que hayas compilado tu juego de manera que no sea compatible con esta caracter√≠stica, si no has configurado las siguientes opciones en Edit \u003e Project Settings \u003e Player. . . ","date":"31-03-2017","objectID":"/posts/2017/dev/004/:0:0","tags":["n9+","dev"],"title":"Unity + GeForce Share (Shadow Play)","uri":"/posts/2017/dev/004/"},{"categories":["comun"],"content":"Mis artistas favoritos de 2D Desde hace 7 a√±os sigo la trayectoria de varios artistas que han ido evolucionando y llegando a tener un arte que me agrada. Aqu√≠ recopilo los artistas que a dia de hoy son los que estoy siguiendo. . ","date":"29-03-2017","objectID":"/posts/2017/comun/013/:0:0","tags":["n9+","comun"],"title":"Mis Artistas 2D","uri":"/posts/2017/comun/013/"},{"categories":["comun"],"content":"Final Fantasy IX: Alternate Fantasy es un mod de ‚ÄâTirlititi que apunta a aumentar la dificultad y, sobre todo, a dar una nueva experiencia de FF9 para aquellos que ya conocen bien el juego. Para la versi√≥n PSX, se instala mediante la aplicaci√≥n de un parche PPF a los archivos de juego original. Puede utilizar la herramienta PPF-O-MATIC que se incluye en el archivo de mod. Para la versi√≥n de Steam, reemplazas directamente algunos de los archivos del juego por los modificados. ","date":"23-03-2017","objectID":"/posts/2017/comun/012/:0:0","tags":["n9+","comun"],"title":"Final Fantasy IX: Alternate Fantasy [Mod]","uri":"/posts/2017/comun/012/"},{"categories":["comun"],"content":"¬øCu√°les son las modificaciones? . Muchos cambios, desde estad√≠sticas de enemigos, nuevas habilidades y nuevas misiones. Algunos cuadros de di√°logo que se suprimieron durante el desarrollo del juego fueron puestos de nuevo en este mod. Incluye los di√°logos del parche ‚ÄúDi√°logos ocultos‚Äù, m√°s algunos otros para los que s√≥lo se guardaron los textos. Beatrix puede ser contratada permanentemente despu√©s de obtener el dirigible (opcional). Cutscenes se cambian a partir de este punto para incluir a Beatrix en ellos (Steam versi√≥n solamente). Las cosas principales ahora. Las habilidades, ya sean los personajes del jugador o las de los enemigos, han sido modificadas. Uno de los puntos del mod es tambi√©n mejorar los estados. Algunos hechizos b√°sicos da estados adem√°s de su da√±o. Esta es una lista de los principales cambios en las habilidades del jugador: ","date":"23-03-2017","objectID":"/posts/2017/comun/012/:1:0","tags":["n9+","comun"],"title":"Final Fantasy IX: Alternate Fantasy [Mod]","uri":"/posts/2017/comun/012/"},{"categories":["comun"],"content":"Zidane Trance con menos da√±o. ¬°¬øQue es eso?! Inflige ceguera a todos ahora. Annoy ha sido reemplazado por Free Energy: un ataque regular con 100% de precisi√≥n y sin backrow Sacrificio ha sido reemplazado por Regenerar: utilizar un √©ter en un compa√±ero Lucky Seven ha sido reemplazado por Warm Up: aumenta la fuerza de Zidane en un 25% Thievery ha sido reemplazado por Transcend: pone en Trance a Zidane ","date":"23-03-2017","objectID":"/posts/2017/comun/012/:2:0","tags":["n9+","comun"],"title":"Final Fantasy IX: Alternate Fantasy [Mod]","uri":"/posts/2017/comun/012/"},{"categories":["comun"],"content":"Vivi Los hechizos de fuego tienen la oportunidad de infligir calor (base: 5%, 10% y luego 20%) Los hechizos de hielo tienen la oportunidad de infligir congelaci√≥n (base: 5%, 10% y luego 20%) Los hechizos de trueno tienen la posibilidad de infligir lento (base: 10%, 20% y luego 40%) Slow ha sido reemplazado por Annoy (80% de precisi√≥n) Demi se ha equilibrado 25% de la HP m√°xima con una precisi√≥n del 80% La muerte ha sido reemplazada por Gradual Petrify (75% de precisi√≥n) Break es ahora un ataque elemental de Tierra adem√°s de infligir Petrify (30% de precisi√≥n) El agua a veces inflige Shell a sus objetivos Meteor ha sido reemplazado por Waterga ","date":"23-03-2017","objectID":"/posts/2017/comun/012/:3:0","tags":["n9+","comun"],"title":"Final Fantasy IX: Alternate Fantasy [Mod]","uri":"/posts/2017/comun/012/"},{"categories":["comun"],"content":"Magia blanca Panacea s√≥lo cura el veneno, pero es multi objetivo Confusi√≥n y Berserk ahora son ataques m√°gicos adem√°s de infligir estados La mayor√≠a de los hechizos que infligen estados tienen su precisi√≥n aumentada Santo a veces inflige regeneraci√≥n a su objetivo ","date":"23-03-2017","objectID":"/posts/2017/comun/012/:4:0","tags":["n9+","comun"],"title":"Final Fantasy IX: Alternate Fantasy [Mod]","uri":"/posts/2017/comun/012/"},{"categories":["comun"],"content":"Daga La arma llena de energ√≠a ahora repartir√° da√±o dos veces, permitiendo tratar m√°s de 9999 ","date":"23-03-2017","objectID":"/posts/2017/comun/012/:5:0","tags":["n9+","comun"],"title":"Final Fantasy IX: Alternate Fantasy [Mod]","uri":"/posts/2017/comun/012/"},{"categories":["comun"],"content":"Eiko Fenril es una invocaci√≥n de viento por defecto ","date":"23-03-2017","objectID":"/posts/2017/comun/012/:6:0","tags":["n9+","comun"],"title":"Final Fantasy IX: Alternate Fantasy [Mod]","uri":"/posts/2017/comun/012/"},{"categories":["comun"],"content":"Quina LV5 La muerte ha sido reemplazada por LV5 Flare: inflige da√±o no elemental a los enemigos con lvl m√∫ltiplo de 5 LV4 Holy ha sido reemplazado por LV4 Def-less: aleatoriamente disminuye la defensa de los enemigos con lvl m√∫ltiplo de 4 LV3 Def-less ha sido reemplazado por LV3 Aerial Slash: inflige da√±o de viento a los enemigos con lvl m√∫ltiplo de 3 Doom ha sido reemplazado por Lightning: silencia a un objetivo (50% de precisi√≥n) La ruleta ha sido reemplazada por Self-Destruct: convierte el HP actual de Quina en da√±o a todos los enemigos Aqua Breath tiene 75% de precisi√≥n en lugar de 50% Matra Magic ha sido reemplazado por Zombie Breath: da√±o no elemental m√°s Zombie en un objetivo (20% de precisi√≥n) Limit Glove ha sido reemplazado por HP Switching: cambia el actual HP de Quina con uno de sus aliados Twister tiene un 50% para infligir Float adem√°s de su da√±o de viento Earth Shake tiene 100% de infligir lento, adem√°s de su da√±o a la Tierra Frog Drop ha sido reemplazado por Devil‚Äôs Snack: usa un Dead Pepper en todos los enemigos El congelamiento ha sido reemplazado por Cocytos: da√±o de hielo e infligir lento en un objetivo (100%) Bomba mostaza ha sido reemplazada por Phlegethon: da√±o de fuego e infligir Haste en un objetivo (100%) ","date":"23-03-2017","objectID":"/posts/2017/comun/012/:7:0","tags":["n9+","comun"],"title":"Final Fantasy IX: Alternate Fantasy [Mod]","uri":"/posts/2017/comun/012/"},{"categories":["comun"],"content":"Freya El da√±o de salto se incrementa, as√≠ como su coste de MP Dragon Breath ha sido reemplazado por Dragon Life: aplica Auto-Life en Freya Seis Dragones se ha convertido en single-targeting por 15 MP Cherry Blossom es m√°s potente La cresta del drag√≥n ha sido reemplazada por Ikari: inflige da√±o f√≠sico y problemas a todos los enemigos (50%) ","date":"23-03-2017","objectID":"/posts/2017/comun/012/:8:0","tags":["n9+","comun"],"title":"Final Fantasy IX: Alternate Fantasy [Mod]","uri":"/posts/2017/comun/012/"},{"categories":["comun"],"content":"Amarant Aura ha sido reemplazada por Starburst: reparte 60 veces el nivel de un enemigo como da√±o La exactitud de Demi Shock ha aumentado de 50% a 80% Cuenta atr√°s ha sido reemplazada por Concentrado: aumenta el Magic de un aliado en un 33% para 28 MP ","date":"23-03-2017","objectID":"/posts/2017/comun/012/:9:0","tags":["n9+","comun"],"title":"Final Fantasy IX: Alternate Fantasy [Mod]","uri":"/posts/2017/comun/012/"},{"categories":["comun"],"content":"Steiner Iai Strike ha sido reemplazado por Quadraslash: un ataque f√≠sico usando el poder elemental de Fuego, Hielo, Trueno y Agua La precisi√≥n de las 4 habilidades de rotura ha sido aumentada Thunder Slash ahora inflige el 21% del m√°ximo de HP al objetivo como da√±o de trueno Climhazzard ha sido reemplazado por un Shock m√°s d√©bil: reparte 2 veces el da√±o f√≠sico en un objetivo Shock ha sido reemplazado por Sword Dance: reparte 2 veces el da√±o f√≠sico en todos los enemigos; Es un ataque m√°gico ","date":"23-03-2017","objectID":"/posts/2017/comun/012/:10:0","tags":["n9+","comun"],"title":"Final Fantasy IX: Alternate Fantasy [Mod]","uri":"/posts/2017/comun/012/"},{"categories":["comun"],"content":"Marcus A√±adido 2 habilidades para el tiempo que est√° en el grupo en el disco 2: Golpe Fuerte (m√°s da√±o pero da√±a a Marcus) y Contaminate (100% infligir Veneno) Tambi√©n, Ragtime Mouses Quizz ha sido actualizado Los enemigos son m√°s fuertes y m√°s resistentes El error m√°s frustrante del juego ha sido corregido: el √∫ltimo rango Tetra Master aparece correctamente Algunas armas pueden ser utilizadas por varios personajes (por ejemplo, Daga puede usar la ‚Ä¶ daga) Las √∫ltimas armas dan un gran impulso a las principales caracter√≠sticas (Fuerza, Magia, Velocidad y Esp√≠ritu) Los hechizos de los enemigos han sido modificados usando principios similares a los hechizos del jugador Los pi√±ones de Phoenix ahora curan la condenaci√≥n; Tambi√©n cuestan y se venden m√°s barato Un mini-juego se ha re-a√±adido al principio del disco 3. Estaba medio presente en el c√≥digo del juego y ten√≠a el siguiente comentario en la versi√≥n japonesa: „Åæ„ÅüÂà∂‰ΩúÈÄî‰∏≠„Å™„ÅÆ„Åß„Éê„Ç∞„É¨„Éù„Éº„Éà‰∏çË¶Å„Åß„Äú„Åô Lo que significa en resumen que era demasiado buggy y aburrido para estar en el juego final. Si bien los errores han sido corregidos, es probable que no te mantendr√° enganchado durante horas ^^ \" Excalibur II ahora se puede adquirir por dos m√©todos diferentes: Alcanzar y vencer a Hades en menos de 14 horas, Obtener todos los tesoros del juego (hay 3 errores peque√±os permitidos) para obtener el mayor rango del tesoro. Y mucho m√°s ‚Ä¶ No voy a decirte nada pero te permitire descubrirlo por ti mismo. Descarga AF\rAF Trello\rNota Ya que el archivo Mod est√° disponible, la gente puede hacer variaciones del mismo. √âsos no son acoplamientos de Alternate Fantasy sino mods basados en √©l. Beatrix con habilidades de apoyo + escenas ocultas - Trello[Basado en AF 4.2] Alternate Fantasy v4.3 + Tweaks para permitir el juego lvl 1 - Trello[Sin subir de lvl] . ","date":"23-03-2017","objectID":"/posts/2017/comun/012/:11:0","tags":["n9+","comun"],"title":"Final Fantasy IX: Alternate Fantasy [Mod]","uri":"/posts/2017/comun/012/"},{"categories":["imagen del dia"],"content":" La noche agil y femenina es a su vez gentil pero peligrosa Artista desconocido\r. ","date":"23-03-2017","objectID":"/posts/2017/imagen/005/:0:0","tags":["n9+","ilustracion"],"title":"Imagen del dia [22.03.2017]","uri":"/posts/2017/imagen/005/"},{"categories":["imagen del dia"],"content":" Impactante pero cierto, solo con photoshop Kyrie\r. ","date":"22-03-2017","objectID":"/posts/2017/imagen/004/:0:0","tags":["n9+","ilustracion"],"title":"Imagen del dia [22.03.2017]","uri":"/posts/2017/imagen/004/"},{"categories":["dev"],"content":" Noticia Unity se complace en anunciar una nueva y poderosa adici√≥n a su suite de herramientas creativa: TextMesh Pro y su creador, Stephan Bouchard, se han unido a Unity! TextMesh Pro es un reemplazo de componentes de texto como texto de malla. TextMesh Pro utiliza SDF como su principal canal de renderizado de texto por lo que es posible representar el texto limpiamente en cualquier tama√±o y resoluci√≥n. El uso de un conjunto de shaders personalizados dise√±ados para aprovechar el poder de representaci√≥n de texto SDF, TextMesh Pro hace que sea posible cambiar din√°micamente la apariencia visual del texto, simplemente cambiando las propiedades del material para a√±adir estilos visuales, tales como la dilataci√≥n, de l√≠nea, sombreado suave, biselado, texturas, brillo, etc., y para guardar y recuperar estos estilos visuales mediante la creaci√≥n/utilizaci√≥n de los preajustes de materiales. TextMesh Pro proporciona un mejor control sobre el dise√±o y formato de texto a los usuarios, que proporciona un control sobre el car√°cter, palabra, l√≠nea y el espacio entre p√°rrafos. El apoyo para el ajuste entre caracteres y la separaci√≥n sil√°bica b√°sica, modos de alineaci√≥n de texto adicionales como texto justificado y rasante, m√°s de 30 textos enriquecidos est√°n disponibles para dar el control a los usuarios sobre los m√°rgenes, sangr√≠a, el usuario puede definir ¬†estilos , ¬†enlaces e incluso soporte para el uso ¬†de m√∫ltiples fuentes y gr√°ficos con el texto. Optimizada para m√≥vil y PC, hoy en d√≠a se puede descargar la nueva versi√≥n, a libre disposici√≥n de TextMesh Pro (Unity 5.3 o superior es necesario, Unity 5.6 versi√≥n compatible pr√≥ximamente). Ya se ha empezado a trabajar para integrar la funcionalidad de TextMesh Pro en Unity 2017, y se continuara apoyando el activo con actualizaciones peri√≥dicas para la funcionalidad y compatibilidad. TextMesh Pro AssetStore\r. ","date":"20-03-2017","objectID":"/posts/2017/dev/023/:0:0","tags":["n9+","dev"],"title":"TextMesh Pro Unity3D","uri":"/posts/2017/dev/023/"},{"categories":["comun"],"content":"‚ÄâJeydia comparti√≥ sus pensamientos sobre la construcci√≥n de escenas realistas mejoradas en Unity 5 con su nueva iluminaci√≥n. . ","date":"18-03-2017","objectID":"/posts/2017/comun/011/:0:0","tags":["n9+","comun"],"title":"Iluminaci√≥n con Unity 5","uri":"/posts/2017/comun/011/"},{"categories":["comun"],"content":"Poner a prueba la iluminaci√≥n de Unity Siempre he querido reproducir una iluminaci√≥n real desde un entorno real, as√≠ que prob√© en un primer momento para tomar la foto real en mi ciudad, apartamento, pero no soy un buen fot√≥grafo, as√≠ que fui a Pinterest, me encanta este sitio web, es uno de los mejores para m√≠ para encontrar la referencia. Yo estaba buscando una escena r√°pida, no quer√≠a pasar mucho rato en la modelizaci√≥n, y ca√≠ en esta foto ‚ÄúHospital Abandonado de Chicago‚Äù tomada por Jordan Nicolette creo, se puede encontrar el origen de cada imagen en Pinterest. . Cog√≠ una gran cantidad de referencias de The Divisi√≥n de Tom Clancy, me gusta la forma en que logr√≥ tener este realismo, esas luces volum√©tricas din√°micas suaves y una comprensible escena con todos los activos mencionados en la c√°mara. ","date":"18-03-2017","objectID":"/posts/2017/comun/011/:1:0","tags":["n9+","comun"],"title":"Iluminaci√≥n con Unity 5","uri":"/posts/2017/comun/011/"},{"categories":["comun"],"content":"El posicionamiento de iluminaci√≥n Trat√© de hacer coincidir las luces de la referencia tanto como sea posible. Hice muchas pruebas en el etiquetado para encontrar la posici√≥n perfecta, la colocaci√≥n de las puertas era dif√≠cil al principio, ya que puede cambiar la iluminaci√≥n mucho. . Me dieron 3 puntos de luz din√°micas, uno cerca del vaso de la izquierda, el segundo cerca de la mesa y el √∫ltimo frente a las puertas del ascensor. Estas luces puntuales me han ayudado a conseguir un buen especular din√°mico que no puedo tener con el bake en los objetos. Pongo las grandes luces bakeadas en un lugar cerca de las puertas, era dif√≠cil al principio conseguir el mismo aspecto, la misma intensidad, rebotes y otros ajustes de la luz para que se pareciera a la sensaci√≥n que da la foto, la dificultad principal era mantener alguna zona oscura y otra luminosa sin mover el punto o la adici√≥n porque esto puede hacer una gran diferencia en comparaci√≥n con la referencia principal. ","date":"18-03-2017","objectID":"/posts/2017/comun/011/:2:0","tags":["n9+","comun"],"title":"Iluminaci√≥n con Unity 5","uri":"/posts/2017/comun/011/"},{"categories":["comun"],"content":"Los avances de Unity Desde que Unity 5.4 a√±ade la ‚ÄúEliminaci√≥n de ruido‚Äù producido por las luces est√°ticas. Siempre lo uso cuando hago mi bake final, tenga cuidado cuando se activa, cuesta m√°s tiempo para calcular. . Skybox de color en tiempo real para calentar la escena y evitar alg√∫n problema con zonas de mucho contraste, gracias a la iluminaci√≥n global puedo ver los rebotes de las luces en tiempo real. . . La nueva Post Processing Stack me ayud√≥ mucho para acercarme a la referencia. Personalmente, no puedo hacer una escena sin m√°s, muy simple para importar y se puede tener diferentes perfiles de procesamiento, antes de eso, he duplicado las c√°maras y las e guardado como un prefab para tener distintas configuraciones. La pr√≥xima versi√≥n de la Unidad (5.6) tendr√° un lightmapper progresiva, una nueva forma de utilizar las luces de Unity llamados modos de luz. ","date":"18-03-2017","objectID":"/posts/2017/comun/011/:3:0","tags":["n9+","comun"],"title":"Iluminaci√≥n con Unity 5","uri":"/posts/2017/comun/011/"},{"categories":["comun"],"content":"C√°maras He creado el material con el substance, pero e dejado todos los par√°metros ‚ÄúBase de color‚Äù en Unity, para poder cambiar en tiempo real el color de cada material, para ver el resultado despu√©s de el mapa de luz. Yo siempre trato de estar entre sRGB 20 - 230 para evitar grandes saltos de luces. . El material del agua era muy importante tambi√©n, hice una sustancia en el que puedo ajustar la cantidad, la posici√≥n, el contraste de los charcos y la transparencia, mezcl√© este material con el suelo. He utilizado el sombreado de Uber para la mezcla de materiales y la asignaci√≥n de la oclusi√≥n en el techo. El √∫nico consejo que puedo dar es evitar el ruido en su textura, por ejemplo, por tener un mapa de normales, o una gran cantidad de datos en su textura y bordes afilados. ","date":"18-03-2017","objectID":"/posts/2017/comun/011/:4:0","tags":["n9+","comun"],"title":"Iluminaci√≥n con Unity 5","uri":"/posts/2017/comun/011/"},{"categories":["comun"],"content":"Luz o pol√≠gonos Yo siempre digo que no es una cuesti√≥n de pol√≠gonos, sino m√°s de la iluminaci√≥n, la composici√≥n y la textura, gracias a Allegorithmic y Quixel es muy sencillo tener un material en buen estado. El procesamiento posterior es muy importante tambi√©n, el efecto de reflexi√≥n de la pantalla ayuda mucho. En el color, he utilizado el f√≠lmico (ACES), me encanta la forma en que contrastar f√°cilmente la escena y mejora los rayos de luz. . Cambiar su proyecto de linear space a gamma. Unity tiene algunos tutoriales en v√≠deo en su canal de youtube y una gran documentaci√≥n que explica todo. . ‚ÄâJeydia, artista 3D ambiente. Entrevista realizada por ‚ÄâKyrylo Tokarev . ","date":"18-03-2017","objectID":"/posts/2017/comun/011/:5:0","tags":["n9+","comun"],"title":"Iluminaci√≥n con Unity 5","uri":"/posts/2017/comun/011/"},{"categories":["comun"],"content":"Estos son los siete principios que rigen el c√≥digo de Bushido. Estos principios basados en la filosof√≠a a de Lao Tse y en los cuales se funda el primer emperador para la unificaci√≥n china. Existe en china un lugar donde estas siete palabras est√°n sostenidas en una serie de arcos consecutivos de tama√±o considerable, bajo los cuales se pasa andando y que tienen su correspondiente leyenda. Leyenda Ser fieles a √©l y vuestro KI crecer√°. Romperlo y vuestro nombre ser√° denostado por las generaciones venideras. YU ‚Äì Coraje/Valor Heroico Un samur√°i lleva impl√≠cito el coraje; es coraje. Vive la vida de forma plena, completa, maravillosa. El coraje heroico no es ciego, es inteligente y fuerte. El samur√°i desarrolla el coraje y hace que su cuerpo lo sea ejerciendo el control sobre el mismo y reemplazando el miedo por el respeto y la precauci√≥n. El valiente no sigue los pasos de la estupidez REI - Cortes√≠a Un samur√°i es cort√©s con sus enemigos y no necesita demostrar su fuerza. Es por ello que un samur√°i recibe mas respeto por su manera de tratar a los dem√°s que por su destreza en el campo del batalla. Es en las situaciones limites, en las que el samur√°i invoca y manifiesta la fuerza interior. Un alma sin respeto es una morada en ruinas JIN - Compasi√≥n Mediante el entrenamiento intenso el samur√°i se convierte en r√°pido y fuerte. No es como el resto de los hombres. Desarrolla un poder que emplea en beneficio de todos. Aunque su lealtad sea al se√±or (Daimyo o ..), debe ser compasivo ayudando a sus compa√±eros en cualquier circunstancia. Si la oportunidad no surge, se sale de su camino para encontrarla GI - Justicia Es honrado en su trato con todo el mundo. Cree en la Justicia, pero no en la que emana de los dem√°s, sino en la suya propia. Para un samur√°i no existen las tonalidades de grises en lo que a justicia y honradez se refiere. S√≥lo existe lo correcto y lo incorrecto MEIYO - Honor El samur√°i solo tiene un juez para juzgar sus actos y es √©l mismo. Las decisiones que se toman y el c√≥mo son ejecutadas son el reflejo de quien es. La muerte no es eterna; el deshonor, s√≠ CHUGO - Lealtad Un samur√°i es leal a su se√±or, y a todos aquellos bajo su cuidado; o no. Para aquellos de los que es responsable, siempre responde con su vida. Un perro sin amo vagabundea libre MAKOTO - Sinceridad/Verdad Cuando un samur√°i dice que har√° algo, es como si ya estuviera hecho. Nada lo detendr√° en la ejecuci√≥n de lo dicho. No da su palabra. No promete. El simple hecho de hablar pone en movimiento el acto de hacer. Las palabras de un hombre son como sus huellas; puedes seguirlas donde quiera que √©l vaya. Decir y hacer es la misma cosa. Cuidado con el camino que sigues ","date":"18-03-2017","objectID":"/posts/2017/comun/010/:0:0","tags":["n9+","comun"],"title":"El C√≥digo Bushido","uri":"/posts/2017/comun/010/"},{"categories":["comun"],"content":"Algunos comentarios de Mirumoto Jinto, Rikugunshokan del Clan del Drag√≥n, sobre el c√≥digo de Bushido: Sobre el valor El camino del valiente no sigue los pasos de la estupidez. Sobre la lealtad Un perro sin amo vagabundea libre. El halc√≥n de un Daimyo (Se√±or Feudal) vuela m√°s alto. Solo hay una lealtad superior a la del samur√°i hacia su Daimyo: la del Daimyo hacia sus s√∫bditos. Sobre el Respeto Un alma sin respeto es una morada en ruinas. Debe ser demolida para construir una nueva. Sobre la Excelencia La perfecci√≥n es una monta√±a inescalable que debe ser escalada a diario. Sobre la Venganza La ofensa es como un buen haiku (Breve poema japon√©s de tres versos): puede ignorarse, desconocerse, perdonarse o borrarse, pero nunca puede ser olvidada. Sobre la Espada Mi hoja es mi alma. Mi alma pertenece a mi Daimyo. Ultrajar mi hoja es afrentar a mi Daimyo. Sobre el Honor La muerte no es eterna; el deshonor, s√≠. Sobre la Muerte El samur√°i nace para morir. La muerte, pues, no es una maldici√≥n a evitar, sino el fin natural de toda vida. ","date":"18-03-2017","objectID":"/posts/2017/comun/010/:0:1","tags":["n9+","comun"],"title":"El C√≥digo Bushido","uri":"/posts/2017/comun/010/"},{"categories":["comun"],"content":"El Credo del Samur√°i No tengo parientes, Yo hago que la Tierra y el Cielo lo sean. No tengo hogar, Yo hago que el Tan T ien lo sea. No tengo poder divino, Yo hago de la honestidad mi poder divino. No tengo medios, Yo hago mis medios de la docilidad. No tengo poder m√°gico, Yo hago de mi personalidad mi poder m√°gico. No tengo cuerpo, Yo hago del estoicismo mi cuerpo. No tengo ojos, Yo hago del rel√°mpago mis ojos. No tengo o√≠dos, Yo hago de mi sensibilidad mis o√≠dos. No tengo extremidades, Yo hago de la rapidez mis extremidades. No tengo leyes, Yo hago de mi auto-defensa mis leyes. No tengo estrategia, Yo hago de lo correcto para matar y de lo correcto para restituir la vida mi estrategia. No tengo ideas, Yo hago de tomar la oportunidad de antemano mis ideas. No tengo milagros, Yo hago de las leyes correctas mis milagros. No tengo principios, Yo hago de la adaptabilidad a todas las circunstancias mis principios. No tengo t√°cticas, Yo hago del vac√≠o y la plenitud mis t√°cticas. No tengo talento, Yo hago que mi astucia sea mi talento. No tengo amigos, Yo hago de mi mente mi amiga. No tengo enemigos, Yo hago del descuido mi enemigo. No tengo armadura, Yo hago de la benevolencia mi armadura. No tengo castillo, Yo hago de mi mente inamovible mi castillo. No tengo espada, Yo hago de mi No mente mi espada. . ","date":"18-03-2017","objectID":"/posts/2017/comun/010/:1:0","tags":["n9+","comun"],"title":"El C√≥digo Bushido","uri":"/posts/2017/comun/010/"},{"categories":["comun"],"content":"Esta entrada la escribo para tener constancia del workflow que se hace en animaci√≥n y nada mas. Los pasos a seguir serian: Crear o buscar referencias. Puesta a punto de c√°maras. Blocking con la malla justa del modelo animado. Generaci√≥n de keys claves de la animaci√≥n. Pulido final. VFX y preprocesado Render Pero aqu√≠ solo pondre los puntos 1.3. y 5. Solo pondr√© esto ya que es muy tedioso y tendr√≠a que tener la entrada activa mucho tiempo. Empecemos. ","date":"15-03-2017","objectID":"/posts/2017/comun/009/:0:0","tags":["n9+","comun"],"title":"Animando un personaje","uri":"/posts/2017/comun/009/"},{"categories":["comun"],"content":"Crear o buscar referencias. Ahora que a salido Nier Automata, se ha visto que los chicos de Platinum Games se lo han currado mucho para recrear esas animaciones, han mimado su obra hasta tal punto que llegan al nivel de los mejores animadores de videojuegos. Por ello, e cogido a la protagonista como referencia, no usare su modelo ya que esta animaci√≥n es para un proyecto diferente y el modelo es el del videojuego este. ( Pero no descarto en un futuro, recrear a modo de fandom con el modelo de nier). Las referencias son las siguientes: . La referencia esta formada por varias animaciones de ataques que dividir√© en 4. Nombre Fotogramas Ataque #1 10f-25f Ataque #2 29f-80f Ataque #3 170f-205f Ataque #4 254f-299f ","date":"15-03-2017","objectID":"/posts/2017/comun/009/:1:0","tags":["n9+","comun"],"title":"Animando un personaje","uri":"/posts/2017/comun/009/"},{"categories":["comun"],"content":"Blocking con la malla justa del modelo animado. En este punto, en vez de usar la malla justa, usare el modelo tal cual el equipo a proporcionado, que creo que es el que se usara en el juego en si. Antes de empezar, un peque√±o tip, si est√°is usando referencias con diferentes fotogramas, restar al ultimo resultado de fotogramas, el resultado anterior y os saldr√°n los fotogramas que hay entre medias, es una cosa de ni√±os, pero a veces la gente no cae. ^^ Tiempo estimado del total de la animaci√≥n: 6.2s La primera animaci√≥n es : Nombre Fotogramas Chico sujetando la espada 0f(10f) Chico sujetando la espada en lo alto 5f(15f) Chico ataque bajo con espada 15f(25f) La segunda animaci√≥n es : Nombre Fotogramas Chico gir√°ndose 16f(29f) Chico coge la espada 27f(40f) Chico empieza a caer 46f(59f) Chico toca el suelo 51f(64f) Chico lanza la espada 55f(68f) Chico se incorpora 67f(80f) La tercera animaci√≥n es : Nombre Fotogramas Chico cogiendo espada 68f(170f) Chico empieza a girar 79f(181f) Chico termina giro y coge pose 103f(205f) La cuarta animaci√≥n es : Nombre Fotogramas Chico en posici√≥n 104f(254) Chico giro m√°ximo 118f(268f) Chico termina giro y reposa espada 149f(299f) ","date":"15-03-2017","objectID":"/posts/2017/comun/009/:2:0","tags":["n9+","comun"],"title":"Animando un personaje","uri":"/posts/2017/comun/009/"},{"categories":["comun"],"content":"Pulido Final. En el pulido, hay que dejarlo todo perfecto, como su nombre indica, ir puliendo frame a frame hasta dejarlo al gusto. Al terminar el pulido hay que rellenar todos los frames de la linea de tiempo con las keys para que solo coja esos valores. . . ","date":"15-03-2017","objectID":"/posts/2017/comun/009/:3:0","tags":["n9+","comun"],"title":"Animando un personaje","uri":"/posts/2017/comun/009/"},{"categories":["dev"],"content":"Evaluando lo necesario para el TFG, vi que requer√≠amos de un gestor de escenas, en la que se pudiera cambiar de escena, desde el editor y en runtime con variaciones. Variaciones Editor -\u003e cambiar generalmente de forma r√°pida y precisa. Runtime -\u003e cambiar entre cargar escena completa y cargar mediante Sync. Por ello propuse un Gestor de Escenas en la que uno mismo podr√≠a cambiar siempre de escena en cualquier lado. El sistema es llamado ¬†Proteo que hace honor a una criatura mitolog√≠a que pod√≠a asumir cualquier forma que no fuera inm√≥vil. . En la escena de test, quer√≠a sacar 3 funcionalidades. Cambiar de forma normal la escena. Cambiar de forma Asyncrona la escena. Descargar alguna escena anterior. Bien ahora empezare por el sistema runtime. Al estar con Unity5 hay que agregar la using UnityEngine.SceneManagement; Si no, no podr√°s acceder a los m√©todos de unity. Al sumar escenas hay un m√©todo llamado LoadSceneMode.Additive que seria sumar la nueva escena a la actual. Bueno y despu√©s de esto -\u003e // ‚îå‚à©‚îê(‚ó£_‚ó¢)‚îå‚à©‚îê // // SProteo.cs (15/03/2017) // Autor: Antonio Mateo (Moon Pincho) // Descripcion: Sistema que gestiona el cambio de escenas. // Fecha Mod: 15/03/2017 // Ultima Mod: Version Inicial //****************************************************************\\\\ #region Librerias using UnityEngine; using System.Collections; using System.Collections.Generic; using UnityEngine.SceneManagement; #endregion namespace MoonPincho { /// \u003csummary\u003e /// \u003cpara\u003eSistema que gestiona el cambio de escenas\u003c/para\u003e /// \u003c/summary\u003e [AddComponentMenu(\"Moon Pincho/Sistemas/SProteo\")] public class SProteo : MonoBehaviour { #region Variables Publicas /// \u003csummary\u003e /// \u003cpara\u003eNGUI progress bar para la carga.\u003c/para\u003e /// \u003c/summary\u003e public UISlider progressBar; #endregion #region API /// \u003csummary\u003e /// \u003cpara\u003eCarga la escena dada en modo Additive.\u003c/para\u003e /// \u003c/summary\u003e /// \u003cparam name=\"nombre\"\u003eNombre de la escena.\u003c/param\u003e public void LoadScene(string nombre) { SceneManager.LoadScene(nombre, LoadSceneMode.Additive); } /// \u003csummary\u003e /// \u003cpara\u003eDescarga la escena dada.\u003c/para\u003e /// \u003c/summary\u003e /// \u003cparam name=\"nombre\"\u003eNombre de la escena.\u003c/param\u003e public void UnLoadScene(string nombre) { SceneManager.UnloadSceneAsync(nombre); } /// \u003csummary\u003e /// \u003cpara\u003eCarga la escena dada asyncronamente.\u003c/para\u003e /// \u003c/summary\u003e /// \u003cparam name=\"nombre\"\u003eNombre de la escena.\u003c/param\u003e public void LoadSceneAsyc(string nombre) { StartCoroutine(UpdateProgress(nombre)); } /// \u003csummary\u003e /// \u003cpara\u003eDescarga la escena actual.\u003c/para\u003e /// \u003c/summary\u003e public void UnLoadActual() { SceneManager.UnloadSceneAsync(SceneManager.GetActiveScene().name); } #endregion #region Funcionalidad /// \u003csummary\u003e /// \u003cpara\u003eActualiza el progress bar mientras carga la escena Asyncronamente.\u003c/para\u003e /// \u003c/summary\u003e /// \u003cparam name=\"nombre\"\u003eNombre de la escena.\u003c/param\u003e /// \u003creturns\u003eNull\u003c/returns\u003e public IEnumerator UpdateProgress(string nombre)la escena Asyncronamente { AsyncOperation cargando = SceneManager.LoadSceneAsync(nombre); while (!cargando.isDone) { this.progressBar.value = cargando.progress; Debug.Log(cargando.progress); yield return null; } } #endregion } } GitHub\r. ","date":"15-03-2017","objectID":"/posts/2017/dev/022/:0:0","tags":["n9+","dev"],"title":"Gestor de Escenas en Unity3D","uri":"/posts/2017/dev/022/"},{"categories":["comun"],"content":"Despu√©s de revisar mis repositorios en las diferentes plataformas(GitHub, GitLab, BitBucket), e visto que tengo un lio infernal, muchos proyectos desordenados, sin ning√∫n patr√≥n general para poder buscarlos, diferentes tags que a veces no son muy precisas ‚Ä¶ y un largo x de cosas mejorables. Por el momento me e interesado en crear en GitHub un repositorio para controlar los diferentes repos desde ahi, claro esta que las dem√°s plataformas van para mucho tiempo, sin mas BitBucket es un pozo sin fondo de repos sin readme, sin descripci√≥n, 0 im√°genes, 0 documentaci√≥n ‚Ä¶ Por eso voy a empezar con GitHub, y realmente ‚Ä¶ se a quedado una cosa muy fea, pero al menos tengo un center para poder guiarme un poco mejor por estos terrenos. Tengo pensado actualizar todos los repos para tenerlos bien organizados y documentados, pero hasta el momento tendr√© que ir tirando de este m√©todo que, aunque es feo, es lo mas r√°pido que puedo montar, para que no interfiera en el TFG y otros proyectos activos en este momento. . ","date":"14-03-2017","objectID":"/posts/2017/comun/008/:0:0","tags":["n9+","comun"],"title":"Organizaci√≥n en GitHub","uri":"/posts/2017/comun/008/"},{"categories":["comun"],"content":"Bueno, despu√©s de darle varias vueltas y buscar mucha informaci√≥n, por fin puedo redactar una investigaci√≥n sobre los rpgs y sus puntos. Esto sera una compilaci√≥n de 2 diferentes juegos que han tenido √©xito y los puntos fuertes de cada juego, en su resumen (aunque no sea una investigaci√≥n total), sera una linea por la que seguir y ver todas las referencias de los padres de estos 2 RPGs. Para el primer videojuego, vamos a hablar mas que de un videojuego, de una saga. Final Fantasy. Final Fantasy . Square Soft fue la empresa asignada que creo la saga Final Fantasy (Desde ahora FF), la saga comenz√≥ en el 87, siendo el ultimo videojuego que Hironobu Sakaguchi desarrollar√≠a en el caso de que saliera mal. La mayor√≠a de las entregas son historias propias con diferentes personajes y escenarios, existen ciertos temas recurrentes que definen a la franquicia. Algunos de estos temas incluyen elementos argumentales, nombres de personajes y mec√°nicas de jugabilidad. La trama normalmente se constituye en un grupo de h√©roes, normalmente j√≥venes, que luchan contra un mal mayor, mientras enfrentan ciertos problemas personales y se exploran sus personalidades y relaciones con otros personajes. Normalmente FF chupa mucho de diferentes culturas y mitolog√≠as. Los elementos comunes entre cada FF, eran varios, como por ejemplo las espadas Excalibur ( Leyenda Arturiana ) y Masamune ( Famoso herrero de espadas ), estos lugares y nombres, como ** Midgar y Nibelheim** provienen de la Mitolog√≠a N√≥rdica. Tambi√©n hay diferentes personajes, invocaciones y magias, que en otras entregas pasan a ser temas recurrentes, como en el caso de Meteor que puede ser un npc o una magia. El conflicto principal de FF recae en un grupo de personajes luchando contra un mal, normalmente antiguo que domina el mundo. Normalmente tienen 2 Villanos, el primero parece ser el jefe final, pero luego cuando es derrotado sale la verdadera identidad del segundo villano. Tienen una trama principal que a su vez, se divide en una aventura donde la historia enfatiza en los problemas internos de los personajes principales, relaciones con otros personajes o incluso amor, guerra, amistad, rivalidad‚Ä¶ Uno de los elementos mas presentes en FF son los cristales. . FF tiene variedad de personajes, pero tambi√©n muchos personajes recurrentes con ciertos arquetipos que se definen en el monomito, de lo cual ya hable e investigue en ¬øQue es el Monomito?. El personaje mas recurrente de FF sin duda alguna es Cid, normalmente aunque cambien el sexo, el papel o cualquier otra cosa, al ser recurrentes siempre llevan un vinculo a los dem√°s cids de otras versiones, como por ejemplo que arregla barcos o a tenido un gran papel en sus tiempos. Conclusi√≥n, FF desde sus inicios a sabido bien lo que hacer, Square Soft, desde hace tiempo Square Enix por la fusi√≥n de compa√±√≠as, han sacado partido de la IP de FF con diferentes patrones fijados y muy bien pensados. Las historias siguen el patr√≥n del monomito. Siempre usan personajes recurrentes a lo que cada jugador le dar√° un valor sentimental. Han ido evolucionando y creando momentos muy bonitos mezclando las diferentes mitolog√≠as y leyendas siempre sin salir de la linea general de la trama. Han usado muy bien la m√∫sica a su favor, FF tiene muchas de las mejores bandas sonoras de los videojuegos. The Legend of Zelda . Bueno, despu√©s de hablar de Final Fantasy, tambi√©n hay que hablar de The Legend of Zelda, uno de los videojuegos con mayor publico y con derecho de Nintendo. En este videojuego, vuelve a aparecer los mismos patrones que hablamos en el principio, siguen una seria de trama en la que se vincula entre videojuegos, tiene un h√©roe principal y unos seguidores, en cual su misi√≥n es derrotar a un ser maligno. Tambi√©n tienen personajes recurrentes , pero con mas raz√≥n, en este IP, la historia sigue a un elegido por su viaje y la mayor√≠a de los juegos (sin contar los spin-off) se basan en Link, zelda y Ganon. Sigue teniendo una linea definida por el monomito, pero","date":"14-03-2017","objectID":"/posts/2017/comun/007/:0:0","tags":["n9+","comun"],"title":"Investigaci√≥n sobre RPGs","uri":"/posts/2017/comun/007/"},{"categories":["dev"],"content":"Vi a una persona en Quora, el otro d√≠a, preguntando c√≥mo los programadores son capaces de escribir proyectos que constan de m√°s de 10.000 l√≠neas de c√≥digo. Cuando el software se hace m√°s grande, es m√°s dif√≠cil de mantener y eso es un hecho. As√≠ que aqu√≠ est√° la cosa - si usted no mantiene su proyecto organizado, vas a tener dif√≠cil mantener el ritmo. M√°s tarde, se encontrar√° perdiendo el tiempo con un proyecto desordenado en lugar de a√±adir nuevas caracter√≠sticas. Esto tambi√©n es cierto con respecto a cualquier proyecto de Unity3D. √âstos son (en mi opini√≥n) los m√°s importantes consejos que le ayudar√°n a mantener su proyecto organizado. Estructura del Directorio No podemos hablar de la organizaci√≥n sin mencionar la organizaci√≥n de la estructura de directorios del proyecto. Unity le da una total libertad en esa materia, pero debido a que, con frecuencia puede ser muy desordenado. Esta es la estructura de directorios que utilizo personalmente: . ‚îú‚îÄ‚îÄ Alexandria ‚îÇ ‚îî‚îÄ‚îÄ moonantonio ‚îú‚îÄ‚îÄ Gizmos ‚îú‚îÄ‚îÄ Third party ‚îÇ ‚îú‚îÄ‚îÄ Libreria externa ‚îÇ ‚îî‚îÄ‚îÄ Otros ‚îú‚îÄ‚îÄ Nombre proyecto ‚îÇ ‚îú‚îÄ‚îÄ Resources ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ Animaciones ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ Audio ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ Modelos ‚îÇ ‚îú‚îÄ‚îÄ Shaders ‚îÇ ‚îú‚îÄ‚îÄ Prefabs ‚îÇ ‚îú‚îÄ‚îÄ Escenas ‚îÇ ‚îî‚îÄ‚îÄ Scripts ‚îÇ ‚îú‚îÄ‚îÄ Mono ‚îÇ ‚îî‚îÄ‚îÄ Editor ‚îî‚îÄ‚îÄ Plugins ‚îú‚îÄ‚îÄ AURA ‚îî‚îÄ‚îÄ GAIA 1.- No guarde los archivos de assets en el directorio ra√≠z. Utilizar subdirectorios siempre que sea posible. 2.- No crear los directorios adicionales en el directorio ra√≠z, a menos que realmente sea necesario. 3.- Sea consistente con el nombramiento. Utilizar nombres predictivos. 4.- No trate de mover assets del contexto espec√≠fico que los directorios generales. Por ejemplo, si hay materiales generados a partir del modelo, no moverlos a Materiales porque despu√©s no sabr√° de d√≥nde viene esto. 5.- Utilice 3¬™ Party para almacenar los bienes importados desde el almac√©n de activos. Por lo general tienen su propia estructura que no debe ser alterada. 6.- Utilice recinto de seguridad del directorio para todos los experimentos. Mientras se trabaja en este tipo de cosas, la √∫ltima cosa que desea tener en cuenta es una organizaci√≥n adecuada. Hagan lo que quieran, y luego quitarlo u organizar cuando usted est√° seguro de que lo desea incluir en su proyecto. Cuando est√°s trabajando en un proyecto con otras personas, crear el subdirectorio de recinto de seguridad personal como: Alexandria/moonantonio. Estructura de la jerarqu√≠a de escena Al lado de la jerarqu√≠a del proyecto tambi√©n hay jerarqu√≠a de la escena. Al igual que antes, le presento una plantilla. Puede ajustarlo a sus necesidades. Manager GUI Indispensables Luces Environment Din√°micos Hay varias reglas que debe seguir: 1.- Todos los objetos vac√≠os deben estar ubicados en 0,0,0 con la rotaci√≥n y la escala predeterminada. 2.- Mant√©n siempre la jerarqu√≠a aun instanciando objetos. 3.- Para los objetos vac√≠os que s√≥lo son contenedores para los scripts, el uso de ‚Äú@‚Äù como prefijo - por ejemplo @Cheats Usar prefabs para todo Los Prefabs en Unity3D no son perfectos, pero son lo mejor que encontrar√° en jerarqu√≠as preconfiguradas de objetos. En t√©rminos generales, intentar crear prefabs de todo lo que se pone en sus escenas. Usted debe ser capaz de crear un nuevo nivel de una escena vac√≠a simplemente a√±adiendo uno o m√°s prefabs. La raz√≥n por la que debe usar los prefabs es que cuando cambias un prefabs, todos los prefabs cambian tambi√©n. ¬øSi tienes 100 niveles y desea agregar un efecto de c√°mara en todos ellos? ¬°No es un problema! Si la c√°mara es un prefabs, basta con a√±adir un efecto de c√°mara a la c√°mara prefab! Tenga en cuenta que no se puede tener un prefab en otro prefab. Aprende a usar el sistema de control de versiones (VCS) Usted ya sabe algo acerca de GIT, subversi√≥n o cualquier otro VCS por ah√≠. Como cuesti√≥n de hecho, ‚Äúsaber algo‚Äù es s√≥lo una peque√±a parte de lo que usted puede aprender. Usted debe centrarse en el aprendizaje acerca de las caracter√≠sticas mas importantes de uso poco frecuente de VCS de su elecci√≥n. ¬øPor qu√©? Sobre todo porque los sistemas d","date":"13-03-2017","objectID":"/posts/2017/dev/003/:0:0","tags":["n9+","dev"],"title":"Consejos para organizar tus proyectos","uri":"/posts/2017/dev/003/"},{"categories":["dev"],"content":"Ya sea que est√© trabajando en un equipo o en solitario, usted debe saber c√≥mo trabajar de manera eficiente en un proyecto con otras personas. No s√≥lo va a hacer que el trabajo en un solo proyecto con alguien mucho sea m√°s f√°cil, sino tambi√©n mejorar su estilo de codificaci√≥n y las habilidades de gesti√≥n de proyectos de manera significativa. No tiene que temer a nada, de verdad! Me gustar√≠a explicar en unos pocos pasos cu√°les son los aspectos m√°s importantes del trabajo en equipo. Organizar bien su proyecto Antes de avanzar m√°s lejos, hay que asegurarse de que su proyecto est√° bien organizado. Es un requisito importante porque en proyectos no organizados es muy dif√≠cil realizar su mantenimiento. No es imposible trabajar en estos proyectos por todos los medios, pero cada vez que se vean obligados a trabajar en √©l, se puede sentir un deseo imparable de asesinar a alguien en su proximidad. Y este sentimiento empeorar√° a medida que el proyecto va a crecer. Gestor de incidencias Gestor de incidencias Si no est√° utilizando uno ya entonces estoy seguro de que usted ha escuchado al menos de Jira , Hack\u0026Plan , Asana o Trello . De hecho, hay un mont√≥n de ellos y pueden tener un serio problema al decidir cu√°l elegir. Desde mi experiencia no hay una soluci√≥n que puede ser llamada ‚Äúla mejor‚Äù. Todos estos tiene algunas ventajas y desventajas. Le recomiendo comprobar al menos 3 de ellos antes de decidir uno, ser√° lo suficientemente bueno para sus necesidades. Tenga en cuenta que va a aprender lo que realmente necesita s√≥lo despu√©s de unos meses de trabajo con cualquiera de √©l. Yo eleg√≠ Trello unicamente para gestor de incidencias, ya que tiene integraci√≥n con github y notion. ¬øPor qu√© el seguimiento de problemas es importante? Cuando se trabaja en equipo, la buena comunicaci√≥n es la clave. Los seres humanos son criaturas perezosas y olvidadizas. Si le dices a alguien que √©l/ella tiene que hacer algo, √©l/ella recuerda esa tarea con claridad hasta que toneladas de tareas similares caen del cielo. Tienes que aceptar ese simple hecho. Asimismo, no conf√≠e en su propia memoria - se ha demostrado que la necesidad de recordar un mont√≥n de cosas aumenta significativamente su estr√©s. Serializa en texto Es obvio, pero puede a menudo olvidarse. Unity3D est√° utilizando el m√©todo de serializaci√≥n binaria para sus activos de forma predeterminada (hey, chicos de Unity3D! ¬øQui√©n os dijo que ser√≠a una buena idea?). Esto simplemente significa que si dos personas van a modificar una escena, el ajuste de animaci√≥n o un prefab, al mismo tiempo, una persona tendr√° que renunciar a sus cambios a causa de un conflicto. La situaci√≥n es similar a aquel en el que dos chicos salen con la misma chica. Uno de ellos, tarde o temprano va a tener que renunciar (no hablemos acerca de las alternativas, ¬øde acuerdo?). Asset Serialization | Mode | Force Text : se puede activar en el men√∫ Edici√≥n -\u003e Ajustes del proyecto -\u003e Editor Estilo com√∫n de codificaci√≥n Est√© preparado para una gran pelea \u003e.\u003c a los programadores no les gusta cambiar sus h√°bitos. Pero usted y sus colegas todav√≠a tiene que hacerlo, de lo contrario causar√° una gran cantidad de conflictos desagradables en fusiones de c√≥digo. Adem√°s, usted tiene que decidir si los archivos de origen deben utilizar tabuladores o espacios para el sangrado de c√≥digo. Es posible que busque algo as√≠ como una gu√≠a oficial o comunidad de estilo para un idioma espec√≠fico. Hay uno para C# que pueden serle de utilidad. Usted no tiene que seguirlo ciegamente si no est√° de acuerdo con algunas partes de ella, pero cuando haya un desacuerdo dentro de su equipo, puede ser una buena soluci√≥n al problema. Recuerda no forzar ninguna decisi√≥n sobre su equipo si hay un fuerte desaf√≠o en esta materia. Si quiere que le den todo lo que tienen a su proyecto, tiene que hacer que les encante trabajar en √©l, no lo contrario! Pol√≠tica de cambios Algunos assets pueden ser dif√≠ciles de combinar, incluso si se cambia el modo de serializaci√≥n de texto. Puede que s","date":"13-03-2017","objectID":"/posts/2017/dev/002/:0:0","tags":["n9+","dev"],"title":"Consejos para trabajar en equipo","uri":"/posts/2017/dev/002/"},{"categories":["imagen del dia"],"content":" ^^ Artista desconocido\r. ","date":"12-03-2017","objectID":"/posts/2017/imagen/003/:0:0","tags":["n9+","ilustracion"],"title":"Imagen del dia [12.03.2017]","uri":"/posts/2017/imagen/003/"},{"categories":["comun"],"content":" . Esta entrada muestra informaci√≥n sobre el videojuego Bravely Default. El videojuego se ambienta en el mundo de Luxendrac, que se mantiene en equilibrio gracias a los 4 cristales elementales protegidos por la religi√≥n de ‚ÄòCrystal Orthodoxy‚Äô, un grupo que tiene influencias alrededor del mundo. OFICIOS FREELANCER El Freelancer es un trabajo equilibrado en general con un dominio medio en todas las estad√≠sticas y tipos de equipos. Sus habilidades son igualmente habilidades de apoyo equilibradas y habilidades pasivas. Aunque no es un trabajo efectivo en combate, las habilidades del Freelancer pueden ser √∫tiles cuando se combinan con otros trabajos. El Freelancer tambi√©n aprende la habilidad JP Up, que es de gran ayuda para acelerar el crecimiento de otros trabajos. CABALLERO Al igual que el Caballero tradicional en los juegos de Final Fantasy , el Caballero es un trabajo que tiene un alto potencial defensivo y est√° algo centrado en el combate. Su arma especializada son las espadas , y prefiere los escudos m√°s que los yelmos u otras armaduras. Las habilidades del Caballero se centran en manipular el ataque f√≠sico y la defensa, tanto en s√≠ mismo como en sus aliados, para mejorar la capacidad de combate, aunque tambi√©n puede defender a sus aliados del peligro gracias a su impecable defensa. Su conjunto de habilidades es Caballer√≠a. MAGO NEGRO El Mago Negro se especializa en Magia Negra y cuenta con una variedad de hechizos que infligen da√±o y hechizos que cambian de estado. El mago negro conserva una fuerte habilidad m√°gica pero una d√©bil habilidad defensiva y f√≠sica. El Mago Negro depende en gran medida de las varas como armas, pero puede equipar bastones y dagas en menor grado. El trabajo de arcanista puede considerarse una versi√≥n mejorada del trabajo de mago negro y funciona bien en conjunto con las habilidades del mago negro. MAGO BLANCO La fuerza principal del Mago Blanco es la capacidad de lanzar Magia Blanca, que se enfoca principalmente en hechizos de curaci√≥n y mejora, y algunos hechizos ofensivos de Viento. Las estad√≠sticas del mago blanco est√°n orientadas hacia el poder m√°gico, la defensa m√°gica y el MP. Un personaje capaz de lanzar Magia Blanca es fundamental en pr√°cticamente cualquier grupo para mantener con vida a los miembros del grupo; mientras que otros trabajos tienen habilidades curativas, el Mago Blanco es el m√°s efectivo en eso. MAGO ROJO El mago rojo tiene estad√≠sticas significativamente mejores que el mago blanco o el mago negro en la mayor√≠a de las √°reas, a costa de una ligera reducci√≥n en la mente y la inteligencia. Por esta raz√≥n, los jugadores interesados en los roles de mago blanco o mago negro pueden preferir confiar en un mago rojo con con bast√≥n. Aunque el mago rojo solo aprende magia hasta el nivel 4 con su comando B/W Magic. NINJA Tomado liberalmente del trabajo cl√°sico de Ninja en la tradici√≥n de Final Fantasy , el Ninja en Bravely Default usa sus mejoras de doble empu√±adura para convertirlo en una clase enfocada en la ofensiva. Gran parte de sus habilidades involucran la evasi√≥n de ataques usando Ninjutsu y contrarrestando con ambas armas. La √∫nica arma especializada del Ninja es la daga, y su bajo HP y sus afinidades defensivas (en general) lo convierten en una clase de ca√±√≥n de vidrio que puede ser fr√°gil. Sin embargo, con sus t√©cnicas de evasi√≥n, el Ninja proporciona capacidad de supervivencia para eludir estas deficiencias. ARTISTA Los artistas tienen estad√≠sticas bastante equilibradas con su Inteligencia y Agilidad ligeramente mejores, y su Fuerza y Vitalidad ligeramente m√°s pobres. Al igual que los Spiritmasters, se centran en otorgar beneficios y, en general, tienen mejores estad√≠sticas. Los artistas se destacan en el uso de varas, bastones y dagas, pero no son h√°biles en la ofensiva. Su conjunto de habilidades es Canto. VALQUIRIA Principalmente un trabajo centrado en el combate, la valquiria es un espejo del trabajo tradicional de Dragon en la historia de Final Fantasy. Como dicta la tradi","date":"09-03-2017","objectID":"/posts/2017/comun/006/:0:0","tags":["n9+","comun"],"title":"Oficios de Bravely Default","uri":"/posts/2017/comun/006/"},{"categories":["dev"],"content":"Primero preparamos la escena, con colores planos (simples) y alg√∫n objeto para representar en la escena, como una esfera. . Luego configuramos la iluminaci√≥n para el quemado. Lo mas importante seria quitar el bakeo y seleccionar en tiempo real para preparar la escena entera. . A√±adimos una peque√±a animaci√≥n para el movimiento de la luz direccional para ver en tiempo real el movimiento y si esta bien configurado. public float v = 5; private void Update(){ this.transform.Rotate(new Vector3(0,v,0),Space.World);} Despu√©s de ver que todo funciona correctamente. Implementar un Reflection Probe para ver el reflejo de las zonas donde se quieran reflejar. . Configurar el probe: Tipo de reflejo Cuando refresca Resoluci√≥n HDR Etc.. Luego importamos el paquete de unity de characters e instanciamos unos cuantos personajes con AI y un nav mesh para que se pueda mover. . Luego ponemos una esfera o un cubo de objetivo y al reproducir, el personaje seguir√° al objetivo. . Pero el jugador no se ilumina bien por lo que creamos grupos de probes para conseguir toda la reflexi√≥n posible. . . ","date":"09-03-2017","objectID":"/posts/2017/dev/021/:0:0","tags":["n9+","dev"],"title":"Bakeo simple en Unity3D","uri":"/posts/2017/dev/021/"},{"categories":["dev"],"content":"MTodo Tool es una herramienta sencilla para hacer un seguimiento del c√≥digo en Unity3D . MTodo analiza la sintaxis de tu c√≥digo con categor√≠as / etiquetas. Por ejemplo, supongamos que tienes una categor√≠a de BUG, en la linea de tu c√≥digo donde se encuentra ese bug, pondr√≠a : // \u003c Categoria \u003e \u003c Mensaje \u003e // BUG Aqu√≠ hay un bug. MTodo analizara todas las lineas de tu soluci√≥n y recopilara todas las etiquetas que tengan una concordancia con las categor√≠as que se estipulen dentro de la herramienta, dando un sitio central donde se concentra toda la informaci√≥n encontrada. De este modo, tendr√°s en un sitio todos los mensajes que vallas dejando, siempre y cuando uses primero la categor√≠a. Despu√©s solo tienes que ir, d√°ndole click en los mensaje, y se te abrir√° tu IDE por la linea donde esta. GitHub\rTrello\r. ","date":"09-03-2017","objectID":"/posts/2017/dev/020/:0:0","tags":["n9+","dev"],"title":"MTodo Tool","uri":"/posts/2017/dev/020/"},{"categories":["dev"],"content":"¬øPor que publicar algo tan sencillo? Bueno, simplemente para poder hacer r√°pidamente funcionalidades sin tener que crear scripts nuevos y sin tener que arbitrar entre la soluci√≥n mas optima, ya que en un prototipado lo que primero se hace es volver a crear los scripts b√°sicos. Por ello uso estos scripts, que hacen que por ejemplo el environment se cree r√°pidamente y asi concentrarme en la mec√°nica que en si es la que mas trabajo lleva de un prototipo. Esto como ya digo es algo complementario y esta claro que se puede hacer mucho mejor, pero solo e creado una base de la que se puede seguir incorporando nuevas funcionalidades abiertas para nuevos desaf√≠os. De momento solo se han creado 3 scripts b√°sicos, pero aun hay muchos por llegar: Pr√≥ximas incorporaciones\rActualmente hay: ","date":"09-03-2017","objectID":"/posts/2017/dev/019/:0:0","tags":["n9+","dev"],"title":"MDevScripts","uri":"/posts/2017/dev/019/"},{"categories":["dev"],"content":"Scripts AutoDestroy.cs AutoIntensidadLight.cs AutoMove.cs GitHub\r. ","date":"09-03-2017","objectID":"/posts/2017/dev/019/:1:0","tags":["n9+","dev"],"title":"MDevScripts","uri":"/posts/2017/dev/019/"},{"categories":["comun"],"content":"La franquicia Bravely celebra su 4¬∫ aniversario insinuando posibles novedades . Hoy es 11 de octubre, d√≠a que marca el cuarto aniversario de la franquicia Bravely. La cuenta oficial de Twitter de la misma ha lanzado un tweet con una ilustraci√≥n para conmemorar la ocasi√≥n y ha dejado caer que pronto podr√≠a haber novedades. El tweet reza: ‚Äú¬°Es el cuarto aniversario de Bravely! Sentimos la reciente falta de noticias. ¬°¬øHabr√° novedades pronto‚Ä¶?!‚Äú. Por ahora hay cinco entregas de la franquicia: Bravely Default: Flying Fairy (3DS, 2012) Bravely Default: Praying Brage (navegador-PC, 2012) Bravely Default: For the Sequel (3DS, 2013) Bravely Archive: D‚Äôs Report (smartphones, 2015) Bravely Second: End Layer (3DS, 2015) Con esto, las esperanzas de los fans ante el tweet es el anuncio de un hipot√©tico Bravely Third. . . ","date":"08-03-2017","objectID":"/posts/2017/comun/005/:0:0","tags":["n9+","comun"],"title":"Bravely","uri":"/posts/2017/comun/005/"},{"categories":["comun"],"content":"Mec√°nicas presentadas para el TFG Al comienzo de la investigaci√≥n, se propuso unas mec√°nicas Hack \u0026 Slash estilo Devil May Cry, en base a ellas, vimos varias propuestas y redactamos lo que serian los cimientos de las mec√°nicas \u0026 algunas funcionalidades previstas: ","date":"05-03-2017","objectID":"/posts/2017/comun/004/:0:0","tags":["n9+","comun"],"title":"Mec√°nicas TFG - Investigaci√≥n","uri":"/posts/2017/comun/004/"},{"categories":["comun"],"content":"Accionar y combinar combos, entre 4 estilos de lucha: . Ataque fuerte. Ataque r√°pido. Ataque a distancia. Salto / Salto doble. ","date":"05-03-2017","objectID":"/posts/2017/comun/004/:0:1","tags":["n9+","comun"],"title":"Mec√°nicas TFG - Investigaci√≥n","uri":"/posts/2017/comun/004/"},{"categories":["comun"],"content":"Tambi√©n extras como: Esquive. Bloqueo. Cambio. ","date":"05-03-2017","objectID":"/posts/2017/comun/004/:0:2","tags":["n9+","comun"],"title":"Mec√°nicas TFG - Investigaci√≥n","uri":"/posts/2017/comun/004/"},{"categories":["comun"],"content":"C√°mara en 3¬™ Persona: El pivote de la c√°mara siempre esta fijada en la cabeza del personaje. La c√°mara no cambia el pivote nunca, solo el campo de visi√≥n se altera. ","date":"05-03-2017","objectID":"/posts/2017/comun/004/:0:3","tags":["n9+","comun"],"title":"Mec√°nicas TFG - Investigaci√≥n","uri":"/posts/2017/comun/004/"},{"categories":["comun"],"content":"Combinaci√≥n de acciones para realizar combos. El jugado podr√° ir desbloqueando partes del combo con forme luche. El jugador podr√° cambiar al personaje, con lo que cambia el estilo de lucha (Ej: Armas =\u003e Mele) Con cada combo sin cortar la cadena, el jugador recibe como recompensa rabia, la rabia puede llegar a nivel 3, cuando esta llega, el jugador puede consumir toda la rabia y ser imparable durante un tiempo. Cuando el jugador derrota a todos los enemigos de la zona, al ultimo le realiza un fatality en c√°mara lenta. Asi que teniendo todas las mec√°nicas pensadas, habr√≠a que crear el mapa de teclas, que con pc no habr√≠a problema pero al ser un mapa de mando, hay que crear una peque√±a tabla e introducir plugins que nos ahorrar√≠a mucho tiempo. Bot√≥n Acci√≥n A Salto B Ataque Distancia Y Ataque Fuerte X Ataque R√°pido RB Fijar Objetivo RT Esquivar LB Cambio LT Bloquear Start Menu Back Habilidades Stick derecho Mover C√°mara Stick Izquierdo Mover Personaje Ahora como objetivo, me quer√≠a enfocar mas al tema Nier : Automata, se asemeja mucho a Devil May Cry, pero es mucho mas r√°pido e intuitivo, realmente nier esta pensado para una lucha r√°pida y t√°ctica en su nivel normal, de lo que me e dado cuenta es que DMC en su nivel normal es simplemente atacar atacar y mas atacar. En esta parte entrare mas adelante, ya que creo que tiene mucho que ver la combinaci√≥n de ataques y la IA de los diferentes enemigos, por lo que se nos sale de lo que quiero tener para el mi√©rcoles. . ","date":"05-03-2017","objectID":"/posts/2017/comun/004/:0:4","tags":["n9+","comun"],"title":"Mec√°nicas TFG - Investigaci√≥n","uri":"/posts/2017/comun/004/"},{"categories":["dev"],"content":"Escena de carga en Unity3D con varios ejemplos. Se puede usar plugins como NGUI o si lo prefieres el mismo UGUI incorporado en Unity 5+. Esta version esta probada para ¬†Unity3D 5.5.1p4. El planteamiento es que el logo siguiente, hiciera un fade-in y un fade-out en un tiempo. Es decir una transici√≥n hacia dentro y otra hacia afuera como se ve en el siguiente ejemplo. El repositorio de ejemplo lo ten√©is al final de la entrada. Pod√©is descargarlo desde github y modificar todo lo que quer√°is. . ","date":"04-03-2017","objectID":"/posts/2017/dev/018/:0:0","tags":["n9+","dev"],"title":"Unity3D Carga de nivel [Logo]","uri":"/posts/2017/dev/018/"},{"categories":["dev"],"content":"Antes de empezar: Para UGUI, solo tienes que importar el paquete de ¬†u.preloader, entrar a la escena de ejemplo(SandBox) y reproducir. . Para NGUI, importar primero el plugin de NGUI y despu√©s el paquete de ¬†u.preloader, sino podr√≠as tener errores en las escenas de los ejemplos. En la definici√≥n de s√≠mbolos (Scripting Define Symbols), hay que definir NGUI para que reconozca que tienes NGUI en tu proyecto. . Por ultimo solo tienes que desactivar el Canvas y activar el RootUI. El Canvas contiene el ejemplo general usando la nueva UI de Unity. En cambio RootUI contiene el ejemplo con el framwork de NGUI. ","date":"04-03-2017","objectID":"/posts/2017/dev/018/:1:0","tags":["n9+","dev"],"title":"Unity3D Carga de nivel [Logo]","uri":"/posts/2017/dev/018/"},{"categories":["dev"],"content":"Assets: La imagen del logo de prueba es de ‚Äâ„Éä„ÉÄ„É¨ . ","date":"04-03-2017","objectID":"/posts/2017/dev/018/:2:0","tags":["n9+","dev"],"title":"Unity3D Carga de nivel [Logo]","uri":"/posts/2017/dev/018/"},{"categories":["dev"],"content":"Repositorio GitHub\r. ","date":"04-03-2017","objectID":"/posts/2017/dev/018/:3:0","tags":["n9+","dev"],"title":"Unity3D Carga de nivel [Logo]","uri":"/posts/2017/dev/018/"},{"categories":["imagen del dia"],"content":" Cazadora pelirroja con su lobo ^^ Mu si\r. ","date":"02-03-2017","objectID":"/posts/2017/imagen/002/:0:0","tags":["n9+","ilustracion"],"title":"Imagen del dia [03.03.2017]","uri":"/posts/2017/imagen/002/"},{"categories":["imagen del dia"],"content":" Samus metroid, √©pica ^^ Artista desconocido\r. ","date":"02-03-2017","objectID":"/posts/2017/imagen/001/:0:0","tags":["n9+","ilustracion"],"title":"Imagen del dia [02.03.2017]","uri":"/posts/2017/imagen/001/"},{"categories":["comun"],"content":" . The Alliance Alive FuRyu ha liberado el primer tr√°iler y dado m√°s detalles de The Alliance Alive, su nuevo RPG para Nintendo 3DS desarrollado por Cattle Call (Legend of Legacy) y que cuenta con historia de Yoshitaka Murayama, creador de Suikoden. La historia Hace miles de a√±os, el mundo habitado por los humanos fue invadido por los Asmodias. Los Asmodians invadieron el mundo para tomar el control de la ‚ÄúEnerg√≠a del Caos‚Äù, algo que amenaza su propio mundo, se convirtieron en gobernantes y pusieron una ‚Äúgran barrera‚Äù al planeta. La gran barrera caus√≥ grandes perturbaciones al campo magn√©tico del planeta, haciendo que el clima se descontrolase y que el ‚Äúcielo azul‚Äù desapareciese para siempre. Como efecto de esta distorsi√≥n, naci√≥ el oc√©ano conocido como ‚ÄúCaos Oscuro‚Äù, el cual se trag√≥ muchas ciudades. La mayor√≠a de los humanos muri√≥, y los pocos que sobrevivieron lo hicieron a duras penas debido a la dur√≠sima ruta marina y tuvieron que aceptar a los Asmodians como gobernantes. Cientos de a√±os despu√©s, el mundo se ha dividido en varias zonas y una nueva jerarqu√≠a con los Asmodians en la c√∫spide se ha extendido por todo el mundo. Esto dio origen tambi√©n a una nueva cultura. Sin embargo, por muchos a√±os que hayan pasado, las llamas de la revoluci√≥n todav√≠a no se han apagado en los humanos. Ahora, el mundo comienza a ponerse en marcha de nuevo‚Ä¶ Mundos Con la aparici√≥n del oc√©ano conocido como ‚ÄúCaos Oscuro‚Äù en los mares, el mundo queda dividido y las rutas marinas cortadas, impidiendo toda comunicaci√≥n con el exterior. Cada zona aislada se convierte en un mundo propio en el que los humanos son gobernado por los Asmodians. Aqu√≠ podremos encontrar mundos de lluvia, de fuego o incluso un mundo prisi√≥n. . . . Los protagonistas El juego cuneta con nueve protagonistas, cambiando de perspectiva de uno a otro y viviendo la historia del enfrentamiento de las dos razas. El destino de los protagonistas ir√° convergiendo poco a poco hasta reunirlos a todos. Galil . Un humano de 15 a√±os que pertenece a la resistencia conocida como ‚ÄúCuervos de la noche‚Äù. Es amable pero muy apasionado. Ursula . Una humana de 15 a√±os que pertenece a la resistencia conocida como ‚ÄúCuervos de la noche‚Äù. Es una joven siempre animada que se dedica a manipular a Galil y cuyas verdaderas intenciones no suelen ser evidentes. Barbarosa . Un soldado fantasma de 36 a√±os que pertenece a la resistencia conocida como ‚ÄúCuervos de la noche‚Äù. Jur√≥ lealtad al padre de Ursula, quien en una ocasi√≥n salv√≥ su vida. Viviana . Una Asmodian de 20 a√±os hija de un ser m√°gico noble. Una historiadora de personalidad tranquila con gran inter√©s por el mundo humano. Ignace . Un Asmodian de 25 a√±os y mayordomo que trabaja para Vivian. Valora en gran medida la clase y la disciplina. Rachel . Mercernaria humana de 28 a√±os contratada por el Gremio M√°gico. Es una mujer amable y de las que hacen lo primero que se les pasa por la cabeza sin pensar demasiado. Renzo . Un joven humano de 19 a√±os que pertenece a la resistencia conocida como ‚ÄúCuervos de la noche‚Äù. Siempre bien informado y optimista, sus ojos reflejan una gran calma. Gene . Humano de 27 a√±os y usuario de magia del Gremio M√°gico que es subordinado de los seres m√°gicos. Tiene una mente abierta y no se deja llevar por el momento. Tiggy . Una humana de 12 a√±os que investiga el Caos Oscuro. Es una profesora autoproclamada que ha creado varios inventos. Lucha contra los monstruos montada en su armadura ‚ÄúSwan Song‚Äù. El combate El sistema de combate por turnos permitir√° participar hasta a cinco personajes en cada batalla. El sistema enfatiza el tempo y cuenta con una funci√≥n de avance r√°pido para que el tiempo pase hasta cuatro veces m√°s r√°pido de lo normal. Los encuentros con los enemigos se dar√°n cuando se toque un monstruo en el mapa. . El tr√°iler . ","date":"02-03-2017","objectID":"/posts/2017/comun/002/:0:0","tags":["n9+","comun"],"title":"The Alliance Alive","uri":"/posts/2017/comun/002/"},{"categories":["dev"],"content":"¬øQue es monomito? Seg√∫n esta teor√≠a, todas y cada una de las grandes historias siguen un patr√≥n que se divide en 12 pasos, cada uno de ellos con unas caracter√≠sticas diferentes y que var√≠an de una historia a otra y tambi√©n de una √©poca a otra. No todas las etapas del Viaje del h√©roe son siempre invariables ni todos los personajes son siempre los mismos o del mismo tipo, pero s√≠ hay ciertos elementos que son siempre constantes de una historia a otra. El viaje del Heroe 12 Pasos de Monomito Hay 12 pasos estandarizados, en los que se puede crear un guion con los patrones de monomito. 1. Mundo ordinario ‚Äì El mundo en el que el h√©roe vive, su entorno habitual. Luke vive en la granja con sus t√≠os deseando unirse a la academia mientras el Imperio oprime la Galaxia. 2. Llamada a la aventura ‚Äì A nuestro h√©roe se le presenta un desaf√≠o o aventura. R2D2 muestra el holograma con la princesa en peligro y Luke siente la necesidad de ayudarla. 3. Rechazo a la llamada ‚Äì El h√©roe rechaza enfrentarse al desaf√≠o por miedo a lo desconocido. Luke siente que se debe quedar a ayudar a sus t√≠os en la granja y no se atreve a marcharse. 4. Encuentro con el mentor ‚Äì El h√©roe se encuentra con un mentor que le gu√≠a, le da herramientas, entrenamiento o consejos. O puede ser el encuentro con una fuente de valor y sabidur√≠a. Luke ve el resto del mensaje de R2D2 y as√≠ sabe de la existencia de los planos de la Estrella de la Muerte. Obi-Wan le da el sable l√°ser de su padre. 5. Cruce del umbral ‚Äì Al final del primer acto el h√©roe decide cruzar el umbral y adentrarse en un Mundo Especial o estado nuevo con reglas desconocidas. Los t√≠os de Luke son asesinados y √©ste decide ir a Mos Eisley con Obi-Wan para alquilar una nave que les lleve a Alderaan y poder informar de los planes del Imperio a los rebeldes. 6. Pruebas, aliados y enemigos ‚Äì El h√©roe se tiene que enfrentar a pruebas y enemigos y conocer√° a nuevos aliados. En la cantina Obi-Wan salva a Luke usando la Fuerza. Contratan a Han Solo y a Chewbacca y se tienen que enfrentar a los Stormtroopers que les impiden la huida. 7. Acercamiento ‚Äì El h√©roe y sus aliados se preparan para la gran prueba. Luke aprende a usar la Fuerza. El Halc√≥n Milenario es atrapado y llevado a la Estrella de la Muerte. 8. La gran prueba ‚Äì Cerca de la mitad de la historia, el h√©roe se enfrenta a la mayor prueba de vida o muerte en el Mundo Especial o se enfrenta a su mayor miedo. El h√©roe surge renacido tras esta prueba. En la Estrella de la Muerte rescatan a la princesa disfrazados de Stormtroopers. Les descubren y tiene que probar su val√≠a enfrent√°ndose a los soldados imperiales. 9. Recompensa ‚Äì El h√©roe recibe una recompensa por haberse enfrentado a la muerte. En el compactador de basura Luke es arrastrado bajo el agua por un monstruo, pero es rescatado por sus amigos. Comienzan a trabajar en equipo para escapar. 10. El camino de vuelta ‚Äì Cuando ya han pasado tres cuartas partes de la historia el h√©roe debe volver al Mundo Ordinario y completar la aventura. Obi-Wan se sacrifica para ayudar al grupo a escapar. La Estrella de la Muerte les sigue hasta donde se encuentran los rebeldes. Luke se une al ataque rebelde. 11. Resurrecci√≥n del h√©roe ‚Äì En el cl√≠max de la historia, y cerca del umbral de vuelta, el h√©roe se tiene que enfrentar a otra gran prueba de vida o muerte. Otro renacer, pero a un nivel m√°s completo y personal. En la batalla final Luke oye la voz de Obi-Wan y usa la Fuerza para poder realizar un disparo casi imposible que destruye la Estrella de la Muerte. 12. Regreso con el elixir ‚Äì El h√©roe regresa a casa o contin√∫a el camino llevando partes del tesoro que le permitir√°n transformar el mundo al igual que √©l ha sido transformado. El malvado Imperio ha sido destruido. Se honra al grupo como si fuesen h√©roes y se restaura la paz en la galaxia. ¬†Referencia Mundo Ordinario/Especial 17 Pasos de Monomito Hay una version moderna y extendida pero menos usada de los 12 pasos estandarizados, en los que se puede crear un guion con los","date":"01-03-2017","objectID":"/posts/2017/dev/001/:0:0","tags":["n9+","dev"],"title":"Investigaci√≥n Monomito","uri":"/posts/2017/dev/001/"},{"categories":["dev"],"content":" . (ACTUALIZADO A 21/07/2022) Mega es el sucesor del servicio de archivos en la nube Megaupload, para aquellos a los que no les suena ninguno de los dos es como un dropbox, un servicio gratuito o de pago dependiendo del espacio que utilizamos para poder subir nuestros archivos. En mi opini√≥n es un servicio incre√≠ble que nos permite almacenar copias de seguridad de archivos en la nube y/o compartirlos. En esta entrada mostrar√© como desde un proyecto en .Net en este caso con C# pod√©is subir archivos a mega. Adem√°s de subir archivos tambi√©n podr√©is eliminar, modificar, mover y varias funciones m√°s pero eso lo veremos en otra entrada. Para comenzar tendr√©is que incorporar a vuestro proyecto varias referencias, si lo realiz√°is desde el administrador de paquetes nuget de Visual Studio ahorrar√©is tiempo y faena. Para abrir el administrador de paquetes nuget vamos a la barra principal de arriba y seleccionamos proyecto y administrar paquetes nuget. En la caja de b√∫squeda pon√©is ‚Äúmega.co.nz‚Äù sin comillas, y debe aparecer una librer√≠a que har√° de cliente contra los servidores de mega, la seleccion√°is y le dais a instalar. Adem√°s instalar√° autom√°ticamente otra llamada Newtonsoft.Json que utilizar√° la librer√≠a mega para realizar algunas acciones. Tenemos el proyecto listo para empezar a utilizar los m√©todos y funciones que nos facilita mega en la clase que queramos, con ello vamos a la clase desde la que queramos que se suba el archivo y a√±adimos dos directivas using, la primera hace referencia a la api mega y la segunda nos permitir√° crear un hilo y de este modo no bloquear nuestra aplicaci√≥n mientras se realizan algunas tareas en l√≠nea: using CG.Web.MegaApiClient; using System.Threading.Tasks; Ahora vamos con el m√©todo que se encargar√° de realizar la subida del archivo, actualizar la barra de progreso, y actualizar el texto de un label que ir√° informando al usuario de como va el proceso. El m√©todo es llamado dentro del evento ‚ÄúShown‚Äù del form, y el form lo llamo mediante ‚ÄúShowDialog()‚Äù desde el evento click de un bot√≥n de otro form, de esta manera es como una ventana emergente que no desaparecer√° hasta que termine el proceso (entre 10 y 40 segundos). Para que quede mas claro, tenemos el ‚ÄúForm1‚Äù con un bot√≥n, este bot√≥n llamar√° al ‚ÄúForm2‚Äù mediante ‚ÄúShowDialog()‚Äù, y dentro del evento ‚ÄúShown‚Äù del ‚ÄúForm2‚Äù realizaremos la llamada al m√©todo encargado de subir el archivo ‚ÄúsubirArchivoAMega()‚Äù. //Declaraci√≥n de un hilo private Thread t; private string cuenta = \"cuenta@dominio.com\"; private string contra = \"******************\"; private string nomCar = \"carpeta\"; //Evento Shown que instancia y ejecuta el hilo (este evento se ejecuta despu√©s del Load). private void Form2_Shown(object sender, EventArgs e) { //Instancia un hilo para ejecutar el m√©todo \"subirArchivoAMega\". t = new Thread(subirArchivoAMega); t.Start(); } // M√©todo que se encarga de subir el archivo a la nuve con la api \"Mega\". private void subirArchivoAMega() { try { // Actualizar el label para informar al usuario. txtInfo.Invoke(new MethodInvoker(delegate { txtInfo.Text = \"Conectando como \" + cuenta; })); // Aumentar la barra de progreso. barraProgreso.Invoke(new MethodInvoker(delegate { barraProgreso.PerformStep(); })); // Instancia de un cliente para conectar con mega. MegaApiClient cliente = new MegaApiClient(); // Inicio de sesiÔøΩn con el cliente, pasando el correo y la contraseÔøΩa de la cuenta mega a la // que se sube el archivo. cliente.Login(cuenta, contra); // Aumentar la barra de progreso. barraProgreso.Invoke(new MethodInvoker(delegate { barraProgreso.PerformStep(); })); // Actualizar el label para informar al usuario. txtInfo.Invoke(new MethodInvoker(delegate { txtInfo.Text = \"Obteniendo directorios...\"; })); // Obtenemos los nodos (directorios/archivos) de la cuenta dentro de una variable. var nodos = cliente.GetNodes(); // Actualizar el label para informar al usuario. txtInfo.Invoke(new MethodInvoker(delegate { txtInfo.Text = \"Buscando carpeta \" + nomCar + \"...\"; })); // C","date":"01-03-2017","objectID":"/posts/2017/dev/017/:0:0","tags":["n9+","dev"],"title":"MEGA API CLIENT [C#]","uri":"/posts/2017/dev/017/"},{"categories":["comun"],"content":" . Anunciado The Witch and the Hundred Knight 2 para PlayStation 4 El √∫ltimo n√∫mero de la revista Famitsu revela que The Witch and the Hundred Knight 2 se lanzar√° en invierno de 2017 en las PlayStation 4 japonesas. Noticia El juego contar√° una nueva historia en un mundo diferente al de la primera entrega. En esta ocasi√≥n el tema ser√° ‚Äúbrujas‚Äù y ‚Äúenfermedad‚Äù, tomando los jugadores el rol del Hundred Knight (voz de Kaoru Mizuhara), invocado por la bruja Cerca para combatir bajo sus √≥rdenes. El protagonismo estar√° compartido por el propio Hundred Knight y una chica llamada Amalie. Los personajes presentados son: Mimil (voz de Megumi Han) ‚Äì La hermana menor de Amalie. Pasa por una operaci√≥n debido a un tercer ojo que le aparece en la frente, lo que se conoce como ‚ÄúEnfermedad de la bruja‚Äù. La operaci√≥n fracasa y se convierte en bruja. Cerca (voz de Megumi Han) ‚Äì El nombre de Mimil convertida en bruja. Tiene un gran poder y solo obedece a sus propios deseos ego√≠stas. En ocasiones vuelve a convertirse en Mimil debido a que su conversi√≥n fue imperfecta. Funinmugin (voz de Kenjiro Tsuda) ‚Äì El familiar de Cerca. Un cuervo que se transforma en mayordomo para hacer las labores del hogar. Es gay y tiene hijos. Amalie (voz de Sachika Misawa) ‚Äì Hermana mayor de Mimil. Pertenece a una organizaci√≥n antibrujas llamada WR (Weiss Ritter). Se enfrenta a la organizaci√≥n para proteger a su hermana, reci√©n convertida en bruja. . Otros datos del juego, incluyendo varios extra√≠dos de una entrevista con el director Kenta Asano: Los dise√±os del juego ser√°n de Madoka Hanashiro. La oportunidad para crear este juego surgi√≥ tras el buen recibimiento del primer juego. Trabajaron en el port del primero y en esta segunda entrega al mismo tiempo. Se han revisado por completo los controles y esperan crear un sistema que encaje con la historia. El director y el dise√±ador de personajes cambian debido a que dan por concluida la historia de Metallia con el anterior juego. Este es un t√≠tulo completamente diferente. El volumen ser√° equivalente o mayor al del primer juego. La base es la misma, pero se han hecho cambios para que la acci√≥n sea m√°s c√≥moda, precisa y placentera. Habr√° m√°s t√°cticas. No habr√° modos adicionales, pero como el mapa ser√° procedural, el propio mapa de la historia ser√° un elemento rejugable. . PlayStation Store\r. ","date":"01-03-2017","objectID":"/posts/2017/comun/001/:0:0","tags":["n9+","comun"],"title":"The Witch and the Hundred Knight 2","uri":"/posts/2017/comun/001/"},{"categories":["dev"],"content":"IA en Videojuegos Hay diferentes tipos de IA clasificados por el tipo de uso de su algoritmo. Los mas comunes en videojuegos son: Juegos de suma cero: Minimax B√∫squeda de caminos: A* Agentes inteligentes Maquina de estados finitos Redes neuronales Algoritmos gen√©ticos Redes evolutivas: rtNeat Algoritmo MinMax Juegos de suma cero son juegos en los que solo tienen 2 resultados, o 3. Como por ejemplo el ajedrez, Minimax es un algoritmo para realizar la elecci√≥n de la mejor acci√≥n para ganar. Algoritmo Minimax: se basa en probar todas las posibles jugadas y sus respuestas hasta un nivel m√°ximo.(Tic Tac Toe) El algoritmo responde con la mejor jugada posible suponiendo que el adversario tambi√©n elige su mejor jugada. El t√©rmino poda alfa-beta es como bien dice la poda de ramas del √°rbol de elecci√≥n para ahorrar tiempo y memoria de computaci√≥n. Algoritmo A* B√∫squeda de caminos, A* es el algoritmo para que un objeto encuentre el camino y lo siga a voluntad. Este tipo de algoritmos se llaman pathfinding. Son algoritmos que buscan un camino existente entre un nodo inicial y un nodo final de un grafo. Se tiene en cuenta un coste entre nodos ( distancia, dificultad de l terreno). Algoritmos t√≠picos: Dijkstra, escalada, primero el mejor, A* Agentes inteligentes son algoritmos que cambian seg√∫n el estado del entorno. Un agente inteligente es una entidad que percibe y act√∫a sobre un entorno de forma razonada. Las propiedades de un agente inteligente son: Autonom√≠a: act√∫a por su cuenta propia. Inteligencia: cerrada o adaptable (Aprendizaje) Actividad Reactiva: act√∫a despu√©s de alg√∫n suceso producido en el entorno. Actividad Proactiva: decide actuar antes de que se de un suceso. Sociabilidad: Cooperar con los aliados o ayudar sin que nos pidan ayuda. . Una maquina de estados finitos (SFM) es una entidad abstracta formada por estados y transiciones entre dichos estados. Cada estado representa una acci√≥n: moverse, disparar, perseguir ‚Ä¶ Cuando se produce un evento, hay una transici√≥n de un estado a otro: no hay enemigos, moverse, poca munici√≥n, etc‚Ä¶ Una red de neuronas artificiales (RNA) es un sistema computacional que imita las capacidades de los sistemas biol√≥gicos utilizando muchos elementos simples interconectados. Red Neuronal Clasifica patrones de entrada. Necesitan entrenamiento supervisado con muchos ejemplos. Son capaces de generalizar el reconocimiento de patrones. Una vez entrenadas, funcionan en tiempo real. . ","date":"01-03-2017","objectID":"/posts/2017/dev/015/:0:0","tags":["n9+","dev"],"title":"Explicaci√≥n IA b√°sica","uri":"/posts/2017/dev/015/"},{"categories":["dev"],"content":"Los comandos fundamentales que se usan en git. Los comandos fundamentales que se usan en git son muchos, pero dependiendo del tipo de control de versiones que uno esta realizando en ese momento. Por ejemplo si estas haciendo un control de versiones de un proyecto en el que solo participas tu, usaras los indispensables ya que con dejar el proyecto abierto para que otros puedas entrar sin problemas de cambiar la config sobra. ","date":"01-03-2017","objectID":"/posts/2017/dev/016/:0:0","tags":["n9+","dev"],"title":"Comandos fundamentales de GIT","uri":"/posts/2017/dev/016/"},{"categories":["dev"],"content":"Inicializar: git init {Crea un nuevo repositorio} git clone /ruta/de/repositorio {Crea una copia local del repositorio} ","date":"01-03-2017","objectID":"/posts/2017/dev/016/:1:0","tags":["n9+","dev"],"title":"Comandos fundamentales de GIT","uri":"/posts/2017/dev/016/"},{"categories":["dev"],"content":"Registro git add \u003cnombre de archivo\u003e {Agrega solo el fichero dado al registro} git add . {Agrega todos los cambios realizados al registro} ","date":"01-03-2017","objectID":"/posts/2017/dev/016/:2:0","tags":["n9+","dev"],"title":"Comandos fundamentales de GIT","uri":"/posts/2017/dev/016/"},{"categories":["dev"],"content":"Empaquetado git commit -m \"Mensaje\" {Empaqueta el registro para ser mandado} ","date":"01-03-2017","objectID":"/posts/2017/dev/016/:3:0","tags":["n9+","dev"],"title":"Comandos fundamentales de GIT","uri":"/posts/2017/dev/016/"},{"categories":["dev"],"content":"Envi√≥ git push origin master {Env√≠a el paquete(Commit) por la rama \"master\" al repositorio} ","date":"01-03-2017","objectID":"/posts/2017/dev/016/:4:0","tags":["n9+","dev"],"title":"Comandos fundamentales de GIT","uri":"/posts/2017/dev/016/"},{"categories":["dev"],"content":"Ramas git checkout -b dev {Crea una rama llamada \"dev\" y c√°mbiate a ella} git checkout master {Cambiar de rama} git branch -d dev {Borra la rama \"dev\"} git push origin \u003cbranch\u003e {Env√≠a al repositorio la nueva rama para actualizarla a todo el mundo} ","date":"01-03-2017","objectID":"/posts/2017/dev/016/:5:0","tags":["n9+","dev"],"title":"Comandos fundamentales de GIT","uri":"/posts/2017/dev/016/"},{"categories":["dev"],"content":"Actualizaci√≥n git pull {Descarga los nuevos cambios del repositorio} git merge \u003crama\u003e {Fusiona la rama dada con tu rama actual} ","date":"01-03-2017","objectID":"/posts/2017/dev/016/:6:0","tags":["n9+","dev"],"title":"Comandos fundamentales de GIT","uri":"/posts/2017/dev/016/"},{"categories":["dev"],"content":"Etiquetas git tag 1.0.0 {Creas una nueva etiqueta llamada 1.0.0} git tag 1.0.0 1b2e1d63ff {Creas una nueva etiqueta haciendo referencia a 1b2e1d63ff} git log {Sacas el id del commit} y eso es todo de momento. Estos son los comandos que mas usaras. Pero si quieres pasar de usar consola y te ves mas c√≥modo con una interfaz gr√°fica, puedes usar diferentes clientes tales como: GitHub Desktop(Win \u0026 Mac)\rSourceTree(Win \u0026 Mac)\rGitKraken(Win/Mac/Linux)\r. ","date":"01-03-2017","objectID":"/posts/2017/dev/016/:7:0","tags":["n9+","dev"],"title":"Comandos fundamentales de GIT","uri":"/posts/2017/dev/016/"},{"categories":["devblog"],"content":"MINI DEMO INTERNA INTRODUCIR TODO LO JUGABLE DEL PROTOTIPO 4 meses para crear un prototipo fiable Octubre 2016 - Enero 2017 . ","date":"06-01-2017","objectID":"/posts/2017/devblog/001/:0:0","tags":["n9+","devblog"],"title":"[PROTOTIPO][#12] Mini Demo Interna","uri":"/posts/2017/devblog/001/"},{"categories":["devblog"],"content":"TEST RENDIMIENTO EN CIUDADES TEST DE RENDIMIENTO EN MAPAMUNDI TEST DE RENDIMIENTO IA OPTIMIZACIONES . ","date":"30-12-2016","objectID":"/posts/2016/devblog/011/:0:0","tags":["n9+","devblog"],"title":"[PROTOTIPO][#11] Test","uri":"/posts/2016/devblog/011/"},{"categories":["devblog"],"content":"SISTEMA DE COLECCION CID CID 2V2 . ","date":"23-12-2016","objectID":"/posts/2016/devblog/010/:0:0","tags":["n9+","devblog"],"title":"[PROTOTIPO][#10] Cid","uri":"/posts/2016/devblog/010/"},{"categories":["devblog"],"content":"ACAMPADA REGENERACION FUERA DE COMBATE PUNTOS DE GUARDADO EN CIUDADES . ","date":"16-12-2016","objectID":"/posts/2016/devblog/009/:0:0","tags":["n9+","devblog"],"title":"[PROTOTIPO][#9] Acampada","uri":"/posts/2016/devblog/009/"},{"categories":["devblog"],"content":"IA ENEMIGOS IA ALIADA IA CARDINAL/ORDINAL (EVENTOS) . ","date":"09-12-2016","objectID":"/posts/2016/devblog/008/:0:0","tags":["n9+","devblog"],"title":"[PROTOTIPO][#8] IA","uri":"/posts/2016/devblog/008/"},{"categories":["devblog"],"content":"CICLO NIDOS EVENTOS DEPENDIENDO DEL CICLO . ","date":"02-12-2016","objectID":"/posts/2016/devblog/007/:0:0","tags":["n9+","devblog"],"title":"[PROTOTIPO][#7] Ciclos","uri":"/posts/2016/devblog/007/"},{"categories":["devblog"],"content":"INVENTARIO NPCS HABITOS NPCS UNIDADES . ","date":"25-11-2016","objectID":"/posts/2016/devblog/006/:0:0","tags":["n9+","devblog"],"title":"[PROTOTIPO][#6] Unidades","uri":"/posts/2016/devblog/006/"},{"categories":["devblog"],"content":"OBJETOS HABILIDADES COMBATE . ","date":"18-11-2016","objectID":"/posts/2016/devblog/005/:0:0","tags":["n9+","devblog"],"title":"[PROTOTIPO][#5] Combate","uri":"/posts/2016/devblog/005/"},{"categories":["devblog"],"content":"INTERACCIONES MAPA COMPORTAMIENTO . ","date":"11-11-2016","objectID":"/posts/2016/devblog/004/:0:0","tags":["n9+","devblog"],"title":"[PROTOTIPO][#4] Interacciones","uri":"/posts/2016/devblog/004/"},{"categories":["devblog"],"content":"CARGA DE NIVELES PERSONAJE NPC . ","date":"04-11-2016","objectID":"/posts/2016/devblog/003/:0:0","tags":["n9+","devblog"],"title":"[PROTOTIPO][#3] Personaje","uri":"/posts/2016/devblog/003/"},{"categories":["devblog"],"content":"MENU PRINCIPAL LOCALIZACION TABLERO SONIDO . ","date":"28-10-2016","objectID":"/posts/2016/devblog/002/:0:0","tags":["n9+","devblog"],"title":"[PROTOTIPO][#2] Men√∫ Principal","uri":"/posts/2016/devblog/002/"},{"categories":["devblog"],"content":"ARQUITECTURA Una arquitectura de software no es mas que unas reglas que seguir para desarrollar una aplicaci√≥n. Siguiendo estas reglas se resuelven los problemas modernos que puede ocasionar tener un desarrollo largo sin reglas. ¬øOs imagin√°is üòÖ? Tambi√©n es necesario un motor de videojuegos, yo me decanto por Unity 3D. Es un motor con mucha comunidad, mucha documentaci√≥n y con el que mas he desarrollado. Ante todo decir que no soy ning√∫n experto ni mucho menos me acerco. Puede ser que mi planteamiento sea lejano o incluso err√≥neo, pero de los errores se aprende. Al ser un juego con mucha cantidad de datos (T√°ctico) y no necesitar un intercambio fren√©tico de informaci√≥n din√°mica, de todos los patrones de dise√±o me decanto mas por el Modelo-vista-controlador (MVC). Ya entro con un pie mal, ya que Unity 3D tiene una arquitectura Entidad-Componente (EC), pero eso no afectara a nuestro patr√≥n siempre y cuando tengamos las referencias bien atadas. Como pone en el titulo, esto es un prototipo para ver si es viable la idea de videojuego que tengo en mi cabeza. Nada es definitivo y seguramente en lo que tarde en terminar el proyecto se cambiaran muchas cosas. De momento con cubos nos conformamos üíØ ","date":"21-10-2016","objectID":"/posts/2016/devblog/001/:1:0","tags":["n9+","devblog"],"title":"[PROTOTIPO][#1] Comienzo","uri":"/posts/2016/devblog/001/"},{"categories":["devblog"],"content":"INICIO Menu Principal ","date":"21-10-2016","objectID":"/posts/2016/devblog/001/:2:0","tags":["n9+","devblog"],"title":"[PROTOTIPO][#1] Comienzo","uri":"/posts/2016/devblog/001/"},{"categories":["devblog"],"content":"PERSISTENCIA Me gustar√≠a dejar zanjado el sistema de persistencia desde el principio, ya que es una parte muy importante para poder crear ciertos puntos de guardado en cada una de las versiones y poder probar de nuevo el mismo camino y comprobar si algo se a roto. Unity tiene una secci√≥n donde explica su sistema de persistencia PlayerPrefs. Aunque empieza defini√©ndote su clase como un sistema de persistencia, termina dici√©ndote que no es una soluci√≥n viable para producci√≥n. Por lo tanto decid√≠ realizar una investigaci√≥n de las formas mas comunes de guardar datos en disco. El resumen es que hay dos formas viables entre muchas otras: Serializaci√≥n Binaria \u0026 Texto Plano. Cada uno con sus ventajas y desventajas. La serializaci√≥n binaria es mucho mas r√°pida pero puede causar el t√≠pico guardado corrupto. El texto plano es algo mas lento pero no se suele corromper y puede ser visto desde un editor de texto. Volvamos a este punto algo mas tarde. La gesti√≥n de datos va a ser muy grande y mas en este tipo de juegos, por lo que lo voy a gestionar internamente con ¬†Scriptable Objects, que son una nueva clase que ha implementado Unity para poder almacenar grandes cantidades de datos con un m√≠nimo de memoria ocupada. Esto son buenas noticias, ya que son f√°cilmente editables desde el inspector y no hay que ir creando archivos externos que luego ir cambiando como datos planos. ¬øCual es el problema entonces?, pues que solo guardan datos est√°ticos, en cierto modo, no es as√≠, sino que son datos que se pueden modificar en tiempo de ejecuci√≥n pero luego al cerrar el entorno (en este caso el juego), vuelven a su estado inicial. Estado Inicial Estado En Ejecuci√≥n Estado Final int 0 int 2 int 2 bool true bool false bool true Quitando este detalle, la nueva clase ScriptableObject es muy potente sabiendo sus limitaciones. La estructura que quiero montar seria un sistema central que tuviera en memoria una clase ScriptableObject llamada cartucho que contendr√≠an los datos. Esta clase cargar√≠a los datos externos y los asignar√≠a a los valores del cartucho, desde aqu√≠ solo queda distribuir cada valor a su respectivo sistema. La funcionalidad requerida es llegar a un punto en concreto y guardar. No es posible el autoguardado ni tampoco el guardado siempre que se quiera. Digamos que solo puedes guardar en unos puntos establecidos ya o teniendo un objeto en el inventario y estando en el mapa global. Se que es un sistema arcaico que solo se usaba en la ps1 o ni eso, pero es que la experiencia del usuario depende del camino que elijas para caminar, sin poder revertir esa elecci√≥n. Ciertamente es un sistema que no es muy viable para guardar cada cierto tiempo, ciertas variables, o para estar guardando y cargando constantemente. Pero hay que crear sistemas para la funcionalidad requerida, ni mas ni menos. Con esto en mente, volvamos a la parte de elecci√≥n entre formato de guardado exterior. Claramente los dos son buenos, pero en mi caso, ¬†JSON es una opci√≥n mas que valida. Texto plano, se puede transferir entre dispositivos y no sufre ning√∫n da√±o al modificarlo, es r√°pido, puede ser abierto con editor de texto‚Ä¶ Con esto planteado, el flujo seria: Cuando se quiere cargar, se leen los datos del JSON externo. Distribuir los datos le√≠dos por los sistemas que corresponda. Cuando se quiere guardar, se escriben los datos actuales en el cartucho. Se vuelven a escribir en el archivo externo JSON. Para comprobar que todo funcionara bien, cree una peque√±a interfaz de opciones prototipada con el nuevo sistema de UI mejorado (en la version 4 era infumable) para modificar elementos esenciales como el sonido, las resoluciones, configuraciones gr√°ficas‚Ä¶ Este es el archivo que es creado con formato JSON externo. Es bastante intuitivo y modificable incluso fuera del juego. Imagen del JSON ","date":"21-10-2016","objectID":"/posts/2016/devblog/001/:3:0","tags":["n9+","devblog"],"title":"[PROTOTIPO][#1] Comienzo","uri":"/posts/2016/devblog/001/"},{"categories":["devblog"],"content":"TABLERO El tablero es como he llamado a el campo donde se realizara el combate, es una parte complicada f√°cil sabiendo que los datos van por un lado y la l√≥gica por otro. El primer acercamiento que propuse fue el de crear una matriz en memoria del tama√±o que se quiere y crear por cada posici√≥n un objeto en el tablero, escalando en Y para conseguir altura, esto como puedes ver es algo ca√≥tico, resulta que para crear un nivel medio (20x20x20) se generan alrededor de 8000 objetos y eso solo para obtener posiciones del tablero. Entonces vi que lo que necesitaba no era una estructura neandertal, tenia que seguir el con el patr√≥n estipulado, (tarde poco en salt√°rmelo üòÑ). Separe los datos, por un lado, las posiciones las separe en una matriz de vector3 con xyz, por otro lado desde el inicio cargaba una lista con una matriz de posiciones para generar un campo vaci√≥ y en vez de crear todos los objetos solo creaba uno por xz pero lo colocaba en la posici√≥n donde y fuera la mas alta. Esto me da que por anchura y profundidad es inevitablemente necesario crear todas las posiciones pero en y solo creo 1 posici√≥n siendo la mas elevada que es la que se usara. Con esto se optimiza a 400 objetos. Ahora quer√≠a ya probar como se sent√≠a el recorrer el tablero, y solo hay que ver el genero para percatarse de que es muy importante tener un indicador/marcador de posicionamiento, para que el jugador tenga un enfoque r√°pido en caso de desorientaci√≥n. Esto es un enfoque primitivo al indicador final, como ya e dicho es fase de prototipo, por lo que cambiara al llegar la fase alfa/beta, pero me gustar√≠a que el movimiento no sea brusco entre posici√≥n y posici√≥n. Esto lo digo porque la primera funcionalidad que he realizado se notaba muy tosca, simplemente el indicador cambiada de posici√≥n y la c√°mara realizaba un movimiento suavizado hacia el indicador. Por lo que en vez de cambio brusco, he creado un objeto dentro del indicador para realizar un movimiento suavizado en relaci√≥n al axis que se esta moviendo, haciendo que al mover el joystick en x 0.5+ la velocidad de movimiento es inferior a que si en x es 1.0f+. Desplazamiento de Indicador En futuras implementaciones incorporare un ajustes para poder cambiar la sensibilidad y que los jugadores puedan cambiar la velocidad de movimiento. ","date":"21-10-2016","objectID":"/posts/2016/devblog/001/:4:0","tags":["n9+","devblog"],"title":"[PROTOTIPO][#1] Comienzo","uri":"/posts/2016/devblog/001/"},{"categories":["devblog"],"content":"CONCLUSIONES Resumen Sorprendido de Unity 5, vengo de la version 4 que ha tenido muchos problemas de rendimiento y crasheos en medio de cargas de activos y pensaba que la version 5 estar√≠a rota, pero no. Es igual de estable que mi querida Unity 3.3 y encima trae nuevas mejoras que se agradecen ya, como es el nuevo sistema de interfaz sin fallos (en la version 4 no se pod√≠a usar bien). Se defini√≥ la arquitectura a la que se optar√≠a (luego ya se vera si puedo seguir el proyecto sin desviarme üòÑ). Se creo una escena inicial que mostrara el logo y algo de informaci√≥n dando tiempo para cargar los datos externos. Investigu√© sobre las posibles opciones de persistencia en Unity y decid√≠ quedarme con JSON, creando por el camino una UI para probar la persistencia con las opciones b√°sicas. Por ultimo se defini√≥ una peque√±a clase para crear en memoria un tablero donde podernos mover libremente y empezar a construir sobre el un sistema de combate por turnos. [PROTOTIPO][#2] Men√∫ Principal\r. ","date":"21-10-2016","objectID":"/posts/2016/devblog/001/:5:0","tags":["n9+","devblog"],"title":"[PROTOTIPO][#1] Comienzo","uri":"/posts/2016/devblog/001/"},{"categories":["comun"],"content":"Antes de nada, explicare por que de esta entrada. Despu√©s explicare un poco en que consisten estos nuevos cambios y mi motivaci√≥n. Por ultimo desarrollare una soluci√≥n de seguimiento de devblog. ","date":"14-10-2016","objectID":"/posts/2016/comun/001/:0:0","tags":["n9+","devblog"],"title":"Introducci√≥n","uri":"/posts/2016/comun/001/"},{"categories":["comun"],"content":"DevBlog Un proyecto que tenia en mente desde hace bastante tiempo, pero que por falta de tiempo y conocimientos no pod√≠a empezar. Lamentablemente sigo sin tiempo, pero si que ya llevo unos a√±os estudiando en un campo m√°s t√©cnico y por lo tanto, tengo conocimientos para poder iniciar a desarrollar este proyecto. Es un proyecto sobre un videojuego que llevo realizando sobre el papel desde hace varios a√±os. Actualmente estoy terminando una carrera HND sobre desarrollo de videojuegos y tambi√©n trabajando para pagarla ^^. En este punto me veo fuerte para empezar con el largo camino que hay que recorrer para poder lograr llevarlo ha algo jugable. Se basa en un RPG t√°ctico o tambi√©n conocido como TRPG, para los que no conozcan este genero (muy de nicho) se basa en que el jugador controla un grupo de personajes que deben ir superando batallas que consisten en mover a las unidades por un escenario dividido en casillas (no siempre visibles) y atacar a los contendientes del bando contrario con armas, habilidades, hechizos, etc. Eso seria lo m√°s esencial y breve definici√≥n de lo que aglomera un juego TRPG. Un ejemplo de grandes juegos en la historia de este genero son: Final Fantasy Tactics Tactics Ogre Esta entrada es para informar de que empezare a subir entradas destinadas al desarrollo del juego, algunas veces mas t√©cnicas, otras menos, pero con el objetivo de tener una recopilaci√≥n general. ","date":"14-10-2016","objectID":"/posts/2016/comun/001/:1:0","tags":["n9+","devblog"],"title":"Introducci√≥n","uri":"/posts/2016/comun/001/"},{"categories":["comun"],"content":"Seguimiento Pr√≥ximamente creare una secci√≥n dentro del blog, con los devblogs enumerados. Estar√° colocada en la parte superior del blog como un acceso directo. El formato ser√° el siguiente [estado] #[numero.version] [nombre.version], quedando una cosa as√≠: [PROTOTIPO] #000 Inicializaci√≥n [ALPHA] #023 Cl√©rigo [BETA] #122 Contenido Historia Actualmente, seguir√© subiendo continuadamente nuevos blogs, no ser√°n cada viernes o cada domingo, sino cuando tenga los objetivos de la versi√≥n completados, creare una nueva entrada. ","date":"14-10-2016","objectID":"/posts/2016/comun/001/:2:0","tags":["n9+","devblog"],"title":"Introducci√≥n","uri":"/posts/2016/comun/001/"},{"categories":["comun"],"content":"Advertencia Este contenido estar√° repleto de spoilers del videojuego. Por lo tanto si lo que quieres es simplemente jugarlo, recomiendo no leerse las entradas. :D . ","date":"14-10-2016","objectID":"/posts/2016/comun/001/:3:0","tags":["n9+","devblog"],"title":"Introducci√≥n","uri":"/posts/2016/comun/001/"},{"categories":null,"content":"Generalmente suelo publicar entradas en su mayor√≠a aleatorias, seg√∫n lo que veo a diario, investigaciones de mi inter√©s, consultas de otros compa√±eros, vines que realizo, intentos de ilustraciones entre muchas otras cosas. Esto a lo largo de mucho tiempo ha ocasionado que la gente se pierda entre tanta informaci√≥n, por eso he creado la backdoor, CodeBackDoor es una puerta trasera que dirige directamente a lo que creo que es m√°s relevante del blog (Las entradas que no est√©n aqu√≠, tendr√°n que seguir en vuestros marcadores ). ^.^ GitHub\rGitLab\rDise√±o de Videojuegos Normalmente, voy soltando peque√±as entradas de lo que es este trabajo dentro de la industria del videojuego. Esta lista es la unificaci√≥n de las que creo que son relevantes o de mayor inter√©s seg√∫n analytics. 1. El rol del dise√±ador de videojuegos 2. El Arte del dise√±o 3. Introducci√≥n 4. Los 12 principios de la Animaci√≥n 5. Las leyes de UX Aprende C#/C++ con Unity/Unreal Aunque la mayor√≠a de mis publicaciones son temporales, a menudo son fragmentos de informaci√≥n aleatorios y no relacionados. El contenido aqu√≠ est√° destinado a ser m√°s permanente, completo y guiado, como si estuvieras en una clase o leyendo un libro. Unity3D C# | Unreal C++ 1. Introducci√≥n | 1. Introducci√≥n 2. Tu primer script | 2. Tu primer script 3. Variables | 3. Variables 4. M√©todos | 4. M√©todos 5. Bucles | 5. Bucles 6. Gen√©ricos | 6. Gen√©ricos 7. Corrutinas | 7. Corrutinas 8. Clases | 8. Clases 9. Guardando datos | 9. Guardando datos 10. Enums y Flags | 10. Enums y Flags 11. Structs | 11. Structs 12. Scriptable Objects | 12. Scriptable Objects Otras cosas Aqu√≠ he dejado unas pocas entradas, que entiendo que pueden ser interesantes, ya que seg√∫n analytics son las que mayor visitas tienen. 0. Investigaci√≥n Monomito 1. Investigaci√≥n RPG-T√°ctico 2. Investigaci√≥n Generaci√≥n 3. Comandos fundamentales de Windows 4. Comandos fundamentales de GIT 5. Consejos para trabajar en equipo 6. Consejos para organizar tus proyectos 7. Mis Artistas 2D 8. MVC simplificado 9. Explicaci√≥n IA b√°sica 10. Buenas Practicas de programaci√≥n 11. MonoBehavior de Unity 12. Tipos de lenguajes de programaci√≥n {Bajo y Alto nivel} ","date":"31-07-2016","objectID":"/backdoor/:0:0","tags":null,"title":". BackDoor .","uri":"/backdoor/"}]